@Ecore(
	nsURI="http://andycarpenter.work/metamodel/security",
	nsPrefix="security"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.security.edit/src",
	editPluginID="work.andycarpenter.metamodel.security.edit",
	childCreationExtenders="true")
package work.andycarpenter.metamodel.security

import work.andycarpenter.metamodel.base.NamedElement
import work.andycarpenter.metamodel.base.NamedDisplayElement
import work.andycarpenter.metamodel.orm.Attribute
import work.andycarpenter.metamodel.orm.Entity

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


class SecurityModel {
	contains Authentication[1] authentication

	@OCL(derivation="not authentication.oclIsUndefined()")
	derived readonly unsettable transient volatile boolean isAuthenticated
	
	contains Role[] roles
}

abstract class Authentication {
	refers Entity[1] userModel
}

class LocalAuthenticationSystem extends Authentication {
	refers Entity[1] authenticationModel
	//  userKey in authentication model matches authenticationKey in user model
	refers Attribute[1] userKey
	refers Attribute[1] authenticationKey
	refers Attribute[1] identifierFeature
	refers Attribute[1] passwordFeature

	refers Entity[1] resetPasswordRequestModel

	contains RegistrationElement registrationElement opposite authentication
	@OCL(derivation="not registrationElement.oclIsUndefined()")
	derived readonly transient volatile boolean hasRegistrationElement

	contains LoginElement[1] loginElement opposite authentication

	contains LogoutElement[1] logoutElement opposite authentication

	contains ForgottenPasswordElement[1] forgottenPasswordElement opposite authentication

	contains ChangePasswordElement[1] changePasswordElement opposite authentication

	boolean captcha = "true"

	boolean allowRememberMe

	boolean allowSelfRegistration

	boolean useEmailActivation = "true"

	boolean sendWelcomeEmail = "true"

	String sectionClass = ''
	String captionClass = ''
	String contentClass = ''
}

abstract class AuthenticationElement extends NamedDisplayElement {
	String sectionClassOverride = ''
	@OCL(derivation="if sectionClassOverride.trim() <> '' then
			sectionClassOverride.trim()
		else if self.oclAsType(ecore::EObject).eContainer().oclAsType(LocalAuthenticationSystem).sectionClass.trim() <> '' then
			self.oclAsType(ecore::EObject).eContainer().oclAsType(LocalAuthenticationSystem).sectionClass.trim()
		else
			''
		endif endif")
	derived readonly transient volatile String sectionClass
	@OCL(derivation="sectionClass <> ''")
	derived readonly transient volatile boolean hasSectionClass

	String captionClassOverride = ''
	@OCL(derivation="if captionClassOverride.trim() <> '' then
			captionClassOverride.trim()
		else if self.oclAsType(ecore::EObject).eContainer().oclAsType(LocalAuthenticationSystem).captionClass.trim() <> '' then
			self.oclAsType(ecore::EObject).eContainer().oclAsType(LocalAuthenticationSystem).captionClass.trim()
		else
			''
		endif endif")
	derived readonly transient volatile String captionClass
	@OCL(derivation="captionClass <> ''")
	derived readonly transient volatile boolean hasCaptionClass

	String contentClassOverride = ''
	@OCL(derivation="if contentClassOverride.trim() <> '' then
			contentClassOverride.trim()
		else if self.oclAsType(ecore::EObject).eContainer().oclAsType(LocalAuthenticationSystem).contentClass.trim() <> '' then
			self.oclAsType(ecore::EObject).eContainer().oclAsType(LocalAuthenticationSystem).contentClass.trim()
		else
			''
		endif endif")
	derived readonly transient volatile String contentClass
	@OCL(derivation="contentClass <> ''")
	derived readonly transient volatile boolean hasContentClass
}

class RegistrationElement extends AuthenticationElement {
	refers LocalAuthenticationSystem[1] authentication opposite registrationElement

	String[1] invokeLabel = ''
	String[1] confirmLabel = ''

	String[1] uriElement = 'register'
	String[1] uriEmailVerification = 'verify'
}

class LoginElement extends AuthenticationElement {
	refers LocalAuthenticationSystem[1] authentication opposite loginElement

	String[1] invokeLabel = 'Login'
	String[1] confirmLabel = 'Login'

	String[1] uriElement = 'login'
}

class LogoutElement extends AuthenticationElement {
	refers LocalAuthenticationSystem[1] authentication opposite logoutElement

	String[1] invokeLabel = 'Logout'
	String[1] confirmLabel = ''

	String[1] uriElement = 'logout'
}

class ForgottenPasswordElement extends AuthenticationElement {
	refers LocalAuthenticationSystem[1] authentication opposite forgottenPasswordElement

	String[1] invokeLabel = 'Forgotten Password'
	String[1] requestLabel = 'Request Password Reset'
	String[1] resetLabel = 'Set Password'

	String[1] uriElement = 'forgotten-password'
	String[1] uriEmailSent = 'check-email'
	String[1] uriResetPassword = 'reset'

	String[1] emailHelp = "Enter your email address and we we will send you a link to reset your password"
	String[1] passwordLabel = 'New Password'
	String[1] passwordPlaceholder = 'New Password'
	String[1] passwordTitle = 'New Password'

	String[1] passwordConfirmationLabel = 'Confirm Password'
	String[1] passwordConfirmationPlaceholder = 'Confirm Password'
	String[1] passwordConfirmationTitle = 'Confirm Password'

	String[1] passwordMessageRequired = "A password value is required"
	String[1] passwordMessageValueMismatch = "The two password values do not match"

	String[1] emailCheckSubject
	String[1] emailCheckMessage
	String[1] emailCheckSentCaption
	String[1] emailCheckSentMessage
}

class ChangePasswordElement extends AuthenticationElement {
	refers LocalAuthenticationSystem[1] authentication opposite changePasswordElement

	String[1] invokeLabel = 'Change Password'
	String[1] confirmLabel = 'Set Password'

	String[1] uriElement = 'change-password'
}


class CasAuthentication extends Authentication {
	String[1] loginLabel
	String logoutLabel
}


class Role extends NamedElement {
}


abstract class AuthorisationExpression {
	@OCL(derivation="if units->size() < 2 then
			true
		else
			units->subOrderedSet(2, units->size())->forAll(u | u.authorisationRoles.trim() = units->first().authorisationRoles.trim())
		endif")
	op boolean areSame(AuthorisationExpression authorisation)
}

class IsGrantedRole extends AuthorisationExpression {
	Boolean negated
	refers Role role

	@OCL(body="if not op2.oclIsTypeOf(IsGrantedRole) then
				false
			else
				let grant2 : IsGrantedRole = op2.oclAsType(IsGrantedRole)
					in if self.negated <> grant2.negated 
								or self.role.oclIsUndefined()
								or grant2.role.oclIsUndefined() then
							false
						else
							self.role.name = grant2.role.name
						endif
			endif")
	op boolean areSame(AuthorisationExpression op2)
}