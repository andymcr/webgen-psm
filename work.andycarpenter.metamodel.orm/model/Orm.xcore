@Ecore(
	nsURI="http://andycarpenter.work/metamodel/ObjectRelationalMapping",
	nsPrefix="orm"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.orm.edit/src",
	editPluginID="work.andycarpenter.metamodel.orm.edit",
	childCreationExtenders="true",
	editorDirectory="/work.andycarpenter.metamodel.orm.editor/src",
	complianceLevel="17.0"
)
package work.andycarpenter.metamodel.orm

import org.eclipse.emf.common.util.BasicEList

import work.andycarpenter.metamodel.base.Classifier
import work.andycarpenter.metamodel.base.ConstantContainer
import work.andycarpenter.metamodel.base.DataType
import work.andycarpenter.metamodel.base.EnumerationType
import work.andycarpenter.metamodel.base.FormalParameter
import work.andycarpenter.metamodel.base.FormalParameterList
import work.andycarpenter.metamodel.base.NamedDisplayElement
import work.andycarpenter.metamodel.base.NamedElement
import work.andycarpenter.metamodel.expression.Expression
import work.andycarpenter.metamodel.expression.Predicate
import work.andycarpenter.metamodel.expression.Variable

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


class OrmModel {
	contains SerializationGroup[] serializationGroups
	contains unique DataType[] dataTypes
//	@OCL(derivation="dataTypes->select(t | t.oclIsKindOf(base::EnumerationType)).oclAsType(base::EnumerationType)->asOrderedSet()")
//	refers derived readonly unsettable transient volatile unique EnumerationType[] enumerationTypes
	refers derived readonly unsettable transient volatile unique EnumerationType[] enumerationTypes get {
		dataTypes.filter[it instanceof EnumerationType].map[it as EnumerationType].toEList()
	}
	contains Entity[] entities opposite partOf
	contains Repository[] repositories opposite partOf
	contains CollectionType[] collectionTypes
	DatabaseTechnologies databaseTechnology = "MySql"
	OrmTechnologies ormTechnology
	boolean timestampCreation
	boolean timestampUpdates
	boolean hasCustomOrmTypes
}

enum Cardinality {
	Optional
	Required = 1
	Many = 2
}

enum DatabaseTechnologies {
	MySql
	Oracle = 1
}

enum IsHasChoices {
	isA
	hasA = 1
}

enum OrmTechnologies {
	JPA
	DataMapper = 1
	Idiorm = 2
	Kohana = 3
	DoctrineORM = 4
	DoctrineODM = 5
}

enum CollectionTypes {
	Bag
	List
	OrderedSet
	Set
}

class CollectionType extends NamedElement {
	CollectionTypes collectionType
	refers Classifier[1] elementType
}

class SerializationGroup extends NamedElement {
}



class Entity extends Classifier {
	container OrmModel[1] partOf opposite entities

	String singletonName
	String pluralisedName

	refers Repository repository opposite serves
	contains unique Feature[] allFeatures opposite partOf
	refers unique Feature[] ^keys

	@OCL(derivation="allFeatures->select(f | f.isVisible)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Feature[] features

	@OCL(derivation="features->select(f | f.isPrimaryKey)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Feature[] primaryKeys

	@OCL(derivation="primaryKeys->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasPrimaryKeys

	@OCL(derivation="features->select(f | f.hasDefaultValue)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Feature[] featuresWithDefaultValue

	@OCL(derivation="featuresWithDefaultValue->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasFeaturesWithDefaultValue

	@OCL(derivation="features->select(f | f.isAttributeFeature).oclAsType(Attribute)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Attribute[] attributes

	@OCL(derivation="attributes->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAttributes

	@OCL(derivation="keys->select(k | k.isAttributeFeature).oclAsType(Attribute)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Attribute[] attributeKeys

	@OCL(derivation="attributeKeys->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAttributeKeys

	@OCL(derivation="features->select(f | f.isResourceFeature).oclAsType(ResourceFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique ResourceFeature[] resourceFeatures

	@OCL(derivation="resourceFeatures->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasResourceAttributes

	@OCL(derivation="attributes->select(a | a.isUnique)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Attribute[] uniqueAttributes

	@OCL(derivation="uniqueAttributes->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasUniqueAttributes

	@OCL(derivation="attributes->select(a | a.isContainerUnique)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Attribute[] containerUniqueAttributes

	@OCL(derivation="features->select(f | f.isAssociationFeature).oclAsType(Association)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Association[] associations

	@OCL(derivation="associations->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAssociations

	@OCL(derivation="keys->select(k | k.isAssociationFeature).oclAsType(Association)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Association[] associationKeys

	@OCL(derivation="associationKeys->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAssociationKeys

	@OCL(derivation="associations->any(a | a.isContainer = true)")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Association containingAssociation

	@OCL(derivation="if containingAssociation.oclIsUndefined() then null else containingAssociation.targetType endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Entity containingType

	@OCL(derivation="not containingType.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isContained

	@OCL(derivation="associations->select(a | not a.isSingleton)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Association[] collectionAssociations

	@OCL(derivation="collectionAssociations->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCollectionAssociations

	@OCL(derivation="attributes->select(a | a.isDateFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Attribute[] dateAttributes

	@OCL(derivation="dateAttributes->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasDateAttributes

	@OCL(derivation="attributes->select(a | a.hasSlugFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Attribute[] slugAttributes

	@OCL(derivation="slugAttributes->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSlugAttributes

	@OCL(derivation="features->select(f | f.isValidated)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable  transient volatile unique Feature[] validatedFeatures

	@OCL(derivation="validatedFeatures->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasValidatedFeatures

	@OCL(derivation="features->select(f | f.hasColumn)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile unique Feature[] tableColumns

	String tableName
	String autoKeyName
	String autoKeyPersistentType
	String autoKeyGenerationStrategy
	refers unique Feature[] ^unique
	contains ModelLabel[] labels opposite labelFor

	@OCL(derivation="labels->select(l | l.name = 'default')->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasDefaultLabel

    @GenModel(propertyCategory="Model")
	boolean implementsUserInterface = "false"

    @GenModel(propertyCategory="Model")
	boolean implementsForumUser = "false"

    @GenModel(propertyCategory="Model")
	boolean implementsPasswordAuthenticatedInterface = "false"

    @GenModel(propertyCategory="Model")
	boolean implementsResetPasswordInterface = "false"
}


abstract class Feature extends NamedDisplayElement {
	container Entity[1] partOf opposite allFeatures
	Cardinality cardinality
	CollectionTypes collectionType
	boolean isPrimaryKey
	boolean isDerived
	boolean customiseSet
	String singletonName
	String pluralisedName
	String columnName
	boolean[1] encodeUriKey
	boolean collectionOrmAllowAdd
	boolean collectionOrmAllowRemove
	@OCL(derivation="self.oclIsTypeOf(Association)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isAssociationFeature

	@OCL(derivation="self.oclIsKindOf(Attribute)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isAttributeFeature

	refers SerializationGroup[] serializationGroups

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isBooleanDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isBooleanFeature

	@OCL(derivation="self.oclIsTypeOf(DataTypeAttribute)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isDataTypeFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType else null endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Classifier dataType

	@OCL(derivation="self.oclIsTypeOf(DateAttribute)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isDateFeature

	@OCL(derivation="if self.oclIsTypeOf(DateAttribute) then self.oclAsType(DateAttribute).details else null endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile DateDetails dateDetails

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isEmailDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isEmailFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then
			self.oclAsType(DataTypeAttribute).attributeDataType.isEnumerationType
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isEnumerationFeature

	//OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.oclAsType(_'http://andycarpenter.work/metamodel/base'::EnumerationType) else null endif")
//	refers derived readonly unsettable transient volatile EnumerationType enumerationType
    @GenModel(propertyCategory="Debug")
	refers derived readonly transient volatile EnumerationType enumerationType get {
		if (isEnumerationFeature)
			(this as DataTypeAttribute).attributeDataType as EnumerationType
	}

	@OCL(derivation="self.oclIsTypeOf(FileResource)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isFileFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isFloatDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isFloatFeature

	@OCL(derivation="self.oclIsTypeOf(ImageResource)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isImageFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isIntegerDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isIntegerFeature

	@OCL(derivation="self.oclIsTypeOf(LocationFeature)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isLocationFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).obfuscateFormFields else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isObfuscatedFeature

	@OCL(derivation="self.oclIsKindOf(ResourceFeature)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isResourceFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isStringDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isStringFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isTextareaDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isTextareaFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isUrlDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isUrlFeature

	@OCL(derivation="if self.oclIsKindOf(Attribute) then self.oclAsType(Attribute).attributeDefaultValue else null endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Expression defaultValue

	@OCL(derivation="not self.defaultValue.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasDefaultValue

	@OCL(derivation="hasValidationPattern -- || hasPlaceholder")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasHtml5Attributes

	@OCL(derivation="self.oclIsKindOf(Attribute) or self.isOwningEnd")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasColumn

	@OCL(derivation="if self.oclIsTypeOf(Association) then self.oclAsType(Association).associationOwningEnd else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isOwningEnd

	@OCL(derivation="if self.oclIsKindOf(Attribute) then self.oclAsType(Attribute).slugFields->notEmpty() else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSlugFields

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then not self.oclAsType(DataTypeAttribute).validationPattern.oclIsUndefined() else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasValidationPattern

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then not self.oclAsType(DataTypeAttribute).caseInsensitive else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isCaseInsensitive

	@OCL(derivation="if self.oclIsTypeOf(Association) then self.oclAsType(Association).associationContainer else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isContainer

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).containerUnique else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isContainerUnique

	@OCL(derivation="if self.oclIsTypeOf(Association) then self.oclAsType(Association).associationContains else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isContains

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).encrypt else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isEncrypted

	@OCL(derivation="cardinality = Cardinality::Required")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isRequired

	@OCL(derivation="cardinality <> Cardinality::Many")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isSingleton

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).unique else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isUnique

	@OCL(derivation="self.isRequired")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isValidated

	@OCL(derivation="if self.oclIsKindOf(Attribute) then true else if self.oclIsKindOf(Association) then self.oclAsType(Association).visible else true endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isVisible

//	derived readonly unsettable transient volatile boolean hasSerializationControl get {
//		if (this instanceof Attribute)
//			(this as Attribute).hasSerializationControlAttribute
//		else if (this instanceof Association)
//			(this as Association).hasSerializationControlAssociation
//		else
//			false 
//	}
}

abstract class Attribute extends Feature, Label {
	contains Expression attributeDefaultValue
	boolean hidden
	IsHasChoices booleanIsHasChoice
	refers Attribute[] slugFields
	
	@OCL(derivation="self.serializationGroups->size() > 0")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSerializationControlAttribute
}

class DataTypeAttribute extends Attribute {
	refers DataType[1] attributeDataType
	boolean obfuscateFormFields
	boolean caseInsensitive
	boolean encrypt
	boolean ^unique
	boolean containerUnique
	String validationPattern
}

enum DateDetails {
	DateOnly = 1
	TimeOnly = 2
	DateAndTime = 3
}

class DateAttribute extends Attribute {
	DateDetails details
}

abstract class ResourceFeature extends Feature {
    @GenModel(propertyCategory="Resource")
	String[1] maximumUploadSize = "0"
    @GenModel(propertyCategory="Resource")
	unique String[] validUploadMimeTypes
    @GenModel(propertyCategory="Resource")
	unique String[] validUploadExtensions
    @GenModel(propertyCategory="Resource")
	String[1] uriPrefix = ""
    @GenModel(propertyCategory="Resource")
	String[1] baseUploadDirectory
    @GenModel(propertyCategory="Resource")
	contains DirectoryNamer directoryNamer
    @GenModel(propertyCategory="Resource")
	contains FileNamer[1] fileNamer
}

abstract class DirectoryNamer {
}

class SubDirectory extends DirectoryNamer {
    @GenModel(propertyCategory="Resource")
	int charactersPerDirectory = "2"
    @GenModel(propertyCategory="Resource")
	int directoryCount = "1"
}

class PropertyDirectory extends DirectoryNamer {
    @GenModel(propertyCategory="Resource")
	refers Attribute[1] attribute
}

class DateTimeDirectory extends DirectoryNamer {
    @GenModel(propertyCategory="Resource")
	String[1] format = "Y/m/d"
    @GenModel(propertyCategory="Resource")
	refers Attribute[1] attribute
}

abstract class FileNamer {
}

class UniqueIdNamer extends FileNamer {
}

class OriginalNamer extends FileNamer {
}

class PropertyNamer extends FileNamer {
    @GenModel(propertyCategory="Resource")
	refers Attribute[1] attribute
}

class HashNamer extends FileNamer {
    @GenModel(propertyCategory="Resource")
	String algorithm = "sha1"
    @GenModel(propertyCategory="Resource")
	int length = "0"
}

class Base64Namer extends FileNamer {
    @GenModel(propertyCategory="Resource")
	int length = "10"
}

class SmartUniqueNamer extends FileNamer {
}

class SlugNamer extends FileNamer {
}

class FileResource extends ResourceFeature {
}

class ImageResource extends ResourceFeature {
}

class LocationFeature extends Attribute {
}

enum AssociationRelationships {
	OneToOne = 0
	ManyToOne = 1
	OneToMany = 2
	ManyToMany = 3
}

@Ecore(constraints="onlyOneOwningEnd")
@OCL(onlyOneOwningEnd="associationOwningEnd xor opposite.associationOwningEnd")
class Association extends Feature {
	refers Association[1] ^opposite

	contains AssociationKey[] ^keys opposite keyFor

	boolean[1] associationContainer

	boolean[1] associationContains

	boolean[1] associationOwningEnd

	boolean[1] visible = "true"

	AssociationRelationships associationRelationship

	int[1] serializationMaxDepth = "1"

	String pivotTableName

	@OCL(derivation="if not opposite.oclIsUndefined() then opposite.isSingleton else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isOppositeSingleton

	@OCL(derivation="if not opposite.oclIsUndefined() then opposite.columnName else null endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String oppositeColumnName

	@OCL(derivation="self.partOf")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Entity sourceType

	@OCL(derivation="if not opposite.oclIsUndefined() then opposite.sourceType else null endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Entity targetType

	@OCL(derivation="self.serializationGroups->size() > 0 or self.serializationMaxDepth > 0")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSerializationControlAssociation
}

class SingletonAssociation extends Association {
}

class AssociationKey {
	container Association[1] keyFor opposite ^keys
	refers Feature[1] sourceFeature
	refers Feature targetFeature
}


abstract class Path {
	op String name() {
		''
	}

	op Entity contextEntity() {
		null
	}

 	op Path leafElement()
 
	op Feature leafFeature() {
		if (leafElement() === null) {
			return null
		} else if (leafElement() instanceof AssociationPathElement) {
			return (leafElement() as AssociationPathElement).association
		} else if (leafElement() instanceof AttributePathElement) {
			return (leafElement() as AttributePathElement).attribute
		} else if (leafElement() instanceof ResourcePathElement) {
			return (leafElement() as ResourcePathElement).resource
		} else {
			return null
		}
	}

}

abstract class PathRoot extends Path {
	contains ChildFeature childFeature opposite parent
}

abstract class AssociationPathElement extends PathRoot {
    @GenModel(propertyCategory="Model")
	refers Association[1] association

	op String name() {
		if (association === null ) {
			''
		} else {
			association.name
		}
	}

    @GenModel(propertyCategory="Interface")
	refers ModelLabel valueDisplay

	op Entity associationTarget() {
		association?.targetType
	} 

	op Path leafElement() {
		if (childFeature === null) {
			this
		} else {
			childFeature.leafElement();
		}
	}

	op Entity leafEntity() {
		if (association === null) {
			null
		} else {
			if (childFeature === null) {
				associationTarget
			} else {
				if (childFeature instanceof AssociationPathElement) {
					(childFeature as AssociationPathElement).leafEntity();
				} else {
					associationTarget
				}
			}
		}
	}
}

abstract class AttributePathElement extends Path {
    @GenModel(propertyCategory="Model")
	refers Attribute[1] attribute

	op String name() {
		if (attribute === null ) {
			''
		} else {
			attribute.name
		}
	}
	
	op Path leafElement() {
		this
	}
}

abstract class ResourcePathElement extends Path {
    @GenModel(propertyCategory="Model")
	refers ResourceFeature[1] resource

	op String name() {
		if (resource === null) {
			''
		} else {
			resource.name
		}
	}

	op Path leafElement() {
		this
	}
}

interface ChildFeature extends Path {
	container PathRoot[1] parent opposite childFeature

	op Entity contextEntity() {
		if (parent instanceof AssociationPathElement) {
			(parent as AssociationPathElement).associationTarget()
		} else {
			(parent as ParameterVariable).contextEntity()
		}
	}
}

class ChildAssociation extends AssociationPathElement, ChildFeature {
}

class ChildAttribute extends AttributePathElement, ChildFeature {
}

class ChildResource extends ResourcePathElement, ChildFeature {
}

interface Label {
}

class ModelLabel extends NamedElement, Label {
	container Entity[1] labelFor opposite labels

	@GenModel(propertyCategory="Interface")
	String[1] format

	boolean customise

	contains ModelLabelFeature[] features opposite partOf
}

interface ModelLabelFeature {
	container ModelLabel partOf opposite features

	op Entity contextEntity() {
		partOf.labelFor
	}
}

class ModelLabelAssociation extends AssociationPathElement,ModelLabelFeature {
}

class ModelLabelAttribute extends AttributePathElement, ModelLabelFeature {
	String dateFormat
}


class Repository extends NamedElement, ConstantContainer {
	container OrmModel[1] partOf opposite repositories

	@GenModel(propertyCategory="Model")
	refers Entity serves opposite repository

	contains Selection[] selections opposite definedBy

	@GenModel(propertyCategory="Business")
	refers Selection findAll

	@GenModel(propertyCategory="Business")
	refers Selection findOne
}

class Selection extends NamedElement, FormalParameterList {
	container Repository definedBy opposite selections

	@GenModel(propertyCategory="Data Access")
	int limit = "0"

	@GenModel(propertyCategory="Data Access")
	boolean distinct

	@GenModel(propertyCategory="Data Access")
	refers Feature[] fields

 	op boolean hasFields() {
		!fields.isEmpty()
	}

	@GenModel(propertyCategory="Data Access")
	refers Association[] joins

 	op boolean hasJoins() {
		!joins.isEmpty()
	}

	contains Predicate condition

 	op boolean hasCondition() {
		condition !== null
	}

	contains Order[] ordering

 	op boolean hasOrdering() {
		!ordering.isEmpty()
	}

	contains Filter[] filters opposite selection

 	op boolean hasFilters() {
		!filters.isEmpty()
	}

	@GenModel(propertyCategory="Data Access")
	refers Feature[] grouping

 	op boolean hasGrouping() {
		!grouping.isEmpty()
	}

	contains SelectionPath selectPath opposite selection

 	op boolean hasSelectPath() {
		selectPath !== null
	}

	@GenModel(propertyCategory="Implementation")
	String methodName
 
 	op Entity selectionType() {
		if (selectPath === null) { 
			definedBy.serves 
		} else {
			selectPath.leafEntity() 
		}
	}

	op Entity[] referencableTypes() {
		var types = new BasicEList<Entity>() //
		types.add(definedBy.serves)
		types.addAll(joins.map[it.partOf])
		types.addAll(joins.map[it.opposite.partOf])
		return types
	}

	@OCL(derivation="(limit = 0 or limit > 1) and (joins->isEmpty() or fields->isEmpty())")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasPaginationSupport
}

class SelectionPath extends AssociationPathElement {
	container Selection selection opposite selectPath
	
	op Entity contextEntity() {
		selection.definedBy.serves
	}
}


abstract class Order {
	contains AttributeVariable[1] attribute
}

class Asc extends Order {
}

class Desc extends Order {
}

class Filter extends NamedDisplayElement, FormalParameterList {
	refers Selection selection opposite filters
	contains Predicate condition
	String methodName
}



abstract class FeatureVariable extends Path, Variable {
	op Feature feature()
}

class AssociationVariable extends AssociationPathElement, FeatureVariable {
	op Feature feature() {
		association
	}
}

class AttributeVariable extends AttributePathElement, FeatureVariable {
	op Feature feature() {
		attribute
	}
}

class ResourceVariable extends ResourcePathElement, FeatureVariable {
	op Feature feature() {
		resource
	}
}

class ParameterVariable extends PathRoot, Variable {
    @GenModel(propertyCategory="Model")
	refers FormalParameter[1] formal

	op Entity contextEntity() {
		if (formal === null) {
			null
		} else {
			if (formal.dataType === null || !(formal.dataType instanceof Entity)) {
				null
			} else {
				(formal.dataType as Entity)
			}
		}
	}
}