@Ecore(
	nsURI="http://andycarpenter.work/metamodel/expression",
	nsPrefix="expression"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.expression.edit/src",
	editPluginID="work.andycarpenter.metamodel.expression.edit",
	extensibleProviderFactory="true"
)
package work.andycarpenter.metamodel.expression

import org.eclipse.emf.ecore.EObject


annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


enum BooleanOperator {
	And
	Or = 1
}

enum ComparisionOperator {
	GreaterThan
	LessThan = 1
}

abstract class Expression {
	String[] suffixes

	@OCL(derivation="if self.oclAsType(ecore::EObject).eContainer().oclIsKindOf(Expression) then
			self.oclAsType(ecore::EObject).eContainer().oclAsType(Expression).rootContainer
		else
			self.oclAsType(ecore::EObject).eContainer()
		endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile EObject rootContainer
}

abstract class Literal extends Expression {
}

abstract class Variable extends Expression {
}

class FunctionCall extends Expression {
	String[1] name
	contains Expression[*] actuals
}


abstract class Predicate extends Expression {
	boolean negated = "false"
}

class PredicateBooleanVariable extends Predicate {
	contains Variable feature
}

class PredicateBooleanOperator extends Predicate {
	contains Predicate[+] predicates
	BooleanOperator[1] operator = "And"
}

class PredicateEqualityOperator extends Predicate {
	contains Expression[1] left
	contains Expression[1] right
}

class PredicateComparisonOperator extends Predicate {
	contains Expression[1] left
	ComparisionOperator[1] operator
	contains Expression[1] right
}

class PredicateInOperator extends Predicate {
	contains Expression[1] left
	contains Expression[1] right
}

class PredicateLikeOperator extends Predicate {
	contains Variable[1] left
	contains Expression[1] right
}

class PredicateIsEmpty extends Predicate {
	contains Variable feature
}

class PredicateIsNull extends Predicate {
	contains Variable feature
}