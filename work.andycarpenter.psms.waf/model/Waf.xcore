@Ecore(
	nsURI="http://cs.manchester.ac.uk/mdsd/WebApplicationFramework",
	nsPrefix="waf"
)
@GenModel(
	editDirectory="/work.andycarpenter.psms.waf.edit/src",
	editPluginID="work.andycarpenter.psms.waf.edit",
	childCreationExtenders="true",
	editorDirectory="/work.andycarpenter.psms.waf.editor/src")
package work.andycarpenter.psms.waf

import work.andycarpenter.psms.expression.Expression
import work.andycarpenter.psms.expression.Predicate
import work.andycarpenter.psms.expression.Variable
import work.andycarpenter.psms.orm.Association
import work.andycarpenter.psms.orm.Attribute
import work.andycarpenter.psms.orm.DataType
import work.andycarpenter.psms.orm.DateDetails
import work.andycarpenter.psms.orm.Entity
import work.andycarpenter.psms.orm.Label
import work.andycarpenter.psms.orm.ModelLabel
import work.andycarpenter.psms.orm.NamedDisplayElement
import work.andycarpenter.psms.orm.NamedElement
import work.andycarpenter.psms.orm.OrmModel
import work.andycarpenter.psms.orm.SingletonLocation
import work.andycarpenter.psms.api.API
import work.andycarpenter.psms.service.BusinessOperation
import work.andycarpenter.psms.service.Filter
import work.andycarpenter.psms.service.FormalParameter
import work.andycarpenter.psms.service.Selection
import work.andycarpenter.psms.service.Service
import work.andycarpenter.psms.service.ServiceModel


enum FrameworkTechnologies {
	JSF
	CakePHP = 1
	CodeIgniter = 2
	Kohana = 3
	Laravel = 4
	Symfony = 5
}

enum InputTechnologies {
	Html
	jQueryUI = 1
}

enum AjaxTechnologies {
	None
	jQuery = 1
	AngularJS = 2
}

class WafModel {
	refers OrmModel[1] persistence
	refers ServiceModel[1] business
	contains ImageManipulation[] imageManipulations
	contains Page[] pages opposite partOf
	contains Menu[] menus
	refers API api
	String[1] siteName
	String[1] siteTitle
	String webmasterEmail
	String copyrightText
	String metaDescription
	String logoImage
	refers ImageManipulation logoFilters
	FrameworkTechnologies frameworkTechnology
	boolean useDbSessionStorage
	InputTechnologies inputTechnology
	AjaxTechnologies ajaxTechnology
	contains Authentication authentication opposite authorises
	String captchaSiteKey
	String captchaSecretKey
	String textEditorURL
	String topNavigationId
	refers Menu sideMenu
	String siteTemplate
	boolean staticUnitsEditable
}


abstract class Authentication {
	refers WafModel[1] authorises opposite authentication
	refers Entity[1] user
	refers Attribute[1] userKey
	String[1] loginLabel = ""
	String logoutLabel = ""
}

enum AuthenticationKeyTypes {
	Email = 1
	Username = 2
}

class LocalAuthenticationSystem extends Authentication {
	refers Entity authentication
	AuthenticationKeyTypes[1] authenticationKey
	refers Entity loginAttempt
	refers Entity autoLogin
	boolean useCaptcha
	boolean allowRememberMe
	boolean allowSelfRegistration
	boolean useEmailActivation = "true"
	boolean sendWelcomeEmail = "true"
	refers RegistrationUnit registrationUnit opposite authenticationSystem
	refers LoginUnit loginUnit opposite authenticationSystem
	refers ForgottenPasswordUnit forgottenPasswordUnit opposite authenticationSystem
}

class CasAuthentication extends Authentication {
}


abstract class DisplayElement {
	String[1] displayLabel
}


class ImageManipulation extends NamedElement {
	int jpegQuality = "-1"
	contains ImageFilter[] filters
}

abstract class ImageFilter {
}

enum BackgroundPositions {
	TopLeft = 0,
	Top = 1,
	TopRight = 2,
	Left = 3,
	Center = 4,
	Right = 5,
	BottomLeft = 6,
	Bottom = 7,
	BottomRight = 8
}

class BackgroundFilter extends ImageFilter {
	String color
	int width
	int height
	BackgroundPositions position
}


enum ThumbnailModes {
	Crop = 0,
	Resize = 1
}

class ThumbnailFilter extends ImageFilter {
	int width
	int height
	ThumbnailModes mode
}


class Menu extends NamedDisplayElement {
	contains MenuEntry[] entries opposite partOf
	boolean omitCaption
	String captionClass
	String styleClass
	String layoutClass
}

abstract class MenuEntry {
	container Menu[1] partOf opposite entries
}

class SubmenuEntry extends Menu, MenuEntry {
	String requiresRole
}

class ActionMenuEntry extends MenuEntry, NamedDisplayElement {
	refers ContentUnit[1] action
	contains Query query
}

class EditStaticTextMenuEntry extends MenuEntry, NamedDisplayElement {
}

class Page extends NamedDisplayElement, UnitContainer {
	container WafModel partOf opposite pages
	refers Page parentPage opposite childPages
	refers Page[] childPages opposite parentPage
	String uriElement = ""
	String styleClass
}

class Query extends NamedElement {
	refers Filter[1] filter
	contains QueryParameter[] parameters
}

class QueryParameter extends NamedElement {
	refers FormalParameter[1] formal
	String value
}

interface UnitContainer {
	contains ContentUnit[] units opposite displayedOn
}

abstract class ContentUnit extends NamedDisplayElement {
	container UnitContainer[1] displayedOn opposite units
	String uriElement = ""
	contains RouteActual[] routeActuals
	String requiresRole = ""
	String purposeSummary
	String alternative
	boolean omitCaption
	String captionClass
	String styleClass
	String contentClass
}

class RouteActual {
	refers Attribute[1] routeParameter
	contains Expression[1] value
}
class StaticUnit extends ContentUnit {
	refers Service service
	String[1] content
}

abstract class DynamicUnit extends ContentUnit {
	contains UnitField[] displayFields opposite displayedOn
	refers Service[] servicesUsed
	contains Predicate hideWhen
	String messageWhenHidden
	contains UnitSupportAction[] supportActions
	String header
	String footer
	String headerClass
	String controlClass
	String footerClass
	String errorClass
}

class UnitSupportAction extends NamedDisplayElement {
	boolean disable
	String confirmMessage
}

enum CollectionDisplayOptions {
	LineDirection
	PageDirection = 1
}

interface UnitField extends DisplayElement {
	container DynamicUnit[1] displayedOn opposite displayFields
	String requiresRole = ""
	contains Predicate hideWhen
	String title = ""
	boolean escapeHTML = "true"
	CollectionDisplayOptions collectionDisplayOption
	int maximumDisplaySize = "-1"
	Boolean truncate
	String dateFormat
	Boolean disableInput = "false"
}

abstract class UnitFeature extends UnitField, InlineActionContainer {
	contains Expression forcedValue
	boolean collectionUiAllowAdd = "true"
	boolean collectionUiAllowRemove = "true"
	String defaultDisplayValue
	contains Predicate displayDefaultWhen
	String emptyDisplayValue
	boolean autofocus
	String footer
	String headerClass
	String inputClass
	String displayClass
	String footerClass
}

class UnitAttribute extends UnitFeature {
	refers Attribute[1] attribute
	derived String[1] name get {
		if (attribute !== null)
			attribute.name
	}
	contains Expression defaultValue
	boolean obfuscateFormFields
	String placeholder
	String validationPattern
}

class UnitAssociation extends UnitFeature, UnitContainer, AssociationReference {
	refers Selection selection
	refers Selection ajaxOptionsList
}

abstract class AssociationReference {
	derived String name get {
		if (association !== null)
			association.name
	}
	refers Association[1] association
	refers Label valueDisplay
	contains ChildPath childFeature
}

abstract class ChildPath {
}

class ChildPathAttribute extends ChildPath {
	derived String name get {
		if (attribute !== null)
			attribute.name
	}
	refers Attribute[1] attribute
}

class ChildPathAssociation extends ChildPath, AssociationReference {
}

abstract class FeaturePath extends Variable {
}

class FeaturePathAttribute extends FeaturePath {
	derived String name get {
		if (attribute !== null)
			attribute.name
	}
	refers Attribute[1] attribute
}

class FeaturePathAssociation extends FeaturePath, AssociationReference {
}

class FeaturePathLabel extends FeaturePath {
	derived String name get {
		if (label !== null)
			label.name
	}
	refers ModelLabel[1] label
}

class UnitLabel extends UnitField {
	refers ModelLabel[1] label
	derived String[1] name get {
		if (label !== null)
			label.name
	}
}

abstract class InterfaceField extends NamedElement, UnitField {
	boolean required
	contains Expression defaultValue
	refers UnitField mustMatch
	String interfaceType
	String placeholder
	String validationPattern
	String inputClass
}

class DataTypeField extends InterfaceField {
	refers DataType[1] dataType
	boolean caseInsensitive
	boolean obfuscateFormFields
	boolean encrypt
}

class DateField extends InterfaceField {
	DateDetails[1] details
	String format
}

class CaptchaField extends InterfaceField {
}

interface SelectableUnit {
	refers SelectAction[] selectors opposite target
}

class SingletonUnit extends DynamicUnit {
	refers Entity[1] contentType
}

enum PaginationControlPlacements {
	Below = 0
	Above = 1
	AboveAndBelow = 2
}

class CollectionUnit extends DynamicUnit, SelectableUnit {
	refers Entity[1..*] contentType
	refers Selection selection
	boolean omitContainerLoad
	refers Entity containerType
	refers Service containerService
	refers Selection findContainerSelection
	refers Selection findElementSelection
	refers Filter filter
	refers Filter[] supportedFilters
	contains Badge[] badges
	String emptyMessage
	int defaultPaginationSize
	int maximumPaginationSize
	PaginationControlPlacements paginationControlPlacement = "Below"
	int nextNpages
	int previousNpages
	String nextPageLabel = ">"
	String nextPageIconName = ""
	String previousPageLabel = "<"
	String previousPageIconName = ""
	boolean useDisabledPageLinks
	boolean useFirstLastPageLinks
	String firstPageLabel = "<<"
	String firstPageIconName = ""
	String lastPageLabel = ">>"
	String lastPageIconName = ""
	String paginationClass
	String paginationElementClass
}

abstract class EditUnit extends SingletonUnit {
	boolean onSaveContinueEditing = "false"
	contains Predicate disableWhen
	refers Label title
	refers Page confirmDestination
	String[1] confirmLabel
	refers Page cancelDestination
	String cancelLabel
	boolean customiseValues
}

class CreateUnit extends EditUnit {
}

class CreateUpdateUnit extends EditUnit, SelectableUnit {
	String createUriElement = ""
	String clearLabel
}

class MapUnit extends EditUnit, SelectableUnit {
	boolean readOnly
	int defaultZoomLevel
	refers SingletonLocation[1] location
	refers Attribute placeName
}

class UpdateUnit extends EditUnit, SelectableUnit {
}

class DetailsUnit extends SingletonUnit, SelectableUnit {
	refers Label title
	refers Selection selection
	boolean omitFieldLabels
}

abstract class IndexUnit extends CollectionUnit, InlineActionContainer {
	refers Label title
	boolean omitColumnLabels
	refers SearchUnit targettingSearches opposite resultsDestination
	String rowClasses
}

class IndexGridUnit extends IndexUnit {
}

class IndexPageDirectionUnit extends IndexUnit {	
}

class IndexLineDirectionUnit extends IndexUnit {
}

abstract class CardsUnit extends CollectionUnit, InlineActionContainer {
	refers Label unitTitle
	boolean omitFieldLabels
	boolean overlaySingleSelectAction
	String columnClass
	String cardClass
}

class CardsIndexUnit extends CardsUnit {
}

abstract class ImageUnit extends CollectionUnit {
	contains FeaturePath[1] imagePathFeature
	contains FeaturePath imageTitleFeature
	boolean truncateImageTitle
	refers ImageManipulation imageFilter
	refers ImageManipulation missingImageFilter
	String missingImagePath
}


class ImageIndexUnit extends CardsUnit, ImageUnit {
	boolean enableImageEnlargement
	boolean overlayTitle
	boolean revealUntruncatedContent
}

class SliderUnit extends ImageUnit {
	refers Label unitTitle
	int showTime
	int transitionTime
}

class GalleryUnit extends ImageUnit {
	refers Label unitTitle
	refers ImageManipulation fullSizeFilter
	int showTime
	int transitionTime
}

abstract class ControlUnit extends DynamicUnit {
	String[1] submitLabel
	refers Page cancelDestination
	String cancelLabel
}

class SearchUnit extends ControlUnit {
	refers IndexUnit[1] resultsDestination opposite targettingSearches
}


interface AuthenticationUnit {
}

class RegistrationUnit extends EditUnit, AuthenticationUnit {
	refers LocalAuthenticationSystem authenticationSystem opposite registrationUnit
}

class LoginUnit extends ControlUnit, AuthenticationUnit {
	refers LocalAuthenticationSystem authenticationSystem opposite loginUnit
	refers UnitField[1] loginIdField
	refers UnitField[1] passwordField
	refers UnitField rememberMeField
	String[1] logoutUriElement
}

class ForgottenPasswordUnit extends ControlUnit, AuthenticationUnit {
	refers LocalAuthenticationSystem authenticationSystem opposite forgottenPasswordUnit
	refers UnitField[1] loginIdField
}


interface InlineActionContainer {
	contains InlineAction[] actions opposite usedBy
}

abstract class InlineAction extends NamedDisplayElement {
	container InlineActionContainer[1] usedBy opposite actions
	boolean disable
	contains Predicate displayWhen
	String header
	String footer
	String headerClass
	String footerClass
}

class SelectAction extends InlineAction {
	refers SelectableUnit[1] target opposite selectors
	contains FeaturePath valuePath
}

class DeleteAction extends InlineAction {
	refers Page destination
	String[1] confirmMessage
	String requiresRole
	contains Predicate enableWhen
	String[1] uriElement
}

class FeatureSupportAction extends InlineAction {
	refers BusinessOperation[1] operation
	String confirmMessage
	String requiresRole
	contains Predicate enableWhen
	String[1] uriElement
	String fileExtension
}

class Badge {
	String iconName
	contains Expression value
	contains Predicate displayWhen
	contains Predicate newWhen
}