@Ecore(
	nsURI="http://andycarpenter.work/metamodel/WebApplicationFramework",
	nsPrefix="waf"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.waf.edit/src",
	editPluginID="work.andycarpenter.metamodel.waf.edit",
	childCreationExtenders="true",
	editorDirectory="/work.andycarpenter.metamodel.waf.editor/src")
package work.andycarpenter.metamodel.waf

import work.andycarpenter.metamodel.security.CasAuthentication
import work.andycarpenter.metamodel.security.LocalAuthenticationSystem
import work.andycarpenter.metamodel.security.SecurityModel
import work.andycarpenter.metamodel.security.SecurityUnit
import work.andycarpenter.metamodel.base.Classifier
import work.andycarpenter.metamodel.base.DataType
import work.andycarpenter.metamodel.base.EnumerationType
import work.andycarpenter.metamodel.base.NamedDisplayElement
import work.andycarpenter.metamodel.base.NamedElement
import work.andycarpenter.metamodel.expression.Expression
import work.andycarpenter.metamodel.expression.Predicate
import work.andycarpenter.metamodel.expression.Variable
import work.andycarpenter.metamodel.orm.Association
import work.andycarpenter.metamodel.orm.AssociationReference
import work.andycarpenter.metamodel.orm.Attribute
import work.andycarpenter.metamodel.orm.DateDetails
import work.andycarpenter.metamodel.orm.Entity
import work.andycarpenter.metamodel.orm.Feature
import work.andycarpenter.metamodel.orm.FeatureChildPath
import work.andycarpenter.metamodel.orm.Filter
import work.andycarpenter.metamodel.orm.Label
import work.andycarpenter.metamodel.orm.LocationFeature
import work.andycarpenter.metamodel.orm.ModelLabel
import work.andycarpenter.metamodel.orm.OrmModel
import work.andycarpenter.metamodel.orm.Repository
import work.andycarpenter.metamodel.orm.Selection
import work.andycarpenter.metamodel.api.API
import work.andycarpenter.metamodel.service.BusinessOperation
import work.andycarpenter.metamodel.service.Service
import work.andycarpenter.metamodel.service.ServiceModel
import java.util.LinkedList
import org.eclipse.xtext.xbase.lib.CollectionLiterals


enum FrameworkTechnologies {
	JSF
	CakePHP = 1
	CodeIgniter = 2
	Kohana = 3
	Laravel = 4
	Symfony = 5
}

class WafModel {
	contains SiteProperties siteProperties
	refers OrmModel[1] persistence
	refers SecurityModel security
	refers ServiceModel[1] business
	refers API api
	contains ImageManipulation[] imageManipulations
	contains Navigation navigation opposite partOf
	contains Page[] pages opposite partOf
	String defaultSaveLabel
	String defaultCancelLabel
	derived readonly unsettable transient volatile boolean hasAPI get {
		api !== null
	}
	refers readonly unsettable transient volatile derived EditUnit[] editUnits get {
		return pages.flatMap[it.editUnits].toEList()
	}
	derived readonly unsettable transient volatile boolean hasEditUnits get {
		!editUnits.isEmpty()
	}
	refers readonly unsettable transient volatile derived SingletonUnit[] formUnits get {
		return pages.flatMap[it.formUnits].toEList()
	}
	derived readonly unsettable transient volatile boolean hasFormUnits get {
		!formUnits.isEmpty()
	}
	refers readonly unsettable transient volatile derived ImageUnit[] imageUnits get {
		return pages.flatMap[it.imageUnits].toEList()
	}
	derived readonly unsettable transient volatile boolean hasImageUnits get {
		!imageUnits.isEmpty()
	}
	refers readonly unsettable transient volatile derived ImageCardsUnit[] imageCardsUnits get {
		return pages.flatMap[it.imageCardsUnits].toEList()
	}
	derived readonly unsettable transient volatile boolean hasImageCardsUnits get {
		!imageCardsUnits.isEmpty()
	}
	derived readonly unsettable transient volatile boolean hasAutocompleteFields get {
		!pages.filter[it.hasAutocompleteFields].isEmpty()
	}
	refers derived readonly unsettable transient volatile UnitField[] formFields get {
		pages.flatMap[it.formFields].toEList()
	}
	derived readonly unsettable transient volatile boolean hasFormFields get {
		!formFields.isEmpty()
	}
	derived readonly unsettable transient volatile boolean hasFormAssociations get {
		!formFields.filter[it instanceof UnitAssociation].isEmpty()
	}
	derived readonly unsettable transient volatile boolean hasResourceFields get {
		!pages.filter[it.hasResourceFields].isEmpty()
	}
	derived readonly unsettable transient volatile boolean isAuthenticated get {
		if (security === null)
			false
		else
			security.isAuthenticated
	}
	derived readonly unsettable transient volatile boolean isCasAuthenticated get {
		if (isAuthenticated)
			security.isCasAuthenticated
		else
			false
	}
	refers derived readonly unsettable transient volatile CasAuthentication casAuthentication get {
		if (isCasAuthenticated)
			security.casAuthentication
	}
	derived readonly unsettable transient volatile boolean isLocallyAuthenticated get {
		if (isAuthenticated)
			security.isLocallyAuthenticated
		else
			false
	}
	refers derived readonly unsettable transient volatile LocalAuthenticationSystem localAuthentication get {
		if (isLocallyAuthenticated)
			security.localAuthentication
	}
	Boolean useFormFloatingLabels = 'false'
	String defaultPageStyleClass = ''
    contains DefaultUnitStyles defaultStyles
    contains CardsUnitStyles defaultCardsStyles
    contains DetailsUnitStyles defaultDetailsStyles
    contains FormUnitStyles defaultFormStyles
    contains GalleryUnitStyles defaultGalleryStyles
    contains SliderUnitStyles defaultSliderStyles
    contains StaticUnitStyles defaultStaticStyles
    contains TabularUnitStyles defaultTabularStyles

   	refers readonly transient volatile unsettable derived WafModel genModel get {
		this
	}
	refers readonly transient volatile unsettable derived WafModel uiModel get {
		this
	}
}

class SiteProperties {
	String[1] siteName
	String[1] siteTitle
	String[1] locale
	String webmasterEmail
	String copyrightText
	String metaDescription
	String logoImage
	refers ImageManipulation logoFilters
	FrameworkTechnologies frameworkTechnology
	boolean useDbSessionStorage
	String textEditorURL
	String siteTemplate
	String securityFromEmail = ''
	String securityFromName = ''
	boolean staticUnitsEditable
}

class Navigation {
	refers WafModel[1] partOf opposite navigation
	contains Menu[] menus opposite definedBy
	String navbarClass = "navbar"
	derived readonly unsettable transient volatile boolean hasNavbarClass get {
		navbarClass.trim() != ''
	}
	AuthenticationMenuPlacement authenticationMenuPlacement
	String authenticationBarClass = "nav"
	derived readonly unsettable transient volatile boolean hasAuthenticationBarClass get {
		authenticationBarClass.trim() != ''
	}
}

enum AuthenticationMenuPlacement {
	Above = 0
	Below = 1
	Integrated = 2
}

class Menu extends NamedDisplayElement {
	refers Navigation[1] definedBy opposite menus
	contains MenuEntry[] entries opposite partOf
	boolean omitCaption
	String styleClass
	String captionClass
	String layoutClass
}

abstract class MenuEntry {
	container Menu[1] partOf opposite entries
}

class SubmenuEntry extends Menu, MenuEntry {
	String authorisationRoles = ''
	derived readonly transient volatile boolean isAuthorised get {
		authorisationRoles.trim() != ''
	}
}

class ActionMenuEntry extends MenuEntry, NamedDisplayElement {
	refers ContentUnit[1] action
}

class EditStaticTextMenuEntry extends MenuEntry, NamedDisplayElement {
}


abstract class ContentUnitStyles {
	String sectionClass = ''
	String captionClass = ''
	String contentClass = ''
}

abstract class DynamicUnitStyles extends ContentUnitStyles {
	String fieldListClass = ''
	String definitionFieldListClass = ''
	String fieldLabelClass = ''
	String fieldValueClass = ''
	String controlClass = ''
	String anchorClass = ''
}

class CollectionUnitStyles extends DynamicUnitStyles {
	String instanceControlClass = ''
	String instanceAnchorClass = ''
}

class DefaultUnitStyles extends CollectionUnitStyles {
}

class CardsUnitStyles extends CollectionUnitStyles {
	String rowClass = ''
	String columnClass = ''
	String cardClass = ''
	String cardHeaderClass = ''
	String cardBodyClass = ''
	String cardFooterClass = ''
	String badgeClass = ''
}

class DetailsUnitStyles extends DynamicUnitStyles {
}

class FormUnitStyles extends DynamicUnitStyles {
	String inputGroupClass = ''
}

class GalleryUnitStyles extends CollectionUnitStyles {
}

class SliderUnitStyles extends CollectionUnitStyles {
}

class StaticUnitStyles extends ContentUnitStyles {
}

class TabularUnitStyles extends CollectionUnitStyles {
}


abstract class DisplayElement {
	String[1] displayLabel = ''
}


class ImageManipulation extends NamedElement {
	int jpegQuality = "-1"
	contains ImageFilter[] filters
}

abstract class ImageFilter {
}

enum BackgroundPositions {
	TopLeft = 0,
	Top = 1,
	TopRight = 2,
	Left = 3,
	Center = 4,
	Right = 5,
	BottomLeft = 6,
	Bottom = 7,
	BottomRight = 8
}

class BackgroundFilter extends ImageFilter {
	String color
	int width
	int height
	BackgroundPositions position
}


enum ThumbnailModes {
	Crop = 0,
	Resize = 1
}

class ThumbnailFilter extends ImageFilter {
	int width
	int height
	ThumbnailModes mode
}


class Page extends NamedDisplayElement {
	container WafModel partOf opposite pages
	refers Page parentPage opposite childPages
	refers Page[] childPages opposite parentPage
	derived readonly transient volatile String commonRole get {
		if (units.isEmpty())
			''
		else if (hasCommonUnitAuthentication)
			units.head.authorisationRoles
		else
			''
	}
	derived readonly transient volatile boolean isAuthorised get {
		commonRole.trim() != ''
	}
	derived readonly transient volatile boolean hasCommonUnitAuthentication get {
		if (units.size() < 2)
			true
		else
			units.drop(1).forall[authorisationRoles.trim() == units.head.authorisationRoles.trim()]
	}
	contains ContentUnit[] units opposite displayedOn
	derived readonly transient volatile boolean hasChangableCollections get {
		!editUnits.filter[it.hasChangableCollections].isEmpty()
	}
	derived readonly transient volatile boolean hasCaptchaUnits get {
		!editUnits.filter[it.hasCaptcha].isEmpty()
	}
	refers readonly transient volatile unsettable derived CollectionUnit[] collectionUnits get {
		return units.filter[it instanceof CollectionUnit].map[it as CollectionUnit].toEList
	}
	derived readonly transient volatile boolean hasCollectionUnits get {
		!collectionUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived DynamicUnit[] dynamicUnits get {
		units.filter[it instanceof DynamicUnit].map[it as DynamicUnit].toEList
	}
	derived readonly transient volatile boolean hasDynamicUnits get {
		!dynamicUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived EditUnit[] editUnits get {
		units.filter[it instanceof EditUnit].map[it as EditUnit].toEList
	}
	derived readonly transient volatile boolean hasEditUnits get {
		!editUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived EditUnit[] anyEditUnits get {
		(editUnits + childPages.flatMap[editUnits]).toEList()
	}
	derived readonly transient volatile boolean hasAnyEditUnits get {
		!anyEditUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived ForgottenPasswordUnit[] forgottenPasswordUnits get {
		return units.filter[it instanceof ForgottenPasswordUnit].map[it as ForgottenPasswordUnit].toEList
	}
	derived readonly transient volatile boolean hasForgottenPasswordUnits get {
		!forgottenPasswordUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived SingletonUnit[] formUnits get {
		return dynamicUnits.filter[isFormUnit].map[it as SingletonUnit].toEList
	}
	derived readonly transient volatile boolean hasFormUnits get {
		!formUnits.isEmpty()
	}
	derived readonly transient volatile boolean hasFilters get {
		!collectionUnits.filter[it.hasFilters].isEmpty()
	}
	refers readonly transient volatile unsettable derived GalleryUnit[] galleryUnits get {
		return units.filter[it instanceof GalleryUnit].map[it as GalleryUnit].toEList
	}
	derived readonly transient volatile boolean hasGalleryUnits get {
		!galleryUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived TabularUnit[] tabularUnits get {
		return units.filter[it instanceof TabularUnit].map[it as TabularUnit].toEList
	}
	derived readonly transient volatile boolean hasTabularUnits get {
		!tabularUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived ImageUnit[] imageUnits get {
		return units.filter[it instanceof ImageUnit].map[it as ImageUnit].toEList
	}
	derived readonly transient volatile boolean hasImageUnits get {
		!imageUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived ImageCardsUnit[] imageCardsUnits get {
		return units.filter[it instanceof ImageCardsUnit].map[it as ImageCardsUnit].toEList
	}
	derived readonly transient volatile boolean hasImageCardsUnits get {
		!imageCardsUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived LoginUnit[] loginUnits get {
		return units.filter[it instanceof LoginUnit].map[it as LoginUnit].toEList
	}
	derived readonly transient volatile boolean hasLoginUnits get {
		!loginUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived MapUnit[] mapUnits get {
		return units.filter[it instanceof MapUnit].map[it as MapUnit].toEList
	}
	derived readonly transient volatile boolean hasMapUnits get {
		!mapUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived ContentUnit[] nonSecurityUnits get {
		units.filter[!(it instanceof SecurityUnit)].toEList
	}
	derived readonly transient volatile boolean hasNonSecurityUnits get {
		!nonSecurityUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived RegistrationUnit[] registrationUnits get {
		return units.filter[it instanceof RegistrationUnit].map[it as RegistrationUnit].toEList
	}
	derived readonly transient volatile boolean hasRegistrationUnits get {
		!registrationUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived ResetPasswordUnit[] resetPasswordUnits get {
		return units.filter[it instanceof ResetPasswordUnit].map[it as ResetPasswordUnit].toEList
	}
	derived readonly transient volatile boolean hasResetPasswordUnits get {
		!resetPasswordUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived SecurityUnit[] securityUnits get {
		units.filter[it instanceof SecurityUnit].map[it as SecurityUnit].toEList
	}
	derived readonly transient volatile boolean hasSecurityUnits get {
		!securityUnits.isEmpty()
	}
	refers readonly transient volatile unsettable derived SliderUnit[] sliderUnits get {
		return units.filter[it instanceof SliderUnit].map[it as SliderUnit].toEList
	}
	derived readonly transient volatile boolean hasSliderUnits get {
		!sliderUnits.isEmpty()
	}
	refers readonly derived unsettable transient volatile Repository[] repositoriesUsed get {
		dynamicUnits.flatMap[repositoriesUsed].toSet().toEList()
	}
	derived readonly transient volatile boolean hasRepositoriesUsed get {
		!repositoriesUsed.isEmpty()
	}
	refers readonly transient volatile unsettable derived Service[] servicesUsed get {
		return dynamicUnits.flatMap[servicesUsed].toSet().toEList()
	}
	derived readonly unsettable transient volatile boolean hasServicesUsed get {
		!servicesUsed.isEmpty()
	}
	derived readonly unsettable transient volatile boolean hasPagination get {
		!collectionUnits.filter[it.hasPagination].isEmpty()
	}
	refers derived readonly unsettable transient volatile UnitAssociation[] associationFields get {
		dynamicUnits.flatMap[it.associationFields].toEList()
	}
	refers derived readonly unsettable transient volatile UnitField[] autocompleteFields get {
		dynamicUnits.flatMap[it.autocompleteFields].toEList()
	}
	derived readonly unsettable transient volatile boolean hasAutocompleteFields get {
		!autocompleteFields.isEmpty()
	}
	refers derived unsettable readonly transient volatile UnitField[] formFields get {
		dynamicUnits.flatMap[it.formFields].toEList()
	}
	derived readonly unsettable transient volatile boolean hasInterfaceFields get {
		!dynamicUnits.filter[it.hasInterfaceFields].isEmpty()
	}
	derived readonly unsettable transient volatile boolean hasRequiredInterfaceFields get {
		!dynamicUnits.filter[it.hasRequiredInterfaceFields].isEmpty()
	}
	derived readonly unsettable transient volatile boolean hasResourceFields get {
		!dynamicUnits.filter[it.hasResourceFields].isEmpty()
	}
	refers derived readonly unsettable transient volatile Action[] actionsWithoutTarget get {
		dynamicUnits.flatMap[it.actionsWithoutTarget].toEList()
	}
	refers derived readonly unsettable transient volatile OperationAction[] fileActions get {
		dynamicUnits.flatMap[it.fileActions].toEList()
	}
	derived readonly transient unsettable volatile boolean hasFileActions get {
		!fileActions.isEmpty()
	}
	String uriElement = ''
	String localPageStyleClass = ''
	derived readonly transient volatile String pageStyleClass get {
		if (localPageStyleClass.trim() != '')
			localPageStyleClass.trim()
		else if (uiModel.defaultPageStyleClass.trim() != '')
			uiModel.defaultPageStyleClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasPageStyleClass get {
		pageStyleClass != ''
	}
	refers readonly transient volatile unsettable derived WafModel genModel get {
		partOf.genModel
	}
	refers readonly transient volatile unsettable derived WafModel uiModel get {
		partOf.uiModel
	}
	refers readonly transient volatile unsettable derived Page rootPage get {
		if (parentPage === null) {
			this
		} else {
			parentPage.rootPage
		}
	}
}

abstract class ContentUnit extends NamedDisplayElement {
	container Page[1] displayedOn opposite units
	String uriElement = ''
	String authorisationRoles = ''
	derived readonly transient volatile boolean isAuthorised get {
		authorisationRoles.trim() != ''
	}
	String purposeSummary
	String alternative
	boolean omitCaption
	String localSectionClass = ''
	derived readonly transient volatile String sectionClass get {
		if (localSectionClass.trim() != '')
			localSectionClass.trim()
		else if (uiModel.defaultStyles.sectionClass.trim() != '')
			uiModel.defaultStyles.sectionClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasSectionClass get {
		sectionClass != ''
	}
	String localCaptionClass = ''
	derived readonly transient volatile String captionClass get {
		if (localCaptionClass.trim() != '')
			localCaptionClass.trim()
		else if (uiModel.defaultStyles.captionClass.trim() != '')
			uiModel.defaultStyles.captionClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasCaptionClass get {
		captionClass != ''
	}
	String localContentClass = ''
	refers readonly transient volatile unsettable derived WafModel genModel get {
		displayedOn.genModel
	}
	refers readonly transient volatile unsettable derived WafModel uiModel get {
		displayedOn.uiModel
	}
}

class StaticUnit extends ContentUnit {
	refers Repository repository
	String[1] content
	derived readonly transient volatile String contentClass get {
		if (localContentClass.trim() != '')
			localContentClass.trim()
		else if (uiModel.defaultStaticStyles.contentClass.trim() != '')
			uiModel.defaultStaticStyles.contentClass.trim()
		else if (uiModel.defaultStyles.contentClass.trim() != '')
			uiModel.defaultStyles.contentClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasContentClass get {
		contentClass != ''
	}
}

abstract class DynamicUnit extends ContentUnit, ActionContainer {
	refers Entity[1] contentType
	refers derived readonly unsettable transient volatile Repository contentRepository get {
		contentType?.repository
	}
	refers derived readonly unsettable transient volatile Association containingAssociation get {
		contentType?.containingAssociation
	}
	refers derived readonly unsettable transient volatile Entity containingType get {
		if (this instanceof CollectionUnit) {
			if ((this as CollectionUnit).findContainerSelection !== null)
				(this as CollectionUnit).findContainerSelection.definedBy.serves
			else if ((this as CollectionUnit).selection !== null) {
				if (!(this as CollectionUnit).selection.selectPath.isEmpty())
					(this as CollectionUnit).selection.selectPath.last().targetType
			}
		} else if (this instanceof DetailsUnit) {
			if ((this as DetailsUnit).selection !== null)
				if (!(this as DetailsUnit).selection.selectPath.isEmpty())
					(this as DetailsUnit).selection.selectPath.last().targetType
				else
					contentType.containingType
			else
				contentType.containingType
		} else
			contentType.containingType
	}
	derived readonly unsettable transient volatile boolean isContained get {
		containingType !== null
	}
	refers derived readonly unsettable transient volatile Repository containerRepository get {
		containingType?.repository
	}
	derived readonly unsettable transient volatile boolean hasExplicitlyEditedContainer get {
		if (this instanceof EditUnit && (containingAssociation !== null))
			featureFields.exists[persistentFeature == containingAssociation]
		else
			false
	}
	refers derived readonly unsettable transient volatile Repository[] repositoriesUsed get {
		var repositories = new LinkedList<Repository>()
		if (!(this instanceof SecurityUnit))
			repositories.add(contentRepository)
		if (this instanceof CollectionUnit && isContained) {
			repositories.add(containerRepository)
		}
		return repositories.toEList()
	}
	refers Service[] servicesUsed
	contains RouteActual[] routeActuals
	contains UnitField[] displayFields opposite displayedOn
	boolean hasWhenFieldsEmptyAddImplicitFields = "true"
	contains Predicate hideWhen
	derived readonly unsettable transient volatile Boolean isConditionallyDisplayed get {
		hideWhen !== null
	}
	String messageWhenHidden = ''
	derived readonly unsettable transient volatile Boolean hasHiddenMessage get {
		hideWhen !== null && messageWhenHidden.trim() != ''
	}
	String header
	String footer
	refers readonly transient volatile unsettable derived UnitAssociation[] associationFields get {
		return displayFields.filter[it instanceof UnitAssociation].map[it as UnitAssociation].toEList
	}
	derived readonly transient volatile boolean hasAssociationFields get {
		!associationFields.isEmpty()
	}
	refers derived readonly transient volatile UnitField[] autocompleteFields get {
		if (this instanceof EditUnit) 
			displayFields.filter[it.hasAutocomplete].toEList()
		else
			CollectionLiterals::emptyList().toEList()
	}
	derived readonly transient volatile boolean hasAutocompleteFields get {
		!autocompleteFields.isEmpty()
	}
	int autocompleteThreshold = "0"
	derived readonly transient volatile boolean hasBooleanFields get {
		!displayFields.filter[isBooleanField].isEmpty()
	}
	derived readonly transient unsettable volatile boolean hasCaptcha get {
		if (this instanceof EditUnit)
			(this as EditUnit).useCaptcha
		else
			false
	}
	derived readonly transient volatile boolean hasChangableCollections get {
		(this instanceof EditUnit)
			&& !displayFields.filter[isSingleton]
				.filter[it instanceof UnitFeature].map[it as UnitFeature]
				.filter[collectionUiAllowAdd || collectionUiAllowRemove].isEmpty()
	}
	refers readonly transient volatile unsettable derived UnitField[] collectionFields get {
		return displayFields.filter[!isSingleton].toEList
	}
	refers readonly transient volatile unsettable derived UnitFeature[] collectionFeatures get {
		return collectionFields.filter[it instanceof UnitFeature].map[it as UnitFeature].toEList
	}
	refers readonly transient volatile unsettable derived UnitField[] dataTypeFields get {
		return displayFields.filter[isDataTypeField].toEList
	}
	refers readonly transient volatile unsettable derived UnitField[] dateFields get {
		return displayFields.filter[isDateField].toEList
	}
	refers readonly transient volatile unsettable derived UnitField[] defaultValueFields get {
		return displayFields.filter[hasDefaultValue].toEList
	}
	derived readonly transient volatile boolean hasDefaultValueFields get {
		!defaultValueFields.isEmpty()
	}
	derived readonly transient volatile boolean hasDisabledFields get {
		!displayFields.filter[isDisabled].isEmpty()
	}
	derived readonly transient volatile boolean hasEmailFields get {
		!displayFields.filter[isEmailField].isEmpty()
	}
	refers readonly transient volatile unsettable derived UnitField[] encryptedFields get {
		displayFields.filter[isEncryptedField].toEList()
	}
	derived readonly transient volatile boolean hasEncryptedFields get {
		!encryptedFields.isEmpty()
	}
	refers readonly transient volatile unsettable derived UnitField[] enumerationFields get {
		displayFields.filter[isEnumerationField].toEList()
	}
	derived readonly transient volatile boolean hasEnumerationFields get {
		!enumerationFields.isEmpty()
	}
	refers readonly transient volatile unsettable derived UnitFeature[] featureFields get {
		displayFields.filter[it instanceof UnitFeature].map[it as UnitFeature].toEList()
	}
	derived readonly transient volatile boolean hasFeatureFields get {
		!featureFields.isEmpty()
	}
	refers readonly transient volatile unsettable derived UnitField[] forcedValueFields get {
		displayFields.filter[hasForcedValue].toEList()
	}
	derived readonly transient volatile boolean hasForcedValueFields get {
		!forcedValueFields.isEmpty()
	}
	derived readonly transient volatile boolean isFormUnit get {
		this instanceof EditUnit || this instanceof ControlUnit
	}
	refers readonly transient volatile unsettable derived UnitField[] formFields get {
		if (isFormUnit)
			displayFields
		else
			CollectionLiterals::emptyList().toEList()
	}
	derived readonly transient volatile boolean hasIntegerFields get {
		!displayFields.filter[isIntegerField].isEmpty()
	}
	refers readonly transient volatile unsettable derived InterfaceField[] interfaceFields get {
		return displayFields.filter[it instanceof InterfaceField].map[it as InterfaceField].toEList
	}
	derived readonly transient unsettable volatile boolean hasInterfaceFields get {
		!interfaceFields.isEmpty()
	}
	derived readonly transient unsettable volatile boolean hasRequiredInterfaceFields get {
		!interfaceFields.filter[it.isRequired].isEmpty()
	}
	derived readonly transient unsettable volatile boolean hasObfuscatedFields get {
		!displayFields.filter[isObfuscatedField].isEmpty()
	}
	derived readonly transient unsettable volatile boolean hasRepeatedFields get {
		!displayFields.filter[isRepeated].isEmpty()
	}
	readonly transient volatile unsettable derived boolean hasResourceFields get {
		!displayFields.filter[isResourceField].isEmpty()
	}
	derived readonly transient unsettable volatile boolean hasStringFields get {
		!displayFields.filter[isStringField].isEmpty()
	}
	derived readonly transient unsettable volatile boolean hasTextareaFields get {
		!displayFields.filter[isTextareaField].isEmpty()
	}
	derived readonly transient unsettable volatile boolean hasUrlFields get {
		!displayFields.filter[isUrlField].isEmpty()
	}
	String headerClass
	String localFieldListClass = ''
	derived readonly transient unsettable volatile String fieldListClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsFieldListClass
		else if (this instanceof DetailsUnit) 
			(this as DetailsUnit).detailsFieldListClass
		else if (this instanceof EditUnit) 
			(this as EditUnit).formFieldListClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryFieldListClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularFieldListClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderFieldListClass
		else
			''
	}
	derived readonly transient unsettable volatile boolean hasFieldListClass get {
		fieldListClass != ''
	}
	String localDefinitionFieldListClass = ''
	derived readonly transient volatile String definitionFieldListClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsDefinitionFieldListClass
		else if (this instanceof DetailsUnit) 
			(this as DetailsUnit).detailsDefinitionFieldListClass
		else if (this instanceof EditUnit) 
			(this as EditUnit).formDefinitionFieldListClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryDefinitionFieldListClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularDefinitionFieldListClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderDefinitionFieldListClass
		else
			''
	}
	derived readonly transient volatile boolean hasDefinitionFieldListClass get {
		definitionFieldListClass != ''
	}
	String localInputGroupClass = ''
	derived readonly transient volatile String inputGroupClass get {
		if (this instanceof EditUnit) 
			(this as EditUnit).formInputGroupClass
		else
			''
	}
	derived readonly transient volatile boolean hasInputGroupClass get {
		inputGroupClass != ''
	}
	String localFieldLabelClass = ''
	derived readonly transient volatile String fieldLabelClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsFieldLabelClass
		else if (this instanceof DetailsUnit) 
			(this as DetailsUnit).detailsFieldLabelClass
		else if (this instanceof EditUnit) 
			(this as EditUnit).formFieldLabelClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryFieldLabelClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularFieldLabelClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderFieldLabelClass
		else
			''
	}
	derived readonly transient volatile boolean hasFieldLabelClass get {
		fieldLabelClass != ''
	}
	String localFieldValueClass = ''
	derived readonly transient volatile String fieldValueClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsFieldValueClass
		else if (this instanceof DetailsUnit) 
			(this as DetailsUnit).detailsFieldValueClass
		else if (this instanceof EditUnit) 
			(this as EditUnit).formFieldValueClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryFieldValueClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularFieldValueClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderFieldValueClass
		else
			''
	}
	derived readonly transient volatile boolean hasFieldValueClass get {
		fieldValueClass != ''
	}
	String localControlClass = ''
	derived readonly transient volatile String controlClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsControlClass
		else if (this instanceof DetailsUnit) 
			(this as DetailsUnit).detailsControlClass
		else if (this instanceof EditUnit) 
			(this as EditUnit).formControlClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryControlClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderControlClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularControlClass
		else
			''
	}
	derived readonly transient volatile boolean hasControlClass get {
		controlClass != ''
	}
	String localInstanceControlClass = ''
	derived readonly transient volatile String instanceControlClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsInstanceControlClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryInstanceControlClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderInstanceControlClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularInstanceControlClass
		else
			''
	}
	derived readonly transient volatile boolean hasInstanceControlClass get {
		instanceControlClass != ''
	}
	String localAnchorClass = ''
	derived readonly transient volatile String anchorClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsAnchorClass
		else if (this instanceof DetailsUnit) 
			(this as DetailsUnit).detailsAnchorClass
		else if (this instanceof EditUnit) 
			(this as EditUnit).formAnchorClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryAnchorClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularAnchorClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderAnchorClass
		else
			''
	}
	derived readonly transient volatile boolean hasAnchorClass get {
		anchorClass != ''
	}
	String localInstanceAnchorClass = ''
	derived readonly transient volatile String instanceAnchorClass get {
		if (this instanceof CardsUnit) 
			(this as CardsUnit).cardsInstanceAnchorClass
		else if (this instanceof GalleryUnit) 
			(this as GalleryUnit).galleryInstanceAnchorClass
		else if (this instanceof SliderUnit) 
			(this as SliderUnit).sliderInstanceAnchorClass
		else if (this instanceof TabularUnit) 
			(this as TabularUnit).tabularInstanceAnchorClass
		else
			''
	}
	derived readonly transient volatile boolean hasInstanceAnchorClass get {
		instanceAnchorClass != ''
	}
	String footerClass
}

class RouteActual {
	refers Attribute[1] routeParameter
	contains Expression[1] value
}

enum CollectionDisplayOptions {
	LineDirection
	PageDirection = 1
}

interface UnitField extends DisplayElement {
	container DynamicUnit[1] displayedOn opposite displayFields
	derived readonly transient volatile String fieldName get {
		if (this instanceof UnitAttribute)
			(this as UnitAttribute).name
		else if (this instanceof UnitAssociation)
			(this as UnitAssociation).name
		else if (this instanceof InterfaceField)
			(this as InterfaceField).name
		else if (this instanceof UnitLabel)
			(this as UnitLabel).name
	}
	String authorisationRoles = ''
	derived readonly transient volatile boolean isAuthorised get {
		authorisationRoles.trim() != ''
	}
	derived readonly unsettable transient volatile boolean hasCustomisedDisplayLabel get {
		if (this instanceof UnitFeature)
			displayLabel.trim() != ''
				&& displayLabel.trim() != (this as UnitFeature).persistentFeature.displayLabel.trim()
		else if (this instanceof InterfaceField)
			true
		else // UnitLabel
			false
	}
	derived readonly unsettable transient volatile boolean isRepeated get {
		if (this instanceof InterfaceField)
			(this as InterfaceField).repeatedField
		else
			false
	}
	String localTitle = ''
	derived readonly unsettable transient volatile String title get {
		if (this instanceof UnitLabel)
			''
		else
			if (localTitle.trim() != '')
				localTitle.trim()
			else if (this instanceof UnitFeature)
				(this as UnitFeature).persistentFeature.displayLabel.trim()
			else
				''
	}
	derived readonly unsettable transient volatile boolean hasTitle get {
		title != ''
	}
	derived readonly unsettable transient volatile boolean hasCustomisedTitle get {
		if (this instanceof UnitFeature)
			title != (this as UnitFeature).persistentFeature.displayLabel.trim()
		else
			title.trim() != ''
	}
	derived readonly unsettable transient volatile boolean hasSecondTitle get {
		if (this instanceof InterfaceField && this.isRepeated)
			(this as InterfaceField).secondTitle != ''
		else
			false
	}
	String localPlaceholder = ''
	derived readonly unsettable transient volatile String placeholder get {
		if (this instanceof UnitLabel)
			''
		else
			if (localPlaceholder.trim() != '')
				localPlaceholder.trim()
			else if (this instanceof UnitFeature)
				(this as UnitFeature).persistentFeature.displayLabel.trim()
			else
				''
	}
	derived readonly unsettable transient volatile boolean hasPlaceholder get {
		placeholder != ''
	}
	derived readonly unsettable transient volatile boolean hasCustomisedPlaceholder get {
		if (this instanceof UnitFeature)
			placeholder != (this as UnitFeature).persistentFeature.displayLabel.trim()
		else
			placeholder != ''
	}
	derived readonly unsettable transient volatile boolean hasSecondPlaceholder get {
		if (this instanceof InterfaceField && this.isRepeated)
			(this as InterfaceField).secondPlaceholder != ''
		else
			false
	}
	String localHelp = ''
	derived readonly unsettable transient volatile String help get {
		if (this instanceof UnitLabel)
			''
		else
			if (localHelp.trim() != '')
				localHelp.trim()
			else
					''
	}
	derived readonly unsettable transient volatile boolean hasHelp get {
		help != ''
	}
	derived readonly unsettable transient volatile boolean hasSecondHelp get {
		if (this instanceof InterfaceField && this.isRepeated)
			(this as InterfaceField).secondHelp != ''
		else
			false
	}
	contains Predicate hideWhen
	refers derived readonly transient volatile Feature persistentFeature get {
		if (this instanceof UnitAttribute) 
			(this as UnitAttribute).attribute
		else if (this instanceof UnitAssociation) {
			if ((this as UnitAssociation).childFeature instanceof ChildPathAttribute)
				((this as UnitAssociation).childFeature as ChildPathAttribute).persistentFeature
			else if ((this as UnitAssociation).childFeature instanceof ChildPathAssociation)
				((this as UnitAssociation).childFeature as ChildPathAssociation).persistentFeature
			else
				(this as UnitAssociation).association
		}
	}
	derived readonly transient volatile boolean isContains get {
		if (this instanceof UnitAssociation) 
			(this as UnitAssociation).association.isContains
		else
			false
	}
	derived readonly transient volatile boolean isDisabled get {
		disabledInput
	}
	derived readonly transient volatile boolean isRequired get {
		if (this instanceof UnitFeature) 
			persistentFeature.isRequired
		else if (this instanceof InterfaceField)
			(this as InterfaceField).localRequired
		else
			false
	}
	derived readonly transient volatile boolean isSingleton get {
		if (this instanceof UnitFeature) 
			persistentFeature.isSingleton
		else if (this instanceof InterfaceField)
			true
		else
			false
	}
	derived readonly transient volatile boolean isAssociationField get {
		this instanceof UnitAssociation
	}
	derived readonly transient volatile boolean isAttributeField get {
		this instanceof UnitAttribute
	}
	derived readonly transient volatile boolean isBooleanField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isBooleanFeature
		else if (this instanceof DataTypeField)
			(this as DataTypeField).dataType.isBooleanClassifier
		else
			false
	}
	derived readonly transient volatile boolean isDataTypeField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isDataTypeFeature
		else if (this instanceof DataTypeField)
			true
		else
			false
	}
	refers derived readonly transient volatile Classifier dataType get {
		if (this instanceof UnitFeature) 
			persistentFeature.dataType
		else if (this instanceof DataTypeField)
			(this as DataTypeField).fieldDataType
	}
	derived readonly transient volatile boolean isDateField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isDateFeature
		else
			false
	}
	derived readonly transient volatile DateDetails dateDetails get {
		if (this instanceof UnitFeature) 
			persistentFeature.dateDetails
	}
	derived readonly transient volatile boolean isEmailField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isEmailFeature
		else if (this instanceof DataTypeField)
			(this as DataTypeField).dataType.isEmailClassifier
		else
			false
	}
	derived readonly transient volatile boolean isEncryptedField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isEncrypted
		else
			false
	}
	derived readonly transient volatile boolean isEnumerationField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isEnumerationFeature
		else
			false
	}
	refers derived readonly transient volatile EnumerationType enumerationType get {
		if (this instanceof UnitFeature) 
			persistentFeature.enumerationType
	}
	derived readonly transient volatile boolean isFeatureField get {
		this instanceof UnitFeature
	}
	derived readonly transient volatile boolean isInterfaceField get {
		this instanceof InterfaceField
	}
	derived readonly transient volatile boolean isIntegerField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isIntegerFeature
		else if (this instanceof DataTypeField)
			(this as DataTypeField).dataType.isIntegerClassifier
		else
			false
	}
	derived readonly transient volatile boolean isLocationField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isLocationFeature
		else
			false
	}
	derived readonly transient volatile boolean isObfuscatedFeature get {
		if (this instanceof UnitFeature) 
			persistentFeature.isObfuscatedFeature
		else
			false
	}
	derived readonly transient volatile boolean isObfuscatedField get {
		if (this instanceof UnitAttribute) 
			(this as UnitAttribute).obfuscateFormFields || isObfuscatedFeature
		else if (this instanceof DataTypeField) 
			(this as DataTypeField).obfuscateFormFields
		else
			isObfuscatedFeature
	}
	derived readonly transient volatile boolean isResourceField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isResourceFeature
		else
			false
	}
	derived readonly transient volatile boolean isStringField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isStringFeature
		else if (this instanceof DataTypeField)
			(this as DataTypeField).dataType.isStringClassifier
		else
			false
	}
	derived readonly transient volatile boolean isTextareaField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isTextareaFeature
		else if (this instanceof DataTypeField)
			(this as DataTypeField).dataType.isTextareaClassifier
		else
			false
	}
	derived readonly transient volatile boolean isUrlField get {
		if (this instanceof UnitFeature) 
			persistentFeature.isUrlFeature
		else
			false
	}
	refers readonly transient volatile derived Expression defaultValue get {
		if (this instanceof UnitAttribute)
			(this as UnitAttribute).attributeDefaultValue
		else if (this instanceof InterfaceField)
			(this as InterfaceField).fieldDefaultValue
	}
	derived readonly transient volatile boolean hasDefaultValue get {
		defaultValue !== null
	}
	derived readonly transient volatile boolean hasForcedValue get {
		if (this instanceof UnitFeature) 
			(this as UnitFeature).forcedValue !== null
		else
			false
	}
	derived readonly transient volatile boolean hasAutocomplete get {
		if (this instanceof UnitAssociation) 
			(this as UnitAssociation).optionsFilter !== null
		else
			false
	}
	boolean escapeHTML = "true"
	CollectionDisplayOptions collectionDisplayOption
	boolean truncate
	String dateFormat
	boolean disabledInput
	String headerClass
	String localInputGroupClass = ''
	derived readonly transient volatile String inputGroupClass get {
		if (localInputGroupClass.trim() != '')
			localInputGroupClass.trim()
		else if (displayedOn.hasInputGroupClass)
			displayedOn.inputGroupClass
		else
			''
	}
	derived readonly transient volatile boolean hasInputGroupClass get {
		inputGroupClass != ''
	}
	String localFieldLabelClass = ''
	derived readonly transient volatile String fieldLabelClass get {
		if (localFieldLabelClass.trim() != '')
			localFieldLabelClass.trim()
		else if (displayedOn.hasFieldLabelClass)
			displayedOn.fieldLabelClass
		else
			''
	}
	derived readonly transient volatile boolean hasFieldLabelClass get {
		fieldLabelClass != ''
	}
	String localFieldValueClass = ''
	derived readonly transient volatile String fieldValueClass get {
		if (localFieldValueClass.trim() != '')
			localFieldValueClass.trim()
		else if (displayedOn.hasFieldValueClass)
			displayedOn.fieldValueClass
		else
			''
	}
	derived readonly transient volatile boolean hasFieldValueClass get {
		fieldValueClass != ''
	}
	String footerClass
	refers readonly transient volatile unsettable derived WafModel genModel get {
		displayedOn.genModel
	}
	refers readonly transient volatile unsettable derived WafModel uiModel get {
		displayedOn.uiModel
	}
}

abstract class UnitFeature extends UnitField, ActionContainer {
	contains Expression forcedValue
	boolean collectionUiAllowAdd = "true"
	boolean collectionUiAllowRemove = "true"
	String defaultDisplayValue
	contains Predicate displayDefaultWhen
	String emptyDisplayValue
	boolean autofocus
	String footer
}

class UnitAttribute extends UnitFeature {
	refers Attribute[1] attribute
	derived String[1] name get {
		attribute?.name
	}
	contains Expression attributeDefaultValue
	boolean obfuscateFormFields
	String validationPattern = ''
}

class UnitAssociation extends UnitFeature, AssociationReference {
	refers Selection options
	refers Filter optionsFilter
}

abstract class FeaturePath extends Variable {
	boolean useContainerAsContext
	derived readonly transient volatile boolean hasChild get {
		if (this instanceof FeaturePathAssociation)
			(this as FeaturePathAssociation).childFeature !== null
		else
			false
	}
	derived readonly transient volatile boolean isRequired get {
		if (this instanceof FeaturePathAttribute) 
			(this as FeaturePathAttribute).attribute.isRequired
		else if (this instanceof FeaturePathAssociation) 
			(this as FeaturePathAssociation).association.isRequired
		else
			false
	}
	derived readonly transient volatile boolean isSingleton get {
		if (this instanceof FeaturePathAttribute) 
			(this as FeaturePathAttribute).attribute.isSingleton
		else if (this instanceof FeaturePathAssociation) 
			(this as FeaturePathAssociation).association.isSingleton
		else
			false
	}
}

class FeaturePathAttribute extends FeaturePath {
	refers Attribute[1] attribute
	derived String name get {
		attribute?.name
	}
}

class FeaturePathAssociation extends FeaturePath, AssociationReference {
}

class FeaturePathLabel extends FeaturePath {
	refers ModelLabel[1] label
	derived String name get {
		label?.name
	}
}

class ChildPathAttribute extends FeatureChildPath {
	refers Attribute[1] attribute
	derived String name get {
		attribute?.name
	}
	refers derived readonly transient volatile Feature persistentFeature get {
		attribute
	}
}

class ChildPathAssociation extends FeatureChildPath, AssociationReference {
	derived readonly transient volatile boolean hasChild get {
		childFeature !== null
	}
	refers derived readonly transient volatile Feature persistentFeature get {
		if (!hasChild)
			association
		else if (childFeature instanceof ChildPathAttribute)
				(childFeature as ChildPathAttribute).persistentFeature
		else if (childFeature instanceof ChildPathAssociation)
				(childFeature as ChildPathAssociation).persistentFeature
	}
}

class UnitLabel extends UnitField {
	refers ModelLabel[1] label
	derived String[1] name get {
		label?.name
	}
}

abstract class InterfaceField extends NamedElement, UnitField {
	boolean localRequired
	contains Expression fieldDefaultValue
	String interfaceType
	String validationPattern = ''
	boolean repeatedField = 'false'
	String secondDisplayLabel = ''
	String secondTitle = ''
	String secondPlaceholder = ''
	String secondHelp = ''
}

class DataTypeField extends InterfaceField {
	refers DataType[1] fieldDataType
	boolean caseInsensitive
	boolean obfuscateFormFields
	boolean encrypt
}

class DateField extends InterfaceField {
	DateDetails[1] details
	String format
}

interface SelectableUnit {
	refers SelectAction[] selectors opposite target
}

class SingletonUnit extends DynamicUnit {
	refers Label title
}

enum PaginationControlPlacements {
	Below = 0
	Above = 1
	AboveAndBelow = 2
}

class CollectionUnit extends DynamicUnit, SelectableUnit {
	refers Label unitTitle
	contains FeaturePath elementTitle
	boolean truncateElementTitle = "false"
	refers Selection selection
	refers Entity containerType
	refers Selection findContainerSelection
	refers Selection findElementSelection
	refers Filter filter
	refers Filter[] supportedFilters
	derived readonly transient volatile boolean hasFilters get {
		!supportedFilters.isEmpty()
	}
	derived readonly transient volatile boolean hasGroupedResults get {
		if (selection !== null)
			!selection.grouping.isEmpty()
		else
			false
	}
	derived readonly transient volatile boolean hasPagination get {
		if (selection === null)
			false
		else
			defaultPaginationSize > 0 && selection.hasPaginationSupport
	}
	String emptyMessage
	boolean omitFieldLabels
	int defaultPaginationSize
	int maximumPaginationSize
	PaginationControlPlacements paginationControlPlacement = "Below"
	int nextNpages
	int previousNpages
	String nextPageLabel = ">"
	String nextPageIconName = ''
	String previousPageLabel = "<"
	String previousPageIconName = ''
	boolean useDisabledPageLinks
	boolean useFirstLastPageLinks
	String firstPageLabel = "<<"
	String firstPageIconName = ''
	String lastPageLabel = ">>"
	String lastPageIconName = ''
	String paginationClass
	String paginationElementClass
	String paginationAnchorClass
}

abstract class EditUnit extends SingletonUnit {
	boolean useCaptcha = 'false'
	boolean onSaveContinueEditing = 'false'
	contains Predicate disableWhen
	refers Page confirmDestination
	String[1] confirmLabel
	boolean hasCustomConfirmLabel
	contains Message confirmMessage
	derived readonly transient volatile boolean hasConfirmMessage get {
		confirmMessage !== null
	}
	contains Message successMessage
	derived readonly transient volatile boolean hasSuccessMessage get {
		successMessage !== null
	}
	refers Page cancelDestination
	String cancelLabel
	boolean hasCustomCancelLabel
	derived readonly transient volatile String contentClass get {
		if (localContentClass.trim() != '')
			localContentClass.trim()
		else if (uiModel.defaultFormStyles.contentClass.trim() != '')
			uiModel.defaultFormStyles.contentClass.trim()
		else if (uiModel.defaultStyles.contentClass.trim() != '')
			uiModel.defaultStyles.contentClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasContentClass get {
		contentClass != ''
	}
	derived readonly transient volatile String formFieldListClass get {
		if (localFieldListClass.trim() != '')
			localFieldListClass.trim()
		else if (uiModel.defaultFormStyles.fieldListClass.trim() != '')
			uiModel.defaultFormStyles.fieldListClass.trim()
		else if (uiModel.defaultStyles.fieldListClass.trim() != '')
			uiModel.defaultStyles.fieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String formDefinitionFieldListClass get {
		if (localDefinitionFieldListClass.trim() != '')
			localDefinitionFieldListClass.trim()
		else if (uiModel.defaultFormStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultFormStyles.definitionFieldListClass.trim()
		else if (uiModel.defaultStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultStyles.definitionFieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String formInputGroupClass get {
		if (localInputGroupClass.trim() != '')
			localInputGroupClass.trim()
		else if (uiModel.defaultFormStyles.inputGroupClass.trim() != '')
			uiModel.defaultFormStyles.inputGroupClass.trim()
		else
			''
	}
	derived readonly transient volatile String formFieldLabelClass get {
		if (localFieldLabelClass.trim() != '')
			localFieldLabelClass.trim()
		else if (uiModel.defaultFormStyles.fieldLabelClass.trim() != '')
			uiModel.defaultFormStyles.fieldLabelClass.trim()
		else if (uiModel.defaultStyles.fieldLabelClass.trim() != '')
			uiModel.defaultStyles.fieldLabelClass.trim()
		else
			''
	}
	derived readonly transient volatile String formFieldValueClass get {
		if (localFieldValueClass.trim() != '')
			localFieldValueClass.trim()
		else if (uiModel.defaultFormStyles.fieldValueClass.trim() != '')
			uiModel.defaultFormStyles.fieldValueClass.trim()
		else if (uiModel.defaultStyles.fieldValueClass.trim() != '')
			uiModel.defaultStyles.fieldValueClass.trim()
		else
			''
	}
	derived readonly transient volatile String formControlClass get {
		if (localControlClass.trim() != '')
			localControlClass.trim()
		else if (uiModel.defaultFormStyles.controlClass.trim() != '')
			uiModel.defaultFormStyles.controlClass.trim()
		else if (uiModel.defaultStyles.controlClass.trim() != '')
			uiModel.defaultStyles.controlClass.trim()
		else
			''
	}
	derived readonly transient volatile String formAnchorClass get {
		if (localAnchorClass.trim() != '')
			localAnchorClass.trim()
		else if (uiModel.defaultFormStyles.anchorClass.trim() != '')
			uiModel.defaultFormStyles.anchorClass.trim()
		else if (uiModel.defaultStyles.anchorClass.trim() != '')
			uiModel.defaultStyles.anchorClass.trim()
		else
			''
	}
}

class CreateUnit extends EditUnit {
}

class UpdateUnit extends EditUnit, SelectableUnit {
	boolean displayEmptyForm = "true"
}

class CreateUpdateUnit extends EditUnit, SelectableUnit {
	String updateUriElement = ''
	String clearLabel
}

class MapUnit extends EditUnit, SelectableUnit {
	boolean readOnly
	int defaultZoomLevel
	refers LocationFeature[1] location
	refers Attribute placeName
}

class DetailsUnit extends SingletonUnit, SelectableUnit {
	refers Selection selection
	boolean omitFieldLabels
	derived readonly transient volatile String contentClass get {
		if (localContentClass.trim() != '')
			localContentClass.trim()
		else if (uiModel.defaultDetailsStyles.contentClass.trim() != '')
			uiModel.defaultDetailsStyles.contentClass.trim()
		else if (uiModel.defaultStyles.contentClass.trim() != '')
			uiModel.defaultStyles.contentClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasContentClass get {
		contentClass != ''
	}
	derived readonly transient volatile String DetailsFieldListClass get {
		if (localFieldListClass.trim() != '')
			localFieldListClass.trim()
		else if (uiModel.defaultDetailsStyles.fieldListClass.trim() != '')
			uiModel.defaultDetailsStyles.fieldListClass.trim()
		else if (uiModel.defaultStyles.fieldListClass.trim() != '')
			uiModel.defaultStyles.fieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String DetailsDefinitionFieldListClass get {
		if (localDefinitionFieldListClass.trim() != '')
			localDefinitionFieldListClass.trim()
		else if (uiModel.defaultDetailsStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultDetailsStyles.definitionFieldListClass.trim()
		else if (uiModel.defaultStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultStyles.definitionFieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String detailsFieldLabelClass get {
		if (localFieldLabelClass.trim() != '')
			localFieldLabelClass.trim()
		else if (uiModel.defaultDetailsStyles.fieldLabelClass.trim() != '')
			uiModel.defaultDetailsStyles.fieldLabelClass.trim()
		else if (uiModel.defaultStyles.fieldLabelClass.trim() != '')
			uiModel.defaultStyles.fieldLabelClass.trim()
		else
			''
	}
	derived readonly transient volatile String detailsFieldValueClass get {
		if (localFieldValueClass.trim() != '')
			localFieldValueClass.trim()
		else if (uiModel.defaultDetailsStyles.fieldValueClass.trim() != '')
			uiModel.defaultDetailsStyles.fieldValueClass.trim()
		else if (uiModel.defaultStyles.fieldValueClass.trim() != '')
			uiModel.defaultStyles.fieldValueClass.trim()
		else
			''
	}
	derived readonly transient volatile String detailsControlClass get {
		if (localControlClass.trim() != '')
			localControlClass.trim()
		else if (uiModel.defaultStyles.controlClass.trim() != '')
			uiModel.defaultDetailsStyles.controlClass.trim()
		else if (uiModel.defaultDetailsStyles.controlClass.trim() != '')
			uiModel.defaultStyles.controlClass.trim()
		else
			''
	}
	derived readonly transient volatile String detailsAnchorClass get {
		if (localAnchorClass.trim() != '')
			localAnchorClass.trim()
		else if (uiModel.defaultDetailsStyles.anchorClass.trim() != '')
			uiModel.defaultDetailsStyles.anchorClass.trim()
		else if (uiModel.defaultStyles.anchorClass.trim() != '')
			uiModel.defaultStyles.anchorClass.trim()
		else
			''
	}
}

class TabularUnit extends CollectionUnit {
	refers SearchUnit targettingSearches opposite resultsDestination
	String rowClasses
	derived readonly transient volatile String contentClass get {
		if (localContentClass.trim() != '')
			localContentClass.trim()
		else if (uiModel.defaultTabularStyles.contentClass.trim() != '')
			uiModel.defaultTabularStyles.contentClass.trim()
		else if (uiModel.defaultStyles.contentClass.trim() != '')
			uiModel.defaultStyles.contentClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasContentClass get {
		contentClass != ''
	}
	derived readonly transient volatile String tabularFieldListClass get {
		if (localFieldListClass.trim() != '')
			localFieldListClass.trim()
		else if (uiModel.defaultTabularStyles.fieldListClass.trim() != '')
			uiModel.defaultTabularStyles.fieldListClass.trim()
		else if (uiModel.defaultStyles.fieldListClass.trim() != '')
			uiModel.defaultStyles.fieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String tabularDefinitionFieldListClass get {
		if (localDefinitionFieldListClass.trim() != '')
			localDefinitionFieldListClass.trim()
		else if (uiModel.defaultTabularStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultTabularStyles.definitionFieldListClass.trim()
		else if (uiModel.defaultStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultStyles.definitionFieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String tabularFieldLabelClass get {
		if (localFieldLabelClass.trim() != '')
			localFieldLabelClass.trim()
		else if (uiModel.defaultTabularStyles.fieldLabelClass.trim() != '')
			uiModel.defaultTabularStyles.fieldLabelClass.trim()
		else if (uiModel.defaultStyles.fieldLabelClass.trim() != '')
			uiModel.defaultStyles.fieldLabelClass.trim()
		else
			''
	}
	derived readonly transient volatile String tabularFieldValueClass get {
		if (localFieldValueClass.trim() != '')
			localFieldValueClass.trim()
		else if (uiModel.defaultTabularStyles.fieldValueClass.trim() != '')
			uiModel.defaultTabularStyles.fieldValueClass.trim()
		else if (uiModel.defaultStyles.fieldValueClass.trim() != '')
			uiModel.defaultStyles.fieldValueClass.trim()
		else
			''
	}
	derived readonly transient volatile String tabularControlClass get {
		if (localControlClass.trim() != '')
			localControlClass.trim()
		else if (uiModel.defaultTabularStyles.controlClass.trim() != '')
			uiModel.defaultTabularStyles.controlClass.trim()
		else if (uiModel.defaultStyles.controlClass.trim() != '')
			uiModel.defaultStyles.controlClass.trim()
		else
			''
	}
	derived readonly transient volatile String tabularInstanceControlClass get {
		if (localInstanceControlClass.trim() != '')
			localInstanceControlClass.trim()
		else if (uiModel.defaultTabularStyles.instanceControlClass.trim() != '')
			uiModel.defaultTabularStyles.instanceControlClass.trim()
		else if (uiModel.defaultStyles.instanceControlClass.trim() != '')
			uiModel.defaultStyles.instanceControlClass.trim()
		else
			''
	}
	derived readonly transient volatile String tabularAnchorClass get {
		if (localAnchorClass.trim() != '')
			localAnchorClass.trim()
		else if (uiModel.defaultTabularStyles.anchorClass.trim() != '')
			uiModel.defaultTabularStyles.anchorClass.trim()
		else if (uiModel.defaultStyles.anchorClass.trim() != '')
			uiModel.defaultStyles.anchorClass.trim()
		else
			''
	}
	derived readonly transient volatile String tabularInstanceAnchorClass get {
		if (localInstanceAnchorClass.trim() != '')
			localInstanceAnchorClass.trim()
		else if (uiModel.defaultTabularStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultTabularStyles.instanceAnchorClass.trim()
		else if (uiModel.defaultStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultStyles.instanceAnchorClass.trim()
		else
			''
	}
}

abstract class CardsUnit extends CollectionUnit {
	contains Badge[] badges opposite displayedOn
	boolean overlaySingleSelectAction
	derived readonly transient volatile String contentClass get {
		if (localContentClass.trim() != '')
			localContentClass.trim()
		else if (uiModel.defaultCardsStyles.contentClass.trim() != '')
			uiModel.defaultCardsStyles.contentClass.trim()
		else if (uiModel.defaultStyles.contentClass.trim() != '')
			uiModel.defaultStyles.contentClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasContentClass get {
		contentClass != ''
	}
	derived readonly transient volatile String cardsFieldListClass get {
		if (localFieldListClass.trim() != '')
			localFieldListClass.trim()
		else if (uiModel.defaultCardsStyles.fieldListClass.trim() != '')
			uiModel.defaultCardsStyles.fieldListClass.trim()
		else if (uiModel.defaultStyles.fieldListClass.trim() != '')
			uiModel.defaultStyles.fieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String cardsDefinitionFieldListClass get {
		if (localDefinitionFieldListClass.trim() != '')
			localDefinitionFieldListClass.trim()
		else if (uiModel.defaultCardsStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultCardsStyles.definitionFieldListClass.trim()
		else if (uiModel.defaultStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultStyles.definitionFieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String cardsFieldLabelClass get {
		if (localFieldLabelClass.trim() != '')
			localFieldLabelClass.trim()
		else if (uiModel.defaultCardsStyles.fieldLabelClass.trim() != '')
			uiModel.defaultCardsStyles.fieldLabelClass.trim()
		else if (uiModel.defaultStyles.fieldLabelClass.trim() != '')
			uiModel.defaultStyles.fieldLabelClass.trim()
		else
			''
	}
	derived readonly transient volatile String cardsFieldValueClass get {
		if (localFieldValueClass.trim() != '')
			localFieldValueClass.trim()
		else if (uiModel.defaultCardsStyles.fieldValueClass.trim() != '')
			uiModel.defaultCardsStyles.fieldValueClass.trim()
		else if (uiModel.defaultStyles.fieldValueClass.trim() != '')
			uiModel.defaultStyles.fieldValueClass.trim()
		else
			''
	}
	String localRowClass = ''
	derived readonly unsettable transient volatile String rowClass get {
		if (localRowClass.trim() != '')
			localRowClass.trim()
		else if (uiModel.defaultCardsStyles.rowClass.trim() != '')
			uiModel.defaultCardsStyles.rowClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasRowClass get {
		rowClass != ''
	}
	String localColumnClass = ''
	derived readonly transient volatile String columnClass get {
		if (localColumnClass.trim() != '')
			localColumnClass.trim()
		else if (uiModel.defaultCardsStyles.columnClass.trim() != '')
			uiModel.defaultCardsStyles.columnClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasColumnClass get {
		columnClass != ''
	}
	String localCardClass = ''
	derived readonly transient volatile String cardClass get {
		if (localCardClass.trim() != '')
			localCardClass.trim()
		else if (uiModel.defaultCardsStyles.cardClass.trim() != '')
			uiModel.defaultCardsStyles.cardClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasCardClass get {
		cardClass != ''
	}
	String localCardHeaderClass = ''
	derived readonly transient volatile String cardHeaderClass get {
		if (localCardHeaderClass.trim() != '')
			localCardHeaderClass.trim()
		else if (uiModel.defaultCardsStyles.cardHeaderClass.trim() != '')
			uiModel.defaultCardsStyles.cardHeaderClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasCardHeaderClass get {
		cardHeaderClass != ''
	}
	String localCardBodyClass = ''
	derived readonly transient volatile String cardBodyClass get {
		if (localCardBodyClass.trim() != '')
			localCardBodyClass.trim()
		else if (uiModel.defaultCardsStyles.cardBodyClass.trim() != '')
			uiModel.defaultCardsStyles.cardBodyClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasCardBodyClass get {
		cardBodyClass != ''
	}
	String localCardFooterClass = ''
	derived readonly transient volatile String cardFooterClass get {
		if (localCardFooterClass.trim() != '')
			localCardFooterClass.trim()
		else if (uiModel.defaultCardsStyles.cardFooterClass.trim() != '')
			uiModel.defaultCardsStyles.cardFooterClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasCardFooterClass get {
		cardFooterClass != ''
	}
	derived readonly transient volatile String cardsControlClass get {
		if (localControlClass.trim() != '')
			localControlClass.trim()
		else if (uiModel.defaultCardsStyles.controlClass.trim() != '')
			uiModel.defaultCardsStyles.controlClass.trim()
		else if (uiModel.defaultStyles.controlClass.trim() != '')
			uiModel.defaultStyles.controlClass.trim()
		else
			''
	}
	derived readonly transient volatile String cardsInstanceControlClass get {
		if (localInstanceControlClass.trim() != '')
			localInstanceControlClass.trim()
		else if (uiModel.defaultCardsStyles.instanceControlClass.trim() != '')
			uiModel.defaultCardsStyles.instanceControlClass.trim()
		else if (uiModel.defaultStyles.instanceControlClass.trim() != '')
			uiModel.defaultStyles.instanceControlClass.trim()
		else
			''
	}
	derived readonly transient volatile String cardsAnchorClass get {
		if (localAnchorClass.trim() != '')
			localAnchorClass.trim()
		else if (uiModel.defaultCardsStyles.anchorClass.trim() != '')
			uiModel.defaultCardsStyles.anchorClass.trim()
		else if (uiModel.defaultStyles.anchorClass.trim() != '')
			uiModel.defaultStyles.anchorClass.trim()
		else
			''
	}
	derived readonly transient volatile String cardsInstanceAnchorClass get {
		if (localInstanceAnchorClass.trim() != '')
			localInstanceAnchorClass.trim()
		else if (uiModel.defaultCardsStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultCardsStyles.instanceAnchorClass.trim()
		else if (uiModel.defaultStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultStyles.instanceAnchorClass.trim()
		else
			''
	}
	String localBadgeClass = ''
}

class Badge {
	refers CardsUnit[1] displayedOn opposite badges
	String iconName
	contains FeaturePath value
	refers Attribute title
	contains Predicate displayWhen
	String localBadgeClass
	derived readonly unsettable transient volatile String badgeClass get {
		if (localBadgeClass.trim() != '')
			localBadgeClass.trim()
		else if (displayedOn.localBadgeClass.trim() != '')
			displayedOn.localBadgeClass.trim()
		else if (displayedOn.uiModel.defaultCardsStyles.badgeClass.trim() != '')
			displayedOn.uiModel.defaultCardsStyles.badgeClass.trim()
		else
			''
	}
	derived readonly unsettable transient volatile boolean hasBadgeClass get {
		badgeClass != ''
	}
}

class TextCardsUnit extends CardsUnit {
}

class DateCardsUnit extends CardsUnit {
	contains FeaturePath[1] elementDate
}

abstract class ImageUnit extends CollectionUnit {
	contains FeaturePath[1] imagePathFeature
	refers ImageManipulation imageFilter
	refers ImageManipulation missingImageFilter
	String missingImagePath
}


class ImageCardsUnit extends CardsUnit, ImageUnit {
	boolean enableImageEnlargement
	boolean overlayTitle
	boolean revealUntruncatedContent
}

class SliderUnit extends ImageUnit {
	int showTime
	int transitionTime
	derived readonly transient volatile String contentClass get {
		if (localContentClass.trim() != '')
			localContentClass.trim()
		else if (uiModel.defaultSliderStyles.contentClass.trim() != '')
			uiModel.defaultSliderStyles.contentClass.trim()
		else if (uiModel.defaultStyles.contentClass.trim() != '')
			uiModel.defaultStyles.contentClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasContentClass get {
		contentClass != ''
	}
	derived readonly transient volatile String sliderFieldListClass get {
		if (localFieldListClass.trim() != '')
			localFieldListClass.trim()
		else if (uiModel.defaultSliderStyles.fieldListClass.trim() != '')
			uiModel.defaultSliderStyles.fieldListClass.trim()
		else if (uiModel.defaultStyles.fieldListClass.trim() != '')
			uiModel.defaultStyles.fieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String sliderDefinitionFieldListClass get {
		if (localDefinitionFieldListClass.trim() != '')
			localDefinitionFieldListClass.trim()
		else if (uiModel.defaultSliderStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultSliderStyles.definitionFieldListClass.trim()
		else if (uiModel.defaultStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultStyles.definitionFieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String sliderFieldLabelClass get {
		if (localFieldLabelClass.trim() != '')
			localFieldLabelClass.trim()
		else if (uiModel.defaultSliderStyles.fieldLabelClass.trim() != '')
			uiModel.defaultSliderStyles.fieldLabelClass.trim()
		else if (uiModel.defaultStyles.fieldLabelClass.trim() != '')
			uiModel.defaultStyles.fieldLabelClass.trim()
		else
			''
	}
	derived readonly transient volatile String sliderFieldValueClass get {
		if (localFieldValueClass.trim() != '')
			localFieldValueClass.trim()
		else if (uiModel.defaultSliderStyles.fieldValueClass.trim() != '')
			uiModel.defaultSliderStyles.fieldValueClass.trim()
		else if (uiModel.defaultStyles.fieldValueClass.trim() != '')
			uiModel.defaultStyles.fieldValueClass.trim()
		else
			''
	}
	derived readonly transient volatile String sliderControlClass get {
		if (localControlClass.trim() != '')
			localControlClass.trim()
		else if (uiModel.defaultSliderStyles.controlClass.trim() != '')
			uiModel.defaultSliderStyles.controlClass.trim()
		else if (uiModel.defaultStyles.controlClass.trim() != '')
			uiModel.defaultStyles.controlClass.trim()
		else
			''
	}
	derived readonly transient volatile String sliderInstanceControlClass get {
		if (localInstanceControlClass.trim() != '')
			localInstanceControlClass.trim()
		else if (uiModel.defaultSliderStyles.instanceControlClass.trim() != '')
			uiModel.defaultSliderStyles.instanceControlClass.trim()
		else if (uiModel.defaultStyles.instanceControlClass.trim() != '')
			uiModel.defaultStyles.instanceControlClass.trim()
		else
			''
	}
	derived readonly transient volatile String sliderAnchorClass get {
		if (localAnchorClass.trim() != '')
			localAnchorClass.trim()
		else if (uiModel.defaultSliderStyles.anchorClass.trim() != '')
			uiModel.defaultSliderStyles.anchorClass.trim()
		else if (uiModel.defaultStyles.anchorClass.trim() != '')
			uiModel.defaultStyles.anchorClass.trim()
		else
			''
	}
	derived readonly transient volatile String sliderInstanceAnchorClass get {
		if (localInstanceAnchorClass.trim() != '')
			localInstanceAnchorClass.trim()
		else if (uiModel.defaultSliderStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultSliderStyles.instanceAnchorClass.trim()
		else if (uiModel.defaultStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultStyles.instanceAnchorClass.trim()
		else
			''
	}
}

class GalleryUnit extends ImageUnit {
	refers ImageManipulation fullSizeFilter
	int showTime
	int transitionTime
	derived readonly transient volatile String contentClass get {
		if (localContentClass.trim() != '')
			localContentClass.trim()
		else if (uiModel.defaultGalleryStyles.contentClass.trim() != '')
			uiModel.defaultGalleryStyles.contentClass.trim()
		else if (uiModel.defaultStyles.contentClass.trim() != '')
			uiModel.defaultStyles.contentClass.trim()
		else
			''
	}
	derived readonly transient volatile boolean hasContentClass get {
		contentClass != ''
	}
	derived readonly transient volatile String galleryFieldListClass get {
		if (localFieldListClass.trim() != '')
			localFieldListClass.trim()
		else if (uiModel.defaultGalleryStyles.fieldListClass.trim() != '')
			uiModel.defaultGalleryStyles.fieldListClass.trim()
		else if (uiModel.defaultStyles.fieldListClass.trim() != '')
			uiModel.defaultStyles.fieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String galleryDefinitionFieldListClass get {
		if (localDefinitionFieldListClass.trim() != '')
			localDefinitionFieldListClass.trim()
		else if (uiModel.defaultGalleryStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultGalleryStyles.definitionFieldListClass.trim()
		else if (uiModel.defaultStyles.definitionFieldListClass.trim() != '')
			uiModel.defaultStyles.definitionFieldListClass.trim()
		else
			''
	}
	derived readonly transient volatile String galleryFieldLabelClass get {
		if (localFieldLabelClass.trim() != '')
			localFieldLabelClass.trim()
		else if (uiModel.defaultGalleryStyles.fieldLabelClass.trim() != '')
			uiModel.defaultGalleryStyles.fieldLabelClass.trim()
		else if (uiModel.defaultStyles.fieldLabelClass.trim() != '')
			uiModel.defaultStyles.fieldLabelClass.trim()
		else
			''
	}
	derived readonly transient volatile String galleryFieldValueClass get {
		if (localFieldValueClass.trim() != '')
			localFieldValueClass.trim()
		else if (uiModel.defaultGalleryStyles.fieldValueClass.trim() != '')
			uiModel.defaultGalleryStyles.fieldValueClass.trim()
		else if (uiModel.defaultStyles.fieldValueClass.trim() != '')
			uiModel.defaultStyles.fieldValueClass.trim()
		else
			''
	}
	derived readonly transient volatile String galleryControlClass get {
		if (localControlClass.trim() != '')
			localControlClass.trim()
		else if (uiModel.defaultGalleryStyles.controlClass.trim() != '')
			uiModel.defaultGalleryStyles.controlClass.trim()
		else if (uiModel.defaultStyles.controlClass.trim() != '')
			uiModel.defaultStyles.controlClass.trim()
		else
			''
	}
	derived readonly transient volatile String galleryInstanceControlClass get {
		if (localInstanceControlClass.trim() != '')
			localInstanceControlClass.trim()
		else if (uiModel.defaultGalleryStyles.instanceControlClass.trim() != '')
			uiModel.defaultGalleryStyles.instanceControlClass.trim()
		else if (uiModel.defaultStyles.instanceControlClass.trim() != '')
			uiModel.defaultStyles.instanceControlClass.trim()
		else
			''
	}
	derived readonly transient volatile String galleryAnchorClass get {
		if (localAnchorClass.trim() != '')
			localAnchorClass.trim()
		else if (uiModel.defaultGalleryStyles.anchorClass.trim() != '')
			uiModel.defaultGalleryStyles.anchorClass.trim()
		else if (uiModel.defaultStyles.anchorClass.trim() != '')
			uiModel.defaultStyles.anchorClass.trim()
		else
			''
	}
	derived readonly transient volatile String galleryInstanceAnchorClass get {
		if (localInstanceAnchorClass.trim() != '')
			localInstanceAnchorClass.trim()
		else if (uiModel.defaultGalleryStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultGalleryStyles.instanceAnchorClass.trim()
		else if (uiModel.defaultStyles.instanceAnchorClass.trim() != '')
			uiModel.defaultStyles.instanceAnchorClass.trim()
		else
			''
	}
}

abstract class ControlUnit extends DynamicUnit {
	String[1] submitLabel
	refers Page cancelDestination
	String cancelLabel
}

class SearchUnit extends ControlUnit {
	refers TabularUnit[1] resultsDestination opposite targettingSearches
}


class RegistrationUnit extends EditUnit, SecurityUnit {
}

class LoginUnit extends EditUnit, SecurityUnit {
}

class LogoutUnit extends DynamicUnit, SecurityUnit {
}

class ForgottenPasswordUnit extends EditUnit, SecurityUnit {
	refers ResetPasswordUnit[1] resetPasswordUnit opposite forgottenPasswordUnit
	String[1] uriEmailSent
	String[1] emailSubject
	String[1] emailMessage
	String[1] emailSentCaption
	String[1] emailSentMessage
}

class ResetPasswordUnit extends EditUnit, SecurityUnit {
	refers ForgottenPasswordUnit[1] forgottenPasswordUnit opposite resetPasswordUnit
}


enum ContainerActionsPlacement {
	Above = 0
	Below = 1
	Float = 2
}

enum InstanceActionsPlacement {
	Footer = 0
	Float = 1
}

interface ActionContainer {
	ContainerActionsPlacement containerActionsPlacement
	InstanceActionsPlacement instanceActionsPlacement
	contains Action[] allActions opposite usedBy
	refers derived readonly unsettable transient volatile Action[] actions get {
		return allActions.filter[!disable].toEList
	}
	derived readonly unsettable transient volatile boolean hasActions get {
		!actions.isEmpty()
	}
	refers derived readonly unsettable transient volatile Action[] actionsWithMessages get {
		actions.filter[hasMessages].toEList()
	}
	derived readonly unsettable transient volatile boolean hasActionsMessages get {
		!actionsWithMessages.isEmpty()
	}
	refers derived readonly unsettable transient volatile Action[] actionsWithoutTarget get {
		actions.filter[it instanceof DeleteAction || it instanceof OperationAction].toEList()
	}
	refers derived readonly unsettable transient volatile Action[] containerActions get {
		actions.filter[!it.isInstanceAction].toEList()
	}
	derived readonly unsettable transient volatile boolean hasContainerActions get {
		!containerActions.isEmpty()
	}
	refers derived readonly unsettable transient volatile OperationAction[] fileActions get {
		operationActions.filter[it.operation.resultType.literal == 'File'].toEList()
	}
	derived readonly unsettable transient volatile boolean hasFileActions get {
		!fileActions.isEmpty()
	}
	refers derived readonly unsettable transient volatile Action[] instanceActions get {
		actions.filter[it.isInstanceAction].toEList()
	}
	derived readonly unsettable transient volatile boolean hasInstanceActions get {
		!instanceActions.isEmpty()
	}
	refers derived readonly unsettable transient volatile OperationAction[] operationActions get {
		actions.filter[it instanceof OperationAction].map[it as OperationAction].toEList()
	}
	derived readonly unsettable transient volatile boolean hasOperationActions get {
		!operationActions.isEmpty()
	}
	refers readonly unsettable transient volatile derived WafModel genModelRef get {
		if (this instanceof DynamicUnit)
			(this as DynamicUnit).genModel
		else if (this instanceof UnitFeature)
			(this as UnitFeature).genModel
	}
	refers readonly unsettable transient volatile derived WafModel uiModelRef get {
		if (this instanceof DynamicUnit)
			(this as DynamicUnit).uiModel
		else if (this instanceof UnitFeature)
			(this as UnitFeature).uiModel
	}
}

abstract class Action extends NamedDisplayElement {
	refers ActionContainer[1]usedBy opposite allActions
	refers readonly transient volatile unsettable derived DynamicUnit parentUnit get {
		if (usedBy instanceof DynamicUnit)
			(usedBy as DynamicUnit)
		else if (usedBy instanceof UnitFeature)
			(usedBy as UnitFeature).displayedOn
	}
	derived readonly transient volatile String authorisationRoles get {
		if (this instanceof SecurityAction)
			(this as SecurityAction).securityAuthorisationRoles
		else if (this instanceof SelectAction)
			(this as SelectAction).selectAuthorisationRoles
		else if (this instanceof DeleteAction)
			(this as DeleteAction).deleteAuthorisationRoles
		else if (this instanceof OperationAction)
			(this as OperationAction).operationAuthorisationRoles
	}
	derived readonly transient unsettable volatile boolean isAuthorised get {
		authorisationRoles.trim() != ''
	}
	derived readonly transient unsettable volatile boolean hasCustomisedAuthorisation get {
		authorisationRoles.trim() != parentUnit.authorisationRoles.trim()
	}
	derived readonly transient unsettable volatile boolean isInstanceAction get {
		this instanceof DeleteAction
			|| this instanceof InstanceOperationAction
			|| this instanceof InstanceSelectAction
	}
	String iconName = ''
	boolean disable
	contains Predicate displayWhen
	contains Predicate enableWhen
	String confirmMessage = ''
	derived readonly transient volatile boolean hasConfirmMessage get {
		confirmMessage.trim() != ''
	}
	String successMessage = ''
	derived readonly transient volatile boolean hasSuccessMessage get {
		successMessage.trim() != ''
	}
	String failureMessage = ''
	derived readonly transient volatile boolean hasFailureMessage get {
		failureMessage.trim() != ''
	}
	derived readonly transient volatile boolean hasMessages get {
		hasConfirmMessage || hasSuccessMessage || hasFailureMessage
	}
	String localAnchorClass = ''
	derived readonly transient volatile String anchorClass get {
		if (localAnchorClass.trim() != '')
			localAnchorClass.trim()
		else if (usedBy instanceof DynamicUnit)
			if (this.isInstanceAction)
				if (parentUnit.instanceAnchorClass.trim() != '')
					parentUnit.instanceAnchorClass.trim()
				else
					''
			else
				if (parentUnit.anchorClass.trim() != '')
					parentUnit.anchorClass.trim()
				else
					''
		else
			''
	}
	derived readonly transient volatile boolean hasAnchorClass get {
		anchorClass.trim != ''
	}
	String headerClass
	String footerClass
}

class SecurityAction extends Action {
	refers SecurityUnit[1] target
	derived readonly transient volatile String securityAuthorisationRoles get {
		(target as DynamicUnit)?.authorisationRoles
	}
}

class DeleteAction extends Action {
	String[1] uriElement
	String localAuthorisationRoles = ''
	derived readonly transient volatile String deleteAuthorisationRoles get {
		if (localAuthorisationRoles.trim() != '')
			localAuthorisationRoles
		else
			if (usedBy instanceof DynamicUnit)
				(usedBy as DynamicUnit).authorisationRoles
			else if (usedBy instanceof UnitFeature)
				(usedBy as UnitFeature).displayedOn.authorisationRoles
	}
}

abstract class SelectAction extends Action {
	refers SelectableUnit[1] target opposite selectors
	contains FeaturePath valuePath
	derived readonly transient volatile String selectAuthorisationRoles get {
		(target as DynamicUnit)?.authorisationRoles
	}
}

class ContainerSelectAction extends SelectAction {
}

class InstanceSelectAction extends SelectAction {
}

abstract class OperationAction extends Action {
	refers BusinessOperation[1] operation
	String fileExtension
	String[1] uriElement
	String localAuthorisationRoles = ''
	derived readonly transient volatile String operationAuthorisationRoles get {
		if (localAuthorisationRoles.trim() != '')
			localAuthorisationRoles
		else
			if (usedBy instanceof DynamicUnit)
				(usedBy as DynamicUnit).authorisationRoles
			else if (usedBy instanceof UnitFeature)
				(usedBy as UnitFeature).displayedOn.authorisationRoles
	}
}

class InstanceOperationAction extends OperationAction {
}

class ContainerOperationAction extends OperationAction {
}

class GeneralOperationAction extends OperationAction {
}


class Message {
	String[1] text
	contains FeaturePath[] features
}