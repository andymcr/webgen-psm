[comment encoding = UTF-8 /]
[module pageController(
	'http://www.cs.man.ac.uk/mdsd/2010/GenJsf',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::files::controllers::authenticationMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::files::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::files::controllers::detailsMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::files::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::files::controllers_gasorm::indexMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::files::controllers::searchMethods/]


[template public generateGasOrmController(genPage : GenPage)]
[file(genPage.controllerFilename(), false)]
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class [genPage.controllerName()/] extends My_Controller {

	public function __construct() {
log_message('debug', 'XXXX [genPage.controllerName()/] constructing');
		parent::__construct();
		$this->load->helper('ssl');
[if (genPage.hasAuthenticationUnit())]
		$this->config->load('site', TRUE);
		$this->config->load('authentication', TRUE);
		$this->lang->load('authentication');
[/if]

[for (genUnit : GenDynamicUnit | genPage.dynamicUnits()->select(u | not u.oclIsTypeOf(GenIndexUnit)))]
		[genUnit.generateUnitVariables()/]
[/for]
	}

	public function index() {
[if (genPage.isAuthenticated())]
		[genPage.generateLoggedInCheck()/]

[/if]
		$this->displayPage();
	}

[for (genUnit : GenDynamicUnit | genPage.dynamicUnits())]
	[generateUnitMethods()/]

[/for]
	private function displayPage() {
//		$this->output->enable_profiler(TRUE);

[if (genPage.hasForm())]
		$this->load->helper('form');

[/if]
		$data['['/]'title'[']'/] = '[genPage.displayLabel()/]';
		$data['['/]'topbar'[']'/] = [if (not genPage.genPartOf.isAuthenticated())]
'templates/topbar'[else]
($this->authentication_lib->isLoggedIn() ? 'templates/topbar_logged_in' : 'templates/topbar')[/if];
[if (genPage.genPartOf.isAuthenticated())]
		$data['['/]'userId'[']'/] => $this->authentication_lib->getUsername();
[/if]
		$data['['/]'units'[']'/] = array([for (genUnit : GenContentUnit | genPage.genUnits) separator (', ')]
'[genPage.controllerName()/]/[genUnit.instanceName()/]'[/for]);
[for (genUnit : GenDynamicUnit | genPage.dynamicUnits())]
		[genUnit.generateUnitDisplay()/]
		if (isset($this->[genUnit.instanceName()/]_error)) {
			$data['['/]'[genUnit.instanceName()/]_error'[']'/] = $this->[genUnit.instanceName()/]_error;
		}
[/for]

[if (genPage.hasInputAssociations())]
	[for (genIncludedFeature : GenIncludedAssociation | genPage.inputAssociations())]
	[let genIncludedAssociation : GenUnitIncludedAssociation = genIncludedFeature.oclAsType(GenUnitIncludedAssociation)]
		$this->[genIncludedFeature.optionsName()/] = array([if (genIncludedFeature.oclIsKindOf(GenIncludedSingletonAssociation) and not genIncludedFeature.isRequired())]'' => 'Please select'[/if]);
		$[genIncludedFeature.instanceName()/] = new [genIncludedFeature.modelName()/]();
		$[genIncludedFeature.instanceName()/]->get_iterated();
		if ($[genIncludedFeature.instanceName()/]->exists()) {
			foreach ($[genIncludedFeature.instanceName()/] as $option) {
				$this->[genIncludedFeature.optionsName()/]['['/]$option->id[']'/] = $option->displayLabel();
			}
		}
		[if (genIncludedFeature.oclIsKindOf(GenIncludedSingletonAssociation))]
		$this->[genIncludedAssociation.genDisplayedOn.instanceName()/]->[genIncludedAssociation.columnName()/]->get();
		$this->[genIncludedFeature.valueName()/] = $this->[genIncludedAssociation.genDisplayedOn.instanceName()/]->[genIncludedFeature.columnName()/]->id;
		[else]
		$this->[genIncludedFeature.valueName()/] = array();
		if ($this->[genIncludedAssociation.genDisplayedOn.instanceName()/]->exists()) {
			$this->[genIncludedAssociation.genDisplayedOn.instanceName()/]->[genIncludedAssociation.columnName()/]->get_iterated();
			if ($this->[genIncludedAssociation.genDisplayedOn.instanceName()/]->[genIncludedAssociation.columnName()/]->exists()) {
				foreach ($this->[genIncludedAssociation.genDisplayedOn.instanceName()/]->[genIncludedAssociation.columnName()/] as $value) {
					$this->[genIncludedFeature.valueName()/]['['/][']'/] = $value->id;
				}
			}
		}
		[/if]

	[/let]
	[/for]

[/if]
		$this->load->view('templates/page', $data);
//			array(
[for (genIncludedFeature : GenIncludedAssociation | genPage.inputAssociations())]
				'[genIncludedFeature.optionsName()/]' => $this->[genIncludedFeature.optionsName()/],
				'[genIncludedFeature.valueName()/]' => $this->[genIncludedFeature.valueName()/],
[/for]
//			));
	}

}
[/file]
[/template]
