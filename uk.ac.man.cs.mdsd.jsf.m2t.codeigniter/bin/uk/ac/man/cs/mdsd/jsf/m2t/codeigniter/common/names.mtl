[comment encoding = UTF-8 /]
[module names(
	'http://www.cs.man.ac.uk/mdsd/2010/GenJsf',
	'http://www.cs.man.ac.uk/mdsd/2010/GenOrm',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::featureProperties/]


[query public controllerName(genPage : GenPage) : String
	= genPage.name.toLowerFirst().replaceAll('([A-Z])', '_$1').toLower()
/]

[query public instanceName(genPage : GenPage) : String
	= genPage.name.toLowerFirst()
/]


[query public instanceName(genUnit : GenContentUnit) : String
	= genUnit.name().toLowerFirst()
/]

[query public methodName(genUnit : GenDynamicUnit) : String
	= genUnit.instanceName()
/]

[query public modelName(genUnit : GenDynamicUnit) : String
	= let baseName : String = genUnit.genService.modelName()
		in if genUnit.parentController().genPartOf.ormTechnology = OrmTechnologies::GasORM then
				'Model\\'.concat(baseName)
			else
				baseName
			endif
/]

[query public asTargetUri(genUnit : GenDynamicUnit) : String
	= genUnit.genDisplayedOn.oclAsType(GenPage).controllerName().concat('/')
		.concat(genUnit.methodName()).concat('/')
/]

[query public logoutTargetUri(genUnit : GenDynamicUnit) : String
	= genUnit.genDisplayedOn.oclAsType(GenPage).controllerName().concat('/')
		.concat('logout/')
/]

[query public sessionKey(genUnit : GenDynamicUnit) : String
	= let key : String
			= if genUnit.genDisplayedOn.oclIsTypeOf(GenPage) then
				genUnit.genDisplayedOn.oclAsType(GenPage).instanceName()
			else
				genUnit.genDisplayedOn.oclAsType(GenUnitIncludedAssociation).genDisplayedOn.sessionKey()
			endif
		in key.concat('_').concat(genUnit.instanceName())
/]


[query public destinationUri(genAction : GenInlineAction) : String
	= if genAction.oclIsTypeOf(GenDeleteAction) then
			genAction.oclAsType(GenDeleteAction).destinationUri()
		else
			genAction.oclAsType(GenSelectAction).destinationUri()
		endif
/]

[query public destinationUri(genAction : GenDeleteAction) : String
	= genAction.genUsedBy.oclAsType(GenDynamicUnit).parentController().controllerName()
		.concat('/').concat(genAction.methodName()).concat('/')
/]

[query public destinationUri(genSelectAction : GenSelectAction) : String
	= let genTarget : GenDynamicUnit = genSelectAction.genTarget.oclAsType(GenDynamicUnit)
		in let methodName : String
			= if genTarget.oclIsTypeOf(GenIndexUnit) then
					genTarget.methodName().concat(genSelectAction.name)
				else
					genTarget.methodName()
				endif
			in genTarget.genDisplayedOn.oclAsType(GenPage).controllerName().concat('/')
				.concat(methodName).concat('/')
/]

[query public methodName(genAction : GenDeleteAction) : String
	= if genAction.genUsedBy.oclIsKindOf(GenDynamicUnit) then
			genAction.genUsedBy.oclAsType(GenDynamicUnit).instanceName()
				.concat(genAction.name.toUpperFirst())
		else
			let genIncludedAssociation : GenUnitIncludedAssociation
				= genAction.genUsedBy.oclAsType(GenUnitIncludedAssociation)
				in genIncludedAssociation.genDisplayedOn.instanceName()
				.concat(
					if genIncludedAssociation.oclIsKindOf(GenIncludedSingletonAssociation) then
						genIncludedAssociation.oclAsType(GenIncludedSingletonAssociation).name.toUpperFirst()
					else
						genIncludedAssociation.oclAsType(GenIncludedCollectionAssociation).name.toUpperFirst()
					endif)
				.concat(genAction.name.toUpperFirst())
		endif
/]

[query public modelName(genAction : GenDeleteAction) : String
	= if genAction.genUsedBy.oclIsKindOf(GenDynamicUnit) then
			genAction.genUsedBy.oclAsType(GenDynamicUnit).modelName()
		else
			genAction.genUsedBy.oclAsType(GenUnitIncludedAssociation).modelName()
		endif
/]

[query public modelName(genAction : GenSelectAction) : String
	= let genUnit : GenDynamicUnit
		= if genAction.genUsedBy.oclIsKindOf(GenDynamicUnit) then
				genAction.genUsedBy.oclAsType(GenDynamicUnit)
			else
				genAction.genUsedBy.oclAsType(GenUnitIncludedAssociation).genDisplayedOn
			endif
		in genUnit.genService.modelName()
/]


[query public hasExplicitTableName(genService : GenService) : Boolean
	= let tableName : String = genService.tableName().toLower()
		in genService.modelName().toLower() <> tableName
/]


[query public instanceName(genSelection : GenSelection) : String
	= genSelection.name.toLowerFirst()
/]

[query public instanceName(genAction : GenInlineAction) : String
	= genAction.name.toLowerFirst()
/]

[query public modelName(genService : GenService) : String
	= genService.jsfService.dataModel.concat('_Model')
/]

[query public instanceName(genIncludedFeature : GenIncludedFeature) : String
	= genIncludedFeature.name().toLowerFirst()
/]

[query public modelName(genIncludedFeature : GenIncludedAssociation) : String
	= if genIncludedFeature.oclIsKindOf(GenIncludedCollectionAssociation) then
			genIncludedFeature.oclAsType(GenIncludedCollectionAssociation).genFeature.modelName()
		else if genIncludedFeature.oclIsKindOf(GenIncludedSingletonAssociation) then
			genIncludedFeature.oclAsType(GenIncludedSingletonAssociation).genFeature.modelName()
		else
			'unhandledFeature'
		endif endif
/]

[query public optionsName(genIncludedFeature : GenIncludedFeature) : String
	= genIncludedFeature.instanceName().concat('Options')
/]

[query public parentModelName(genIncludedFeature : GenIncludedFeature) : String
	= if genIncludedFeature.oclIsKindOf(GenServiceIncludedFeature) then
			genIncludedFeature.oclAsType(GenServiceIncludedFeature).genIncludedBy.modelName()
		else if genIncludedFeature.oclIsKindOf(GenUnitIncludedFeature) then
			genIncludedFeature.oclAsType(GenUnitIncludedFeature).genDisplayedOn.modelName()
		else
			'unhandledFeature'
		endif endif
/]

[query public valueName(genIncludedFeature : GenIncludedFeature) : String
	= genIncludedFeature.instanceName().concat('Values')
/]


[query public modelName(genEntity : GenEntity) : String
	= genEntity.name.concat('_Model')
/]


[query public modelName(genFeature : GenAssociation) : String
	= if genFeature.oclIsTypeOf(GenSingletonAssociation) then
			genFeature.oclAsType(GenSingletonAssociation).modelName()
		else if genFeature.oclIsKindOf(GenCollectionAssociation) then
			genFeature.oclAsType(GenCollectionAssociation).modelName()
		else
			'unhandledFeature'
		endif endif
/]

[query public modelName(genFeature : GenCollectionAssociation) : String
	= genFeature.genOpposite.genParentEntity.modelName()
/]

[query public modelName(genFeature : GenSingletonAssociation) : String
	= genFeature.genOpposite.genParentEntity.modelName()
/]

[query public tableName(genFeature : GenCollectionAssociation) : String
	= let names : Sequence(String)
		= Sequence{genFeature.genParentEntity.tableName(), genFeature.genOpposite.genParentEntity.tableName()}
		in names->sep('_').toString()
/]


[query public modelName(enumerationType : EnumerationType) : String
	= enumerationType.name
/]

[query public name(enumerationLiteral : EnumerationLiteral) : String
	= enumerationLiteral.name.toUpper()
/]

