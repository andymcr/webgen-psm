[comment encoding = UTF-8 /]
[module serviceModel_DatamapperOrm(
	'http://www.cs.man.ac.uk/mdsd/2013/GenCriteria',
	'http://www.cs.man.ac.uk/mdsd/2010/GenJsf',
	'http://www.cs.man.ac.uk/mdsd/2010/GenOrm',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::criteria/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::names/]


[template public generateDatamapperOrmModel(genService : GenService, genAuthentication : GenAuthentication)]
[file(genService.modelFilename(), false)]
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class [genService.modelName()/] extends DataMapper {

[if (genService.hasExplicitTableName())]
	public $table = '[genService.tableName()/]';

[/if]
[if (genService.hasModelSingletonAssociations())]
	public $has_one = array(
	[for (genFeature : GenSingletonAssociation | genService.modelSingletonAssociations())
			separator (',')]
		'[genFeature.columnName()/]' => array(
			'class' => '[genFeature.modelName()/]',
			'other_field' => '[genFeature.oppositeColumnName()/]'
		)
	[/for]
	);

[/if]
[if (genService.hasModelCollectionAssociations())]
	public $has_many = array(
	[for (genFeature : GenCollectionAssociation | genService.modelCollectionAssociations())
			separator (',')]
		'[genFeature.columnName()/]' => array(
			'class' => '[genFeature.modelName()/]',
			'other_field' => '[genFeature.oppositeColumnName()/]'
		)
	[/for]
	);

[/if]
[if (genService.hasInputFeatures() or genService.hasNonInputRequiredFeatures())]
	public $validation = array(
[for (genIncludedFeature : GenIncludedFeature | genService.inputFeatures())
			separator (',\n')]
		'[genIncludedFeature.columnName()/]' => array(
			'label' => '[genIncludedFeature.displayLabel()/]',
			'rules' => array([if (genIncludedFeature.isRequired())]'required', [/if]'trim'[if (genIncludedFeature.isCaseInsensitive())], 'strtolower'[/if][if (genIncludedFeature.isUnique())], 'unique'[/if][if (genIncludedFeature.isEncrypted())], 'encrypt'[/if])
		)[/for]
[if (genService.hasInputFeatures() and genService.hasNonInputRequiredFeatures())],
[/if]
[for (genIncludedFeature : GenIncludedFeature | genService.nonInputRequiredFeatures())
			separator (',\n')]
		'[genIncludedFeature.columnName()/]' => array(
			'label' => '[genIncludedFeature.displayLabel()/]',
			'rules' => array([if (genIncludedFeature.isRequired())]'required', [/if]'trim'[if (genIncludedFeature.isCaseInsensitive())], 'strtolower'[/if][if (genIncludedFeature.isUnique())], 'unique'[/if][if (genIncludedFeature.isEncrypted())], 'encrypt'[/if])
		)[/for]

	);

[/if]
[if (genService.hasDefaultValueFeatures())]
	public function __construct() {
		parent::__construct();
	[if (if genAuthentication.oclIsUndefined() then false else genAuthentication.oclIsTypeOf(GenLocalAuthenticationSystem) endif)]
	[let genLocalAuthentication : GenLocalAuthenticationSystem = genAuthentication.oclAsType(GenLocalAuthenticationSystem)]
		[if (genService <> genLocalAuthentication.genAuthenticationService)]
			[for (genIncludedFeature : GenIncludedSingletonElement | genService.defaultValueFeatures())]
		$this->[genIncludedFeature.columnName()/] = [genIncludedFeature.genDefaultValue.generateCriteria()/];
			[/for]
		[/if]
	[/let]
	[/if]
	}

[/if]
	public function displayLabel() {
[for (genFeature : GenIncludedFeature | genService.displayFeatures()->select(f | f.oclIsKindOf(GenIncludedAssociation)))]
		$this->[genFeature.columnName()/]->get();
[/for]
[if (genService.hasDisplayFeatures())]
		return [for (genFeature : GenIncludedFeature | genService.displayFeatures())
			separator(' . \' \' . ')]
[if (genFeature.oclIsKindOf(GenIncludedElement))]
$this->[genFeature.columnName()/][else]
$this->[genFeature.columnName()/]->displayLabel()[/if][/for];
[else]
		return (string) $this;
[/if]
	}

[if (genService.hasForcedValueFeatures())]
	public function validate(&$object = '', $related_field = '') {
	[for (genIncludedFeature : GenIncludedFeature | genService.forcedValueFeatures())]
		[if (genIncludedFeature.oclIsKindOf(GenIncludedSingletonElement))]
		$this->[genIncludedFeature.columnName()/] = [genIncludedFeature.oclAsType(GenIncludedSingletonElement).genForcedValue.generateCriteria()/];
		[else]
		$object['['/]'[genIncludedFeature.columnName()/]'[']'/] = [genIncludedFeature.oclAsType(GenIncludedSingletonAssociation).genForcedValue.generateCriteria()/];
		[/if]
	[/for]
		return parent::validate($object, $related_field);
	}

[/if]
[for (genSelection : GenSelection | genService.genSelections)]
	public function [genSelection.instanceName()/]($paging = TRUE, $page = 1, $pageSize = 10) {
	[if (not genSelection.genFilter.oclIsUndefined())]
		[genSelection.genFilter.generateCriteria()/]
	[/if]
	[for (genOrder : GenOrder | genSelection.genOrdering)]
		$this->order_by('[genOrder.generateCriteria()/]', '[if (genOrder.criteriaOrder.oclIsTypeOf(Asc))]asc[else]desc[/if]');
	[/for]
		if ($paging) {
			return $this->get_paged_iterated($page, $pageSize);
		} else {
			return $this->get_iterated();
		}
	}

[/for]
[if (if genAuthentication.oclIsUndefined() then false else genAuthentication.oclIsTypeOf(GenLocalAuthenticationSystem) endif)]
[let genLocalAuthentication : GenLocalAuthenticationSystem = genAuthentication.oclAsType(GenLocalAuthenticationSystem)]
	[if (genService = genLocalAuthentication.genAuthenticationService)]
	public function login() {
		// preserve fields altered by validation
		$email = $this->email;
		$password = $this->password;
		foreach (array([for (genIncludedFeature : GenServiceIncludedFeature | genService.genIncludedFeatures->select(f | f.isUnique())) separator(', ')]'[genIncludedFeature.columnName()/]'[/for]) as $field) {
			$this->validation['['/]$field[']'/]['['/]'rules'[']'/] = array_diff(
					$this->validation['['/]$field[']'/]['['/]'rules'[']'/],
					array('unique')
				);
		}
		foreach (array('username') as $field) {
			unset($this->validation['['/]$field[']'/]);
		}
		$x = new [genLocalAuthentication.genAuthenticationService.modelName()/]();
		$x->get_by_email($this->email);
		$this->salt = $x->salt;
		$this->validate();
		if ($this->valid) {
			$this->get();
		}
		$this->email = $email;
		$this->password = $password;

		return $this;
	}

	public function updateLoginDetail($ipAddress) {
		$this->ip_address = $ipAddress;
		$this->last_login = date('Y-m-d H:i:s');
		if (!$this->save()) {
			log_message('error', 'Problem updating login detail');
		}
	}

	[/if]
	[if (genService = genLocalAuthentication.genUserService)]
	public function authentication_save() {
		[for (genIncludedFeature : GenServiceIncludedFeature | genService.genIncludedFeatures->select(f | f.oclIsKindOf(GenServiceIncludedSingletonElement))->select(f | f.isRequired()))]
		if (!isset($this->[genIncludedFeature.columnName()/])) {
			$this->[genIncludedFeature.columnName()/] = '';
		}
		[/for]

		return $this->save();
	}

	[/if]
	[if (if genLocalAuthentication.genLoginAttemptService.oclIsUndefined() then false else genService = genLocalAuthentication.genLoginAttemptService endif)]
	public function getAttemptCount($authentication, $ipAddress, $expiryPeriod) {
		$this->group_start();
		$this->where('login_id', $authentication->[genLocalAuthentication.genLoginUnit.genLoginIdField.formFieldName()/]);
		$this->or_where('ip_address', $ipAddress);
		$this->group_end();
		if ($expiryPeriod > 0) {
			$this->where('UNIX_TIMESTAMP(time) >', time() - $expiryPeriod);
		}
		return $this->get()->result_count();
	}

	public function recordLoginAttempt($authentication, $ipAddress) {
		$this->login_id = $authentication->[genLocalAuthentication.genLoginUnit.genLoginIdField.formFieldName()/];
		$this->ip_address = $ipAddress;
		$this->time = date('Y-m-d H:i:s');
		if (!$this->save()) {
			log_message('error', 'Problem saving login attempt');
		}
	}

	public function clearLoginAttempts($authentication, $ipAddress, $expiryPeriod) {
		$this->where('login_id', $authentication->[genLocalAuthentication.genLoginUnit.genLoginIdField.formFieldName()/]);
		$this->where('ip_address', $ipAddress);
		if ($expiryPeriod > 0) {
			$this->or_where('UNIX_TIMESTAMP(time) <', time() - $expiryPeriod);
		}
		$this->get()->delete_all();
	}

	[/if]
	[if (if genLocalAuthentication.genAutoLoginService.oclIsUndefined() then false else genService = genLocalAuthentication.genAutoLoginService endif)]
	public function getAutoAuthentication($key, $loginId, $userAgent, $ipAddress) {
		$this->where('key', $key);
		$this->where('user_agent', substr($userAgent, 0, 150));
		$this->where_related_authentication('[genLocalAuthentication.genLoginUnit.genLoginIdField.formFieldName()/]', $loginId);
		$this->get();
		if ($this->exists()) {
			return $this->authentication;
		} else {
			return new [genLocalAuthentication.genAuthenticationService.modelName()/]();;
		}
	}

	public function recordAutoLoginDetail($key, $authentication, $userAgent, $ipAddress) {
		$this->key = $key;
		$this->user_agent = substr($userAgent, 0, 150);
		$this->last_ip_address = $ipAddress;
		$this->last_login = date('Y-m-d H:i:s');
		if ($this->save(array('authentication' => $authentication))) {
			return $this;
		} else {
			log_message('error', 'Problem saving auto login detail');
			return FALSE;
		}
	}

	public function clearAutoLoginDetails($loginId) {
		if (!empty($loginId)) {
			$this->where_related_authentication('[genLocalAuthentication.genLoginUnit.genLoginIdField.formFieldName()/]', $loginId);
			$this->get()->delete_all();
		}
	}

	[/if]
[/let]
[/if]
}
[/file]
[/template]
