[comment encoding = UTF-8 /]
[module criteria(
	'http://www.cs.man.ac.uk/mdsd/2013/GenCriteria',
	'http://www.cs.man.ac.uk/mdsd/2010/GenJsf',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria')]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::names/]


[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenIntegerLiteral)) post(trim())]
[let literal : GenIntegerLiteral = criteria.oclAsType(GenIntegerLiteral)]
[literal.criteriaLiteral.value/]
[/let]
[/template]

[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenStringLiteral)) post(trim())]
[let literal : GenStringLiteral = criteria.oclAsType(GenStringLiteral)]
'[literal.criteriaLiteral.value/]'
[/let]
[/template]


[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenFunction)) post(trim())]
[let function : GenFunction = criteria.oclAsType(GenFunction)]
[function.criteriaFunction.name/]('Y-m-d H:i:s')
[/let]
[/template]


[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenModelReference)) post(trim())]
[let path : GenModelReference = criteria.oclAsType(GenModelReference)]
$this->[path.genUnit.instanceName()/]
[/let]
[/template]

[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenFieldReference)) post(trim())]
[let path : GenFieldReference = criteria.oclAsType(GenFieldReference)]
[path.genField.columnName()/]
[/let]
[/template]

[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenCurrentUserReference)) post(trim())]
[let path : GenCurrentUserReference = criteria.oclAsType(GenCurrentUserReference)]
$this->loggedInUser
[/let]
[/template]


[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenPredicateBooleanOperator)) post(trim())]
[let predicate : GenPredicateBooleanOperator = criteria.oclAsType(GenPredicateBooleanOperator)]
[for (expression : GenExpression | predicate.genExpressions)]
[expression.generateCriteria()/]
[/for]
[/let]
[/template]

[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenPredicateComparisonOperator)) post(trim())]
[let predicate : GenPredicateComparisonOperator = criteria.oclAsType(GenPredicateComparisonOperator)]
[predicate.genLeft.generateCriteria()/] [predicate.criteriaPredicate.operator.generateOperator()/] [predicate.genRight.generateCriteria()/]
[/let]
[/template]

[template public generateCriteria(criteria : GenExpression)
	? (criteria.oclIsTypeOf(GenPredicateEqualityOperator)) post(trim())]
[let predicate : GenPredicateEqualityOperator = criteria.oclAsType(GenPredicateEqualityOperator)]
[if (predicate.genLeft.oclIsTypeOf(GenFieldReference))]
	[if (predicate.genLeft.oclAsType(GenFieldReference).genField.oclIsKindOf(GenIncludedAssociation))]
$this->where_related_[predicate.genLeft.generateCriteria()/]([predicate.genRight.generateCriteria()/]);
	[else]
$this->where('[predicate.genLeft.generateCriteria()/]', [predicate.genRight.generateCriteria()/]);
	[/if]
[elseif (predicate.genRight.oclIsTypeOf(GenFieldReference))]
	[if (predicate.genRight.oclAsType(GenFieldReference).genField.oclIsKindOf(GenIncludedAssociation))]
$this->where_related_[predicate.genRight.generateCriteria()/]([predicate.genLeft.generateCriteria()/]);
	[else]
$this->where('[predicate.genLeft.generateCriteria()/]', [predicate.genRight.generateCriteria()/]);
	[/if]
[else]
[predicate.genLeft.generateCriteria()/] = [predicate.genRight.generateCriteria()/]
[/if]
[/let]
[/template]

[query public generateOperator(operator : BooleanOperator) : String
	= if operator = BooleanOperator::And then
			'AND'
		else if operator = BooleanOperator::Or then
			'OR'
		else
			'?'
		endif endif
/]

[query public generateOperator(operator : ComparisionOperator) : String
	= if operator = ComparisionOperator::GreaterThan then
			'>'
		else if operator = ComparisionOperator::LessThan then
			'<'
		else
			'?'
		endif endif
/]


[template public generateCriteria(criteria : GenOrder) post(trim())]
[let order : GenOrder = criteria.oclAsType(GenOrder)]
[order.genPath.generateCriteria()/]
[/let]
[/template]

