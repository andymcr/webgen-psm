[comment encoding = UTF-8 /]
[module mysql_schema(
	'http://www.cs.man.ac.uk/mdsd/2010/GenOrm',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::criteria/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::names/]


[template public generateMySqlSchema(genModel : GenOrmModel)]
[file (genModel.configDirectory().concat('/').concat('mySqlSchema.ddl'), false)]
CREATE TABLE IF NOT EXISTS  `ci_sessions` (
	`session_id` varchar(40) NOT NULL DEFAULT '0',
	`ip_address` varchar(45) NOT NULL DEFAULT '0',
	`user_agent` varchar(120) NOT NULL,
	`last_activity` int(10) unsigned NOT NULL DEFAULT 0,
	`user_data` text NOT NULL,
	PRIMARY KEY (session_id),
	KEY `last_activity_idx` (`last_activity`)
);

[for (genEntity : GenEntity | genModel.genEntities)]
CREATE TABLE IF NOT EXISTS `[genEntity.tableName()/]` (
	`[genEntity.keyName/]` INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY[if (genEntity.genFeatures->notEmpty())],[/if]
	[for (genFeature : GenFeature | genEntity.tableColumns())]
	[genFeature.generateColumn(genEntity)/],
	[/for]
	`created` datetime not null,
	`updated` datetime
);

[/for]
[for (genAssociation : GenCollectionAssociation | genModel.manyToManyAssociations())]
CREATE TABLE IF NOT EXISTS `[genAssociation.tableName()/]` (
	`[genAssociation.columnName()/]_[genAssociation.genParentEntity.keyName/]` INT(11) NOT NULL,
	`[genAssociation.oppositeColumnName()/]_[genAssociation.genOpposite.genParentEntity.keyName/]` INT(11) NOT NULL
);

[/for]
[/file]
[/template]


[template protected generateColumn(genFeature : GenFeature, genEntity : GenEntity)
	? (genFeature.isDataTypeSingletonElement()) post(trim())]
[let genSingletonFeature : GenSingletonElement = genFeature.oclAsType(GenSingletonElement)]
`[genSingletonFeature.columnName/]` [if (genSingletonFeature.genDataType.persistenceType = 'string')]
varchar(255)[elseif (genSingletonFeature.genDataType.persistenceType = 'textblock')]
varchar(4000)[elseif (genSingletonFeature.genDataType.persistenceType = 'binary')]
blob[elseif (genSingletonFeature.genDataType.persistenceType = 'boolean')]
tinyint(1)[else]
[genSingletonFeature.genDataType.persistenceType/][/if][if
	(genSingletonFeature.ormFeature.required)] NOT NULL[/if][if
	(not genSingletonFeature.ormFeature.defaultValue.oclIsUndefined())] DEFAULT '[genSingletonFeature.genDefaultValue.generateCriteria()/]'[/if]
[/let]
[/template]

[template protected generateColumn(genFeature : GenFeature, genEntity : GenEntity)
	? (genFeature.isEnumerationTypeSingletonElement()) post(trim())]
[let genSingletonFeature : GenSingletonElement = genFeature.oclAsType(GenSingletonElement)]
`[genSingletonFeature.columnName/]` int(8) [if 
	(genSingletonFeature.ormFeature.required)] NOT NULL[/if][if
	(not genSingletonFeature.ormFeature.defaultValue.oclIsUndefined())] DEFAULT '[genSingletonFeature.genDefaultValue.generateCriteria()/]'[/if]
[/let]
[/template]

[template protected generateColumn(genFeature : GenFeature, genEntity : GenEntity)
	? (genFeature.oclIsTypeOf(GenSingletonDate)) post(trim())]
[let genSingletonFeature : GenSingletonDate = genFeature.oclAsType(GenSingletonDate)]
`[genSingletonFeature.columnName/]` [if (genSingletonFeature.ormFeature.details = DateDetails::DateOnly)]
DATE[elseif (genSingletonFeature.ormFeature.details = DateDetails::TimeOnly)]
TIME[else]
DATETIME[/if][if (genSingletonFeature.ormFeature.required)] NOT NULL[/if][if
	(not genSingletonFeature.ormFeature.defaultValue.oclIsUndefined())] DEFAULT '[genSingletonFeature.genDefaultValue.generateCriteria()/]'[/if]
[/let]
[/template]

[template protected generateColumn(genFeature : GenFeature, genEntity : GenEntity)
	? (genFeature.oclIsTypeOf(GenSingletonAssociation)) post(trim())]
[let genSingletonFeature : GenSingletonAssociation = genFeature.oclAsType(GenSingletonAssociation)]
`[genSingletonFeature.columnName/]_[genEntity.keyName/]` INT(11)
[/let]
[/template]
