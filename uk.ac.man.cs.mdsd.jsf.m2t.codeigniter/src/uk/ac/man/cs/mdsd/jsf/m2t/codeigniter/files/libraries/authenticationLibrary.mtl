[comment encoding = UTF-8 /]
[module authenticationLibrary('http://www.cs.man.ac.uk/mdsd/2010/GenJsf')/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::codeigniter::common::names/]


[template public generateAuthenticationLibrary(genAuthentication : GenLocalAuthenticationSystem)]
[file(genAuthentication.authenticationLibraryFilename(), false)]
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Tank_auth
 *
 * Authentication library for Code Igniter.
 *
 * @package		Tank_auth
 * @author		Ilya Konyukhov (http://konyukhov.com/soft/)
 * @version		1.0.9
 * @based on	DX Auth by Dexcell (http://dexcell.shinsengumiteam.com/dx_auth)
 * @license		MIT License Copyright (c) 2008 Erick Hartanto
 */
class Authentication_Lib {
	private $error = array();

	function __construct() {
		$this->CI =& get_instance();
		$this->CI->load->config('authentication', TRUE);
[if (not genAuthentication.genAutoLoginService.oclIsUndefined())]
		$this->autoLoginCookieName = $this->CI->config->item('autologin_cookie_name', 'authentication');
		$this->autoLoginCookieLifetime = $this->CI->config->item('autologin_cookie_lifetime', 'authentication');
		$this->autoLogin();
[/if]
	}

	function setLoggedIn($authentication) {
		$this->CI->session->set_userdata(array(
				'user_id' => $authentication->id,
				'username' => $authentication->username
			));
	}

	function isLoggedIn() {
		return $this->CI->session->userdata('username');
	}

	function logout() {
		// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
[if (not genAuthentication.genAutoLoginService.oclIsUndefined())]
		$this->deleteAutoLogin();
[/if]

		// See http://codeigniter.com/forums/viewreply/662369/ as the reason for the next line
		$this->CI->session->set_userdata(array('user_id' => '', 'username' => ''));

		$this->CI->session->sess_destroy();
	}

	function getUserId() {
		return $this->CI->session->userdata('user_id');
	}

	function getUsername() {
		return $this->CI->session->userdata('username');
	}

	/**
	 * Change email for activation and return some data about user:
	 * user_id, username, email, new_email_key.
	 * Can be called for not activated users only.
	 *
	 * @param	string
	 * @return	array
	 */
	function change_email($email)
	{
		$user_id = $this->CI->session->userdata('user_id');

		if (!is_null($user = $this->CI->users->get_user_by_id($user_id, FALSE))) {

			$data = array(
				'user_id'	=> $user_id,
				'username'	=> $user->username,
				'email'		=> $email,
			);
			if (strtolower($user->email) == strtolower($email)) {		// leave activation key as is
				$data['['/]'new_email_key'[']'/] = $user->new_email_key;
				return $data;

			} elseif ($this->CI->users->is_email_available($email)) {
				$data['['/]'new_email_key'[']'/] = md5(rand().microtime());
				$this->CI->users->set_new_email($user_id, $email, $data['['/]'new_email_key'[']'/], FALSE);
				return $data;

			} else {
				$this->error = array('email' => 'auth_email_in_use');
			}
		}
		return NULL;
	}

	/**
	 * Activate user using given key
	 *
	 * @param	string
	 * @param	string
	 * @param	bool
	 * @return	bool
	 */
	function activate_user($user_id, $activation_key, $activate_by_email = TRUE)
	{
		$this->CI->users->purge_na($this->CI->config->item('email_activation_expire', 'tank_auth'));

		if ((strlen($user_id) > 0) AND (strlen($activation_key) > 0)) {
			return $this->CI->users->activate_user($user_id, $activation_key, $activate_by_email);
		}
		return FALSE;
	}

	/**
	 * Set new password key for user and return some data about user:
	 * user_id, username, email, new_pass_key.
	 * The password key can be used to verify user when resetting his/her password.
	 *
	 * @param	string
	 * @return	array
	 */
	function forgot_password($login)
	{
		if (strlen($login) > 0) {
			if (!is_null($user = $this->CI->users->get_user_by_login($login))) {

				$data = array(
					'user_id'		=> $user->id,
					'username'		=> $user->username,
					'email'			=> $user->email,
					'new_pass_key'	=> md5(rand().microtime()),
				);

				$this->CI->users->set_password_key($user->id, $data['['/]'new_pass_key'[']'/]);
				return $data;

			} else {
				$this->error = array('login' => 'auth_incorrect_email_or_username');
			}
		}
		return NULL;
	}

	/**
	 * Check if given password key is valid and user is authenticated.
	 *
	 * @param	string
	 * @param	string
	 * @return	bool
	 */
	function can_reset_password($user_id, $new_pass_key)
	{
		if ((strlen($user_id) > 0) AND (strlen($new_pass_key) > 0)) {
			return $this->CI->users->can_reset_password(
				$user_id,
				$new_pass_key,
				$this->CI->config->item('forgot_password_expire', 'tank_auth'));
		}
		return FALSE;
	}

	/**
	 * Replace user password (forgotten) with a new one (set by user)
	 * and return some data about it: user_id, username, new_password, email.
	 *
	 * @param	string
	 * @param	string
	 * @return	bool
	 */
	function reset_password($user_id, $new_pass_key, $new_password)
	{
		if ((strlen($user_id) > 0) AND (strlen($new_pass_key) > 0) AND (strlen($new_password) > 0)) {

			if (!is_null($user = $this->CI->users->get_user_by_id($user_id, TRUE))) {

				// Hash password using phpass
				$hasher = new PasswordHash(
						$this->CI->config->item('phpass_hash_strength', 'tank_auth'),
						$this->CI->config->item('phpass_hash_portable', 'tank_auth'));
				$hashed_password = $hasher->HashPassword($new_password);

				if ($this->CI->users->reset_password(
						$user_id,
						$hashed_password,
						$new_pass_key,
						$this->CI->config->item('forgot_password_expire', 'tank_auth'))) {	// success

					// Clear all user's autologins
					$this->CI->load->model('tank_auth/user_autologin');
					$this->CI->user_autologin->clear($user->id);

					return array(
						'user_id'		=> $user_id,
						'username'		=> $user->username,
						'email'			=> $user->email,
						'new_password'	=> $new_password,
					);
				}
			}
		}
		return NULL;
	}

	/**
	 * Change user password (only when user is logged in)
	 *
	 * @param	string
	 * @param	string
	 * @return	bool
	 */
	function change_password($old_pass, $new_pass)
	{
		$user_id = $this->CI->session->userdata('user_id');

		if (!is_null($user = $this->CI->users->get_user_by_id($user_id, TRUE))) {

			// Check if old password correct
			$hasher = new PasswordHash(
					$this->CI->config->item('phpass_hash_strength', 'tank_auth'),
					$this->CI->config->item('phpass_hash_portable', 'tank_auth'));
			if ($hasher->CheckPassword($old_pass, $user->password)) {			// success

				// Hash new password using phpass
				$hashed_password = $hasher->HashPassword($new_pass);

				// Replace old password with new one
				$this->CI->users->change_password($user_id, $hashed_password);
				return TRUE;

			} else {															// fail
				$this->error = array('old_password' => 'auth_incorrect_password');
			}
		}
		return FALSE;
	}

	/**
	 * Change user email (only when user is logged in) and return some data about user:
	 * user_id, username, new_email, new_email_key.
	 * The new email cannot be used for login or notification before it is activated.
	 *
	 * @param	string
	 * @param	string
	 * @return	array
	 */
	function set_new_email($new_email, $password)
	{
		$user_id = $this->CI->session->userdata('user_id');

		if (!is_null($user = $this->CI->users->get_user_by_id($user_id, TRUE))) {

			// Check if password correct
			$hasher = new PasswordHash(
					$this->CI->config->item('phpass_hash_strength', 'tank_auth'),
					$this->CI->config->item('phpass_hash_portable', 'tank_auth'));
			if ($hasher->CheckPassword($password, $user->password)) {			// success

				$data = array(
					'user_id'	=> $user_id,
					'username'	=> $user->username,
					'new_email'	=> $new_email,
				);

				if ($user->email == $new_email) {
					$this->error = array('email' => 'auth_current_email');

				} elseif ($user->new_email == $new_email) {		// leave email key as is
					$data['['/]'new_email_key'[']'/] = $user->new_email_key;
					return $data;

				} elseif ($this->CI->users->is_email_available($new_email)) {
					$data['['/]'new_email_key'[']'/] = md5(rand().microtime());
					$this->CI->users->set_new_email($user_id, $new_email, $data['['/]'new_email_key'[']'/], TRUE);
					return $data;

				} else {
					$this->error = array('email' => 'auth_email_in_use');
				}
			} else {															// fail
				$this->error = array('password' => 'auth_incorrect_password');
			}
		}
		return NULL;
	}

	/**
	 * Activate new email, if email activation key is valid.
	 *
	 * @param	string
	 * @param	string
	 * @return	bool
	 */
	function activate_new_email($user_id, $new_email_key)
	{
		if ((strlen($user_id) > 0) AND (strlen($new_email_key) > 0)) {
			return $this->CI->users->activate_new_email(
					$user_id,
					$new_email_key);
		}
		return FALSE;
	}

	/**
	 * Delete user from the site (only when user is logged in)
	 *
	 * @param	string
	 * @return	bool
	 */
	function delete_user($password)
	{
		$user_id = $this->CI->session->userdata('user_id');

		if (!is_null($user = $this->CI->users->get_user_by_id($user_id, TRUE))) {

			// Check if password correct
			$hasher = new PasswordHash(
					$this->CI->config->item('phpass_hash_strength', 'tank_auth'),
					$this->CI->config->item('phpass_hash_portable', 'tank_auth'));
			if ($hasher->CheckPassword($password, $user->password)) {			// success

				$this->CI->users->delete_user($user_id);
				$this->logout();
				return TRUE;

			} else {															// fail
				$this->error = array('password' => 'auth_incorrect_password');
			}
		}
		return FALSE;
	}

[if (not genAuthentication.genAutoLoginService.oclIsUndefined())]
	private function autoLogin() {
		// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
		if (!$this->isLoggedIn()) {
			$this->CI->load->helper('cookie');
			$cookie = get_cookie($this->autoLoginCookieName, TRUE);
			if ($cookie) {
				$data = unserialize($cookie);
				if (isset($data['['/]'key'[']'/]) AND isset($data['['/]'user_id'[']'/])) {
					$autoLogin = new [genAuthentication.genAutoLoginService.modelName()/]();
					$authentication = $autoLogin->getAutoAuthentication(
						md5($data['['/]'key'[']'/]), $data['['/]'user_id'[']'/],
						$this->CI->input->user_agent(), $this->CI->input->ip_address());
					if ($authentication->exists()) {
log_message('debug', 'auto logged in '.$data['['/]'user_id'[']'/]);
						$this->setLoggedIn($authentication);
						$authentication->updateLoginDetail($this->CI->input->ip_address());
//						// Renew users cookie to prevent it from expiring
//						set_cookie(array(
//								'name' => $this->autoLoginCookieName,
//								'value' => $cookie,
//								'expire' => $this->autoLoginCookieLifetime
//							));
						return TRUE;
					}
				}
			}
		}
		return FALSE;
	}

	public function createAutoLogin($authentication) {
		// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
		$this->CI->load->helper('cookie');
		$key = substr(md5(uniqid(rand().get_cookie($this->CI->config->item('sess_cookie_name')))), 0, 16);
		$autoLogin = new [genAuthentication.genAutoLoginService.modelName()/]();
		$autoLogin->recordAutoLoginDetail($key, $authentication,
			$this->CI->input->user_agent(), $this->CI->input->ip_address());
		if ($autoLogin->exists()) {
			set_cookie(array(
					'name' => $this->autoLoginCookieName,
					'value' => serialize(array(
							'user_id' => $authentication->[genAuthentication.genLoginUnit.genLoginIdField.formFieldName()/],
							'key' => $key
						)),
					'expire' => $this->autoLoginCookieLifetime
				));
		}
	}

	private function deleteAutoLogin() {
		// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
		$this->CI->load->helper('cookie');
		$cookie = get_cookie($this->autoLoginCookieName);
		if ($cookie) {
			$data = unserialize($cookie);
			$autoLogin = new [genAuthentication.genAutoLoginService.modelName()/]();
			$autoLogin->clearAutoLoginDetails($data['['/]'user_id'[']'/]);
			delete_cookie($this->autoLoginCookieName);
		}
	}

[/if]
	public function sendEmail($type, $usersEmail, $data) {
		// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
		$siteTitle = $this->CI->config->item('site_title', 'site');
		$webmasterEmail = $this->CI->config->item('webmaster_email', 'site');
		$this->CI->load->library('email');
		$this->CI->email->from($webmasterEmail, $siteTitle);
		$this->CI->email->reply_to($webmasterEmail, $siteTitle);
		$this->CI->email->to($usersEmail);
		$this->CI->email->subject(sprintf($this->CI->lang->line('auth_subject_'.$type), $siteTitle));
		$this->CI->email->message($this->CI->load->view('email/'.$type.'_html', $data, TRUE));
		$this->CI->email->set_alt_message($this->CI->load->view('email/'.$type.'_text', $data, TRUE));
		$this->CI->email->send();
	}

}

/* End of file Tank_auth.php */
/* Location: ./application/libraries/Tank_auth.php */
[/file]
[/template]
