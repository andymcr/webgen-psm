@Ecore(
	nsURI="http://andycarpenter.work/metamodel/ObjectRelationalMapping",
	nsPrefix="orm"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.orm.edit/src",
	editPluginID="work.andycarpenter.metamodel.orm.edit",
	childCreationExtenders="true",
	editorDirectory="/work.andycarpenter.metamodel.orm.editor/src")
package work.andycarpenter.metamodel.orm

import work.andycarpenter.metamodel.base.Classifier
import work.andycarpenter.metamodel.base.ConstantContainer
import work.andycarpenter.metamodel.base.DataType
import work.andycarpenter.metamodel.base.EnumerationType
import work.andycarpenter.metamodel.base.FormalParameterList
import work.andycarpenter.metamodel.base.NamedDisplayElement
import work.andycarpenter.metamodel.base.NamedElement
import work.andycarpenter.metamodel.expression.Expression
import work.andycarpenter.metamodel.expression.Predicate
import work.andycarpenter.metamodel.expression.Variable

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


class OrmModel {
	contains SerializationGroup[] serializationGroups
	contains unique DataType[] dataTypes
// TODO	@OCL(derivation="dataTypes->select(t | t.oclIsKindOf(base::EnumerationType)).oclAsType(base::EnumerationType)->asOrderedSet()")
// TODO	refers derived readonly unsettable transient volatile unique EnumerationType[] enumerationTypes
	refers derived readonly unsettable transient volatile unique EnumerationType[] enumerationTypes get {
		dataTypes.filter[it instanceof EnumerationType].map[it as EnumerationType].toEList()
	}
	contains Entity[] entities opposite partOf
	contains Repository[] repositories opposite partOf
	contains CollectionType[] collectionTypes
	DatabaseTechnologies databaseTechnology = "MySql"
	OrmTechnologies ormTechnology
	boolean timestampCreation
	boolean timestampUpdates
	boolean hasCustomOrmTypes
}

enum Cardinality {
	Optional
	Required = 1
	Many = 2
}

enum DatabaseTechnologies {
	MySql
	Oracle = 1
}

enum IsHasChoices {
	isA
	hasA = 1
}

enum OrmTechnologies {
	JPA
	DataMapper = 1
	Idiorm = 2
	Kohana = 3
	DoctrineORM = 4
	DoctrineODM = 5
}

enum CollectionTypes {
	Bag
	List
	OrderedSet
	Set
}

class CollectionType extends NamedElement {
	CollectionTypes collectionType
	refers Classifier[1] elementType
}

class SerializationGroup extends NamedElement {
}



class Entity extends Classifier {
	container OrmModel[1] partOf opposite entities

	String singletonName
	String pluralisedName

	refers Repository repository opposite serves
	contains unique Feature[] allFeatures opposite partOf
	refers unique Feature[] ^keys
	@OCL(derivation="allFeatures->select(f | f.isVisible)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Feature[] features
	@OCL(derivation="features->select(f | f.isPrimaryKey)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Feature[] primaryKeys
	@OCL(derivation="primaryKeys->notEmpty()")
	derived readonly unsettable transient volatile boolean hasPrimaryKeys
	@OCL(derivation="features->select(f | f.hasDefaultValue)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Feature[] featuresWithDefaultValue
	@OCL(derivation="featuresWithDefaultValue->notEmpty()")
	derived readonly unsettable transient volatile boolean hasFeaturesWithDefaultValue
	@OCL(derivation="features->select(f | f.isAttributeFeature).oclAsType(Attribute)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Attribute[] attributes
	@OCL(derivation="attributes->notEmpty()")
	derived readonly unsettable transient volatile boolean hasAttributes
	@OCL(derivation="keys->select(k | k.isAttributeFeature).oclAsType(Attribute)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Attribute[] attributeKeys
	@OCL(derivation="attributeKeys->notEmpty()")
	derived readonly unsettable transient volatile boolean hasAttributeKeys
	@OCL(derivation="features->select(f | f.isResourceFeature).oclAsType(ResourceFeature)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique ResourceFeature[] resourceFeatures
	@OCL(derivation="resourceFeatures->notEmpty()")
	derived readonly unsettable transient volatile boolean hasResourceAttributes
	@OCL(derivation="attributes->select(a | a.isUnique)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Attribute[] uniqueAttributes
	@OCL(derivation="uniqueAttributes->notEmpty()")
	derived readonly unsettable transient volatile boolean hasUniqueAttributes
	@OCL(derivation="attributes->select(a | a.isContainerUnique)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Attribute[] containerUniqueAttributes
	@OCL(derivation="features->select(f | f.isAssociationFeature).oclAsType(Association)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Association[] associations
	@OCL(derivation="associations->notEmpty()")
	derived readonly unsettable transient volatile boolean hasAssociations
	@OCL(derivation="keys->select(k | k.isAssociationFeature).oclAsType(Association)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Association[] associationKeys
	@OCL(derivation="associationKeys->notEmpty()")
	derived readonly unsettable transient volatile boolean hasAssociationKeys

	@OCL(derivation="associations->any(a | a.isContainer = true)")
	refers derived readonly unsettable transient volatile Association containingAssociation

	@OCL(derivation="if containingAssociation.oclIsUndefined() then null else containingAssociation.targetType endif")
	refers derived readonly unsettable transient volatile Entity containingType

	@OCL(derivation="not containingType.oclIsUndefined()")
	derived readonly unsettable transient volatile boolean isContained
	@OCL(derivation="associations->select(a | not a.isSingleton)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Association[] collectionAssociations
	@OCL(derivation="collectionAssociations->notEmpty()")
	derived readonly unsettable transient volatile boolean hasCollectionAssociations
	@OCL(derivation="attributes->select(a | a.isDateFeature)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Attribute[] dateAttributes
	@OCL(derivation="dateAttributes->notEmpty()")
	derived readonly unsettable transient volatile boolean hasDateAttributes
	@OCL(derivation="attributes->select(a | a.hasSlugFields)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Attribute[] slugAttributes
	@OCL(derivation="slugAttributes->notEmpty()")
	derived readonly unsettable transient volatile boolean hasSlugAttributes
	@OCL(derivation="features->select(f | f.isValidated)->asOrderedSet()")
	refers derived readonly unsettable  transient volatile unique Feature[] validatedFeatures
	@OCL(derivation="validatedFeatures->notEmpty()")
	derived readonly unsettable transient volatile boolean hasValidatedFeatures
	@OCL(derivation="features->select(f | f.hasColumn)->asOrderedSet()")
	refers derived readonly unsettable transient volatile unique Feature[] tableColumns
	String tableName
	String autoKeyName
	String autoKeyPersistentType
	String autoKeyGenerationStrategy
	refers unique Feature[] ^unique
	refers unique Feature[] containerUnique
	contains ModelLabel[] labels opposite labelFor
	@OCL(derivation="labels->select(l | l.name = 'default')->notEmpty()")
	derived readonly unsettable transient volatile boolean hasDefaultLabel
	boolean implementsUserInterface = "false"
	boolean implementsForumUser = "false"
	boolean implementsResetPasswordInterface = "false"
}


interface Label {
}

class ModelLabel extends NamedElement, Label {
	container Entity[1] labelFor opposite labels
	String[1] format
	boolean customise
	contains ModelLabelFeature[] features
}

abstract class ModelLabelFeature {
}

class ModelLabelAttribute extends ModelLabelFeature {
	refers Attribute[1] attribute
	String dateFormat
}

class ModelLabelAssociation extends ModelLabelFeature {
	refers Association[1] association
	refers ModelLabel valueDisplay
}


abstract class Feature extends NamedDisplayElement {
	container Entity[1] partOf opposite allFeatures
	Cardinality cardinality
	CollectionTypes collectionType
	boolean isPrimaryKey
	boolean isDerived
	boolean customiseSet
	String singletonName
	String pluralisedName
	String columnName
	boolean[1] encodeUriKey
	boolean collectionOrmAllowAdd
	boolean collectionOrmAllowRemove
	@OCL(derivation="self.oclIsTypeOf(Association)")
	derived readonly unsettable transient volatile boolean isAssociationFeature
	@OCL(derivation="self.oclIsKindOf(Attribute)")
	derived readonly unsettable transient volatile boolean isAttributeFeature
	refers SerializationGroup[] serializationGroups
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isBooleanDataType else false endif")
	derived readonly unsettable transient volatile boolean isBooleanFeature
	@OCL(derivation="self.oclIsTypeOf(DataTypeAttribute)")
	derived readonly unsettable transient volatile boolean isDataTypeFeature
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType else null endif")
	refers derived readonly unsettable transient volatile Classifier dataType
	@OCL(derivation="self.oclIsTypeOf(DateAttribute)")
	derived readonly unsettable transient volatile boolean isDateFeature
	@OCL(derivation="if self.oclIsTypeOf(DateAttribute) then self.oclAsType(DateAttribute).details else null endif")
	derived readonly unsettable transient volatile DateDetails dateDetails
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isEmailDataType else false endif")
	derived readonly unsettable transient volatile boolean isEmailFeature

	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then
			self.oclAsType(DataTypeAttribute).attributeDataType.isEnumerationType
		else
			false
		endif")
	derived readonly unsettable transient volatile boolean isEnumerationFeature

	//OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.oclAsType(_'http://andycarpenter.work/metamodel/base'::EnumerationType) else null endif")
//	refers derived readonly unsettable transient volatile EnumerationType enumerationType
	refers derived readonly transient volatile EnumerationType enumerationType get {
		if (isEnumerationFeature)
			(this as DataTypeAttribute).attributeDataType as EnumerationType
	}
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isIntegerDataType else false endif")
	derived readonly unsettable transient volatile boolean isIntegerFeature
	@OCL(derivation="self.oclIsTypeOf(LocationFeature)")
	derived readonly unsettable transient volatile boolean isLocationFeature
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).obfuscateFormFields else false endif")
	derived readonly unsettable transient volatile boolean isObfuscatedFeature
	@OCL(derivation="self.oclIsKindOf(ResourceFeature)")
	derived readonly unsettable transient volatile boolean isResourceFeature
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isStringDataType else false endif")
	derived readonly unsettable transient volatile boolean isStringFeature
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isTextareaDataType else false endif")
	derived readonly unsettable transient volatile boolean isTextareaFeature
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).attributeDataType.isUrlDataType else false endif")
	derived readonly unsettable transient volatile boolean isUrlFeature
	@OCL(derivation="if self.oclIsKindOf(Attribute) then self.oclAsType(Attribute).attributeDefaultValue else null endif")
	refers derived readonly unsettable transient volatile Expression defaultValue
	@OCL(derivation="not self.defaultValue.oclIsUndefined()")
	derived readonly unsettable transient volatile boolean hasDefaultValue
	@OCL(derivation="hasValidationPattern -- || hasPlaceholder")
	derived readonly unsettable transient volatile boolean hasHtml5Attributes
	@OCL(derivation="self.oclIsKindOf(Attribute) or self.isOwningEnd")
	derived readonly unsettable transient volatile boolean hasColumn
	@OCL(derivation="if self.oclIsTypeOf(Association) then self.oclAsType(Association).associationOwningEnd else false endif")
	derived readonly unsettable transient volatile boolean isOwningEnd
	@OCL(derivation="if self.oclIsKindOf(Attribute) then self.oclAsType(Attribute).slugFields->notEmpty() else false endif")
	derived readonly unsettable transient volatile boolean hasSlugFields
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then not self.oclAsType(DataTypeAttribute).validationPattern.oclIsUndefined() else false endif")
	derived readonly unsettable transient volatile boolean hasValidationPattern
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then not self.oclAsType(DataTypeAttribute).caseInsensitive else false endif")
	derived readonly unsettable transient volatile boolean isCaseInsensitive
	@OCL(derivation="if self.oclIsTypeOf(Association) then self.oclAsType(Association).associationContainer else false endif")
	derived readonly unsettable transient volatile boolean isContainer
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).containerUnique else false endif")
	derived readonly unsettable transient volatile boolean isContainerUnique
	@OCL(derivation="if self.oclIsTypeOf(Association) then self.oclAsType(Association).associationContains else false endif")
	derived readonly unsettable transient volatile boolean isContains
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).encrypt else false endif")
	derived readonly unsettable transient volatile boolean isEncrypted
	@OCL(derivation="cardinality = Cardinality::Required")
	derived readonly unsettable transient volatile boolean isRequired
	@OCL(derivation="cardinality <> Cardinality::Many")
	derived readonly unsettable transient volatile boolean isSingleton
	@OCL(derivation="if self.oclIsTypeOf(DataTypeAttribute) then self.oclAsType(DataTypeAttribute).unique else false endif")
	derived readonly unsettable transient volatile boolean isUnique
	@OCL(derivation="self.isRequired or self.isContains")
	derived readonly unsettable transient volatile boolean isValidated
	@OCL(derivation="if self.oclIsKindOf(Attribute) then true else if self.oclIsKindOf(Association) then self.oclAsType(Association).visible else true endif endif")
	derived readonly unsettable transient volatile boolean isVisible
//	derived readonly unsettable transient volatile boolean hasSerializationControl get {
//		if (this instanceof Attribute)
//			(this as Attribute).hasSerializationControlAttribute
//		else if (this instanceof Association)
//			(this as Association).hasSerializationControlAssociation
//		else
//			false 
//	}
}

abstract class Attribute extends Feature, Label {
	contains Expression attributeDefaultValue
	boolean hidden
	IsHasChoices booleanIsHasChoice
	refers Attribute[] slugFields
	@OCL(derivation="self.serializationGroups->size() > 0")
	derived readonly unsettable transient volatile boolean hasSerializationControlAttribute
}

class DataTypeAttribute extends Attribute {
	refers DataType[1] attributeDataType
	boolean obfuscateFormFields
	boolean caseInsensitive
	boolean encrypt
	boolean ^unique
	boolean containerUnique
	String validationPattern
}

enum DateDetails {
	DateOnly = 1
	TimeOnly = 2
	DateAndTime = 3
}

class DateAttribute extends Attribute {
	DateDetails details
}

abstract class ResourceFeature extends Feature {
	int maximumUploadSize
	unique String[] validUploadMimeTypes
	unique String[] validUploadExtensions
	boolean uploadsWithinWebsite
	contains PathElement[] uploadPath
}

abstract class PathElement {
}

class StaticPathElement extends PathElement {
	String[1] element
}

class DatePathElement extends PathElement {
	String[1] format
}

class FileResource extends ResourceFeature {
}

class ImageResource extends ResourceFeature {
}

class LocationFeature extends Feature {
}

enum AssociationRelationships {
	OneToOne = 0
	ManyToOne = 1
	OneToMany = 2
	ManyToMany = 3
}

@Ecore(constraints="onlyOneOwningEnd")
@OCL(onlyOneOwningEnd="associationOwningEnd xor opposite.associationOwningEnd")
class Association extends Feature {
	refers Association[1] ^opposite
	contains AssociationKey[] ^keys opposite keyFor
	boolean[1] associationContainer
	boolean[1] associationContains
	boolean[1] associationOwningEnd
	boolean[1] visible = "true"
	AssociationRelationships associationRelationship
	int[1] serializationMaxDepth = "1"
	String pivotTableName
	@OCL(derivation="if not opposite.oclIsUndefined() then opposite.isSingleton else false endif")
	derived readonly unsettable transient volatile boolean isOppositeSingleton
	@OCL(derivation="if not opposite.oclIsUndefined() then opposite.columnName else null endif")
	derived readonly unsettable transient volatile String oppositeColumnName
	@OCL(derivation="self.partOf")
	refers derived readonly unsettable transient volatile Entity sourceType
	@OCL(derivation="if not opposite.oclIsUndefined() then opposite.sourceType else null endif")
	refers derived readonly unsettable transient volatile Entity targetType
	@OCL(derivation="self.serializationGroups->size() > 0 or self.serializationMaxDepth > 0")
	derived readonly unsettable transient volatile boolean hasSerializationControlAssociation
}

abstract class AssociationReference {
	refers Association[1] association

	@OCL(derivation="if not association.oclIsUndefined() then
			association.name
		else
			''
		endif")
	derived String name

	refers ModelLabel valueDisplay
	contains FeatureChildPath childFeature
}

abstract class FeatureChildPath {
}

class SingletonAssociation extends Association {
}

class AssociationKey {
	container Association[1] keyFor opposite ^keys
	refers Feature[1] sourceFeature
	refers Feature targetFeature
}


class Repository extends NamedElement, ConstantContainer {
	refers OrmModel[1] partOf opposite repositories
	refers Entity serves opposite repository
	contains Selection[] selections opposite definedBy
	refers Selection findAll
	refers Selection findOne
}

class Selection extends NamedElement, FormalParameterList {
	container Repository definedBy opposite selections
	boolean distinct
	refers Feature[] fields
	refers Association[] joins
	contains Predicate condition
	contains Filter[] filters opposite selection
	contains Order[] ordering
	int limit = "0"
	refers Feature[] grouping
	refers Association[] selectPath
	String methodName
	@OCL(derivation="if selectPath->isEmpty() then definedBy.serves else selectPath->last().targetType endif")
	refers derived readonly unsettable transient volatile Entity selectionType
	@OCL(derivation="parameters->notEmpty()")
	derived readonly unsettable transient volatile boolean hasFormals
	@OCL(derivation="(limit = 0 or limit > 1) and (joins->isEmpty() or fields->isEmpty())")
	derived readonly unsettable transient volatile boolean hasPaginationSupport
}

class FeatureReference extends Variable { 
	refers Feature[1] feature 
}


abstract class Order {
	contains Variable[1] path
}

class Asc extends Order {
}

class Desc extends Order {
}

class Filter extends NamedDisplayElement, FormalParameterList {
	refers Selection selection opposite filters
	contains Predicate condition
	String methodName
}
