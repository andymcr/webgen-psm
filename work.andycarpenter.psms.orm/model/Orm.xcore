@Ecore(
	nsURI="http://andycarpenter.work/metamodel/ObjectRelationalMapping",
	nsPrefix="orm"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.orm.edit/src",
	editPluginID="work.andycarpenter.metamodel.orm.edit",
	childCreationExtenders="true",
	complianceLevel="6.0")
package work.andycarpenter.metamodel.orm

import work.andycarpenter.metamodel.base.Classifier
import work.andycarpenter.metamodel.base.ConstantContainer
import work.andycarpenter.metamodel.base.DataType
import work.andycarpenter.metamodel.base.EnumerationType
import work.andycarpenter.metamodel.base.FormalParameterList
import work.andycarpenter.metamodel.base.NamedDisplayElement
import work.andycarpenter.metamodel.base.NamedElement
import work.andycarpenter.metamodel.expression.Expression
import work.andycarpenter.metamodel.expression.Predicate
import work.andycarpenter.metamodel.expression.Variable

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


class OrmModel {
	contains SerializationGroup[] serializationGroups
	contains DataType[] dataTypes
	refers derived readonly transient volatile EnumerationType[] enumerationTypes get {
		dataTypes.filter[it instanceof EnumerationType].map[it as EnumerationType].toEList()
	}
	contains Entity[] entities opposite partOf
	contains Repository[] repositories opposite partOf
	contains CollectionType[] collectionTypes
	DatabaseTechnologies databaseTechnology = "MySql"
	OrmTechnologies ormTechnology
	boolean timestampCreation
	boolean timestampUpdates
	boolean hasCustomOrmTypes
}

enum Cardinality {
	Optional
	Required = 1
	Many = 2
}

enum DatabaseTechnologies {
	MySql
	Oracle = 1
}

enum IsHasChoices {
	isA
	hasA = 1
}

enum OrmTechnologies {
	JPA
	DataMapper = 1
	Idiorm = 2
	Kohana = 3
	DoctrineORM = 4
	DoctrineODM = 5
}

enum CollectionTypes {
	Bag
	List
	OrderedSet
	Set
}

class CollectionType extends NamedElement {
	CollectionTypes collectionType
	refers Classifier[1] elementType
}

class SerializationGroup extends NamedElement {
}



class Entity extends Classifier {
	container OrmModel[1] partOf opposite entities
	String[1] singletonName
	String[1] pluralisedName
	refers Repository repository opposite serves
	contains Feature[] allFeatures opposite partOf
	refers Feature[] ^keys
	refers derived readonly transient volatile Feature[] features get {
		allFeatures.filter[isVisible].toEList()
	}
	refers derived readonly transient volatile Feature[] primaryKeys get {
		features.filter[isPrimaryKey].toEList()
	}
	derived readonly transient volatile boolean hasPrimaryKeys get {
		!primaryKeys.isEmpty()
	}
	refers derived readonly transient volatile Feature[] featuresWithDefaultValue get {
		features.filter[hasDefaultValue].toEList()
	}
	derived readonly transient volatile boolean hasFeaturesWithDefaultValue get {
		!featuresWithDefaultValue.isEmpty()
	}
	refers derived readonly transient volatile Attribute[] attributes get {
		features.filter[it instanceof Attribute].map[it as Attribute].toEList()
	}
	derived readonly transient volatile boolean hasAttributes get {
		!attributes.isEmpty()
	}
	refers derived readonly transient volatile Attribute[] attributeKeys get {
		keys.filter[it instanceof Attribute].map[it as Attribute].toEList()
	}
	derived readonly transient volatile boolean hasAttributeKeys get {
		!attributeKeys.isEmpty()
	}
	refers derived readonly transient volatile ResourceFeature[] resourceFeatures get {
		features.filter[it instanceof ResourceFeature].map[it as ResourceFeature].toEList()
	}
	derived readonly transient volatile boolean hasResourceAttributes get {
		!resourceFeatures.isEmpty()
	}
	refers derived readonly transient volatile Attribute[] uniqueAttributes get {
		attributes.filter[isUnique].toEList()
	}
	derived readonly transient volatile boolean hasUniqueAttributes get {
		!uniqueAttributes.isEmpty()
	}
	refers derived readonly transient volatile Attribute[] containerUniqueAttributes get {
		attributes.filter[isContainerUnique].toEList()
	}
	refers derived readonly transient volatile Association[] associations get {
		features.filter[it instanceof Association].map[it as Association].toEList()
	}
	derived readonly transient volatile boolean hasAssociations get {
		!associations.isEmpty()
	}
	refers derived readonly transient volatile Association[] associationKeys get {
		keys.filter[it instanceof Association].map[it as Association].toEList()
	}
	derived readonly transient volatile boolean hasAssociationKeys get {
		!associationKeys.isEmpty()
	}
	refers derived readonly transient volatile Association containingAssociation get {
		associations.findFirst[isContainer]
	}
	refers derived readonly transient volatile Entity containingType get {
		containingAssociation?.targetType
	}
	derived readonly transient volatile boolean isContained get {
		containingType !== null
	}
	refers derived readonly transient volatile Association[] collectionAssociations get {
		associations.filter[!isSingleton].toEList()
	}
	derived readonly transient volatile boolean hasCollectionAssociations get {
		!collectionAssociations.isEmpty()
	}
	refers derived readonly transient volatile Attribute[] dateAttributes get {
		attributes.filter[it.isDateFeature].toEList()
	}
	derived readonly transient volatile boolean hasDateAttributes get {
		!dateAttributes.isEmpty()
	}
	refers derived readonly transient volatile Attribute[] slugAttributes get {
		attributes.filter[hasSlugFields].toEList()
	}
	derived readonly transient volatile boolean hasSlugAttributes get {
		!slugAttributes.isEmpty()
	}
	refers derived readonly transient volatile Feature[] validatedFeatures get {
		features.filter[isValidated].toEList()
	}
	derived readonly transient volatile boolean hasValidatedFeatures get {
		!validatedFeatures.isEmpty()
	}
	refers derived readonly transient volatile Feature[] tableColumns get {
		features.filter[hasColumn].toEList()
	}
	String tableName
	String autoKeyName
	String autoKeyPersistentType
	String autoKeyGenerationStrategy
	refers Feature[] ^unique
	refers Feature[] containerUnique
	contains ModelLabel[] labels opposite labelFor
	derived readonly transient volatile boolean hasDefaultLabel get {
		!labels.filter[name == 'default'].isEmpty()
	}
	boolean implementsUserInterface = "false"
	boolean implementsForumUser = "false"
	boolean implementsResetPasswordInterface = "false"
}


interface Label {
}

class ModelLabel extends NamedElement, Label {
	container Entity[1] labelFor opposite labels
	String[1] format
	boolean customise
	contains ModelLabelFeature[] features
}

abstract class ModelLabelFeature {
}

class ModelLabelAttribute extends ModelLabelFeature {
	refers Attribute[1] attribute
	String[1] dateFormat
}

class ModelLabelAssociation extends ModelLabelFeature {
	refers Association[1] association
	refers ModelLabel valueDisplay
}


abstract class Feature extends NamedDisplayElement {
	container Entity[1] partOf opposite allFeatures
	Cardinality cardinality
	CollectionTypes collectionType
	boolean isPrimaryKey
	boolean isDerived
	boolean customiseSet
	String[1] singletonName
	String[1] pluralisedName
	IsHasChoices booleanIsHasChoice
	String[1] columnName
	boolean[1] encodeUriKey
	boolean collectionOrmAllowAdd
	boolean collectionOrmAllowRemove
	refers SerializationGroup[] serializationGroups
	derived readonly transient volatile boolean isBooleanFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).attributeDataType.isBooleanDataType
		else
			false
	}
	derived readonly transient volatile boolean isDataTypeFeature get {
		this instanceof DataTypeAttribute
	}
	refers derived readonly transient volatile Classifier dataType get {
		if (isDataTypeFeature)
			(this as DataTypeAttribute).attributeDataType
	}
	derived readonly transient volatile boolean isDateFeature get {
		this instanceof DateAttribute
	}
	derived readonly transient volatile DateDetails dateDetails get {
		if (this instanceof DateAttribute)
			(this as DateAttribute).details
	}
	derived readonly transient volatile boolean isEmailFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).attributeDataType.isEmailDataType
		else
			false
	}
	derived readonly transient volatile boolean isEnumerationFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).attributeDataType.isEnumerationType
		else
			false
	}
	refers derived readonly transient volatile EnumerationType enumerationType get {
		if (isEnumerationFeature)
			(this as DataTypeAttribute).attributeDataType as EnumerationType
	}
	derived readonly transient volatile boolean isIntegerFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).attributeDataType.isIntegerDataType
		else
			false
	}
	derived readonly transient volatile boolean isLocationFeature get {
		this instanceof LocationFeature
	}
	derived readonly transient volatile boolean isObfuscatedFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).obfuscateFormFields
		else
			false
	}
	derived readonly transient volatile boolean isResourceFeature get {
		this instanceof ResourceFeature
	}
	derived readonly transient volatile boolean isStringFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).attributeDataType.isStringDataType
		else
			false
	}
	derived readonly transient volatile boolean isTextareaFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).attributeDataType.isTextareaDataType
		else
			false
	}
	derived readonly transient volatile boolean isUrlFeature get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).attributeDataType.isUrlDataType
		else
			false
	}
	refers derived readonly transient volatile Expression defaultValue get {
		if (this instanceof Attribute)
			(this as Attribute).attributeDefaultValue
	}
	derived readonly transient volatile boolean hasDefaultValue get {
		defaultValue !== null
	}
	derived readonly transient volatile boolean hasHtml5Attributes get {
		hasValidationPattern // || hasPlaceholder
	}
	derived readonly transient volatile boolean hasColumn get {
		this instanceof Attribute || isOwningEnd
	}
	derived readonly transient volatile boolean isOwningEnd get {
		if (this instanceof Association)
			(this as Association).associationOwningEnd
		else
			false
	}
	derived readonly transient volatile boolean hasSlugFields get {
		if (this instanceof Attribute)
			(this as Attribute).slugFields.size > 0
		else
			false
	}
	derived readonly transient volatile boolean hasValidationPattern get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).validationPattern !== null
		else
			false
	}
	derived readonly transient volatile boolean isCaseInsensitive get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).caseInsensitive
		else
			false
	}
	derived readonly transient volatile boolean isContainer get {
		if (this instanceof Association)
			(this as Association).associationContainer
		else
			false
	}
	derived readonly transient volatile boolean isContainerUnique get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).containerUnique
		else
			false
	}
	derived readonly transient volatile boolean isContains get {
		if (this instanceof Association)
			(this as Association).associationContains
		else
			false
	}
	derived readonly transient volatile boolean isEncrypted get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).encrypt
		else
			false
	}
	derived readonly transient volatile boolean isRequired get {
		cardinality.literal == 'Required'
	}
	derived readonly transient volatile boolean isSingleton get {
		cardinality.literal !== 'Many'
	}
	derived readonly transient volatile boolean isUnique get {
		if (this instanceof DataTypeAttribute)
			(this as DataTypeAttribute).unique
		else
			false
	}
	derived readonly transient volatile boolean isValidated get {
		isRequired || isContains /* isUnique is an entity property */
	}
	derived readonly transient volatile boolean isVisible get {
		if (this instanceof Attribute)
			true
		else if (this instanceof Association)
			(this as Association).visible
		else
			true
	}
	derived readonly transient volatile boolean hasSerializationControl get {
		if (this instanceof Attribute)
			(this as Attribute).hasSerializationControlAttribute
		else if (this instanceof Association)
			(this as Association).hasSerializationControlAssociation
		else
			false 
	}
}

abstract class Attribute extends Feature, Label {
	contains Expression attributeDefaultValue
	boolean hidden
	refers Attribute[] slugFields
	derived readonly transient volatile boolean hasSerializationControlAttribute get {
		serializationGroups.size > 0 
	}
}

class DataTypeAttribute extends Attribute {
	refers DataType[1] attributeDataType
	boolean obfuscateFormFields
	boolean caseInsensitive
	boolean encrypt
	boolean ^unique
	boolean containerUnique
	String validationPattern
}

enum DateDetails {
	DateOnly = 1
	TimeOnly = 2
	DateAndTime = 3
}

class DateAttribute extends Attribute {
	DateDetails details
}

abstract class ResourceFeature extends Feature {
	int maximumUploadSize
	unique String[] validUploadMimeTypes
	unique String[] validUploadExtensions
	boolean uploadsWithinWebsite
	contains PathElement[] uploadPath
}

abstract class PathElement {
}

class StaticPathElement extends PathElement {
	String[1] element
}

class DatePathElement extends PathElement {
	String[1] format
}

class FileResource extends ResourceFeature {
}

class ImageResource extends ResourceFeature {
}

class LocationFeature extends Feature {
}

enum AssociationRelationships {
	OneToOne = 0
	ManyToOne = 1
	OneToMany = 2
	ManyToMany = 3
}

//@Ecore(constraints="onlyOneOwningEnd")
//@OCL(onlyOneOwningEnd="associationOwningEnd xor opposite.associationOwningEnd")
class Association extends Feature {
	refers Association[1] ^opposite
	contains AssociationKey[] ^keys opposite keyFor
	boolean[1] associationContainer
	boolean[1] associationContains
	boolean[1] associationOwningEnd
	boolean[1] visible = "true"
	AssociationRelationships associationRelationship
	int[1] serializationMaxDepth = "1"
	String pivotTableName
	derived readonly transient volatile boolean isOppositeSingleton get {
		opposite.isSingleton
	}
	derived readonly transient volatile String oppositeColumnName get {
		opposite?.columnName
	}
	refers derived readonly transient volatile Entity sourceType get {
		partOf
	}
	refers derived readonly transient volatile Entity targetType get {
		opposite?.sourceType
	}
	derived readonly transient volatile boolean hasSerializationControlAssociation get {
		serializationGroups.size > 0 || serializationMaxDepth > 0
	}
}

abstract class AssociationReference {
	derived String name get {
		association?.name
	}
	refers Association[1] association
	refers ModelLabel valueDisplay
	contains FeatureChildPath childFeature
}

abstract class FeatureChildPath {
}

class SingletonAssociation extends Association {
}

class AssociationKey {
	container Association[1] keyFor opposite ^keys
	refers Feature[1] sourceFeature
	refers Feature targetFeature
}


class Repository extends NamedElement, ConstantContainer {
	refers OrmModel[1] partOf opposite repositories
	refers Entity serves opposite repository
	contains Selection[] selections opposite definedBy
	refers Selection findAll
	refers Selection findOne
}

class Selection extends NamedElement, FormalParameterList {
	container Repository definedBy opposite selections
	boolean distinct
	refers Feature[] fields
	refers Association[] joins
	contains Predicate condition
	contains Filter[] filters opposite selection
	contains Order[] ordering
	int limit = "0"
	refers Feature[] grouping
	refers Association[] selectPath
	String methodName
	refers derived readonly transient volatile Entity selectionType get {
		if (selectPath.isEmpty())
			definedBy.serves
		else
			selectPath.last().targetType
	}
	derived readonly transient volatile boolean hasFormals get {
		!parameters.isEmpty()
	}
	derived readonly transient volatile boolean hasPaginationSupport get {
		(limit == 0 || limit > 1)
			&& (joins.isEmpty() || fields.isEmpty())
	}
}

class FeatureReference extends Variable { 
	refers Feature[1] feature 
}


abstract class Order {
	contains Variable[1] path
}

class Asc extends Order {
}

class Desc extends Order {
}

class Filter extends NamedDisplayElement, FormalParameterList {
	refers Selection selection opposite filters
	contains Predicate condition
	String methodName
}
