@Ecore(
	nsURI="http://cs.manchester.ac.uk/mdsd/ObjectRelationalMapping",
	nsPrefix="orm"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.psms.orm.edit/src",
	editPluginID="work.andycarpenter.psms.orm.edit",
	childCreationExtenders="true",
	complianceLevel="6.0")
package work.andycarpenter.psms.orm

import work.andycarpenter.psms.expression.Expression

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL

class OrmModel {
	contains SerializationGroup[] serializationGroups
	contains DataType[] dataTypes
	contains Entity[] entities opposite partOf
	contains CollectionType[] collectionTypes
	DatabaseTechnologies databaseTechnology = "MySql"
	OrmTechnologies ormTechnology
	boolean timestampCreation
	boolean timestampUpdates
	boolean hasCustomOrmTypes
}

enum Cardinality {
	Optional
	Required = 1
	Many = 2
}

enum DatabaseTechnologies {
	MySql
	Oracle = 1
}

enum IsHasChoices {
	isA
	hasA = 1
}

enum OrmTechnologies {
	JPA
	DataMapper = 1
	Idiorm = 2
	Kohana = 3
	DoctrineORM = 4
	DoctrineODM = 5
}

abstract class NamedElement {
	String[1] name
}

abstract class NamedDisplayElement extends NamedElement {
	String[1] displayLabel
}

abstract class Classifier extends NamedDisplayElement {
}

enum CollectionTypes {
	Bag
	List
	OrderedSet
	Set
}

class CollectionType extends NamedElement {
	CollectionTypes collectionType
	refers Classifier[1] elementType
	String[1] persistenceType
	String[1] javaInterfaceType
	String[1] javaImplementationType
}

class SerializationGroup extends NamedElement {
}

class DataType extends Classifier {
}

class EnumerationType extends DataType {
	contains EnumerationLiteral[] enumerations
}

class EnumerationLiteral extends NamedDisplayElement {
}


class Entity extends Classifier {
	container OrmModel[1] partOf opposite entities
	String[1] singletonName
	String[1] pluralisedName
	contains Feature[] features opposite partOf
	refers Feature[] ^keys
	String tableName
	String autoKeyName
	String autoKeyPersistentType
	String autoKeyGenerationStrategy
	refers Feature[] ^unique
	refers Feature[] containerUnique
	contains ModelLabel[] labels opposite labelFor
	boolean implementsUserInterface = "false"
	boolean implementForumUser = "false"
	boolean allowFormTypeCustomisation = "false"
}


interface Label {
}

class ModelLabel extends NamedElement, Label {
	container Entity[1] labelFor opposite labels
	String[1] format
	boolean customise
	contains ModelLabelFeature[] features
}

abstract class ModelLabelFeature {
}

class ModelLabelAttribute extends ModelLabelFeature {
	refers Attribute[1] attribute
	String[1] dateFormat
}

class ModelLabelAssociation extends ModelLabelFeature {
	refers Association[1] association
	refers ModelLabel dynamicLabel
}


abstract class Feature extends NamedDisplayElement {
	container Entity[1] partOf opposite features
	Cardinality cardinality
	boolean primaryKey
	boolean ^derived
	boolean customiseSet
	String[1] singletonName
	String[1] pluralisedName
	IsHasChoices booleanIsHasChoice
	String[1] columnName
	boolean[1] encodeUriKey = "false"
	boolean collectionOrmAllowAdd = "false"
	boolean collectionOrmAllowRemove = "false"
	refers SerializationGroup[] serializationGroups
}

abstract class Attribute extends Feature, Label {
	contains Expression defaultValue
	refers Attribute[] slugFields
	String validationPattern
	boolean hidden
	String[1] persistentType
	String[1] ormType
}

abstract class SingletonAttribute extends Attribute {
	boolean ^unique
	boolean containerUnique
}

abstract class CollectionAttribute extends Attribute {
}

class SingletonElement extends SingletonAttribute {
	refers DataType[1] dataType
	boolean obfuscateFormFields
	boolean caseInsensitive
	boolean encrypt
}

class CollectionElement extends CollectionAttribute {
	refers CollectionType[1] collectionType
}

enum DateDetails {
	DateOnly = 1
	TimeOnly = 2
	DateAndTime = 3
}

interface DateAttribute {
	DateDetails details
}

class SingletonDate extends SingletonAttribute, DateAttribute {
}

class CollectionDate extends CollectionAttribute, DateAttribute {
}

class SingletonURL extends SingletonAttribute {
	String displayValue
}

abstract class SingletonResource extends SingletonAttribute {
	int maximumUploadSize
	unique String[] validUploadMimeTypes
	unique String[] validUploadExtensions
	boolean uploadsWithinWebsite
	contains PathElement[] uploadPath
}

abstract class PathElement {
}

class StaticPathElement extends PathElement {
	String[1] element
}

class DatePathElement extends PathElement {
	String[1] format
}

class SingletonFile extends SingletonResource {
}

class SingletonImage extends SingletonResource {
}

class SingletonLocation extends SingletonAttribute {
}

@Ecore(constraints="onlyOneOwningEnd")
@OCL(onlyOneOwningEnd="owningEnd xor opposite.owningEnd")
abstract class Association extends Feature {
	refers Association[1] ^opposite
	boolean pseudo
	contains AssociationKey[] ^keys opposite keyFor
	boolean[1] ^container = "false"
	boolean[1] ^contains = "false"
	boolean[1] owningEnd = "false"
	boolean[1] visible = "true"
	Integer[1] serializationMaxDepth = "1"
	String pivotTableName
}

enum SingletonAssociationRelationships {
	OneToOne
	ManyToOne = 1
}

class SingletonAssociation extends Association {
	SingletonAssociationRelationships associationRelationship
}

enum CollectionAssociationRelationships {
	OneToMany
	ManyToMany = 1
}

@Ecore(constraints="x")
@OCL(x="collectionType.elementType = opposite.partOf")
class CollectionAssociation extends Association {
	refers CollectionType[1] collectionType
	CollectionAssociationRelationships associationRelationship
}

class AssociationKey {
	container Association[1] keyFor opposite ^keys
	refers Feature[1] sourceFeature
	refers Feature targetFeature
}