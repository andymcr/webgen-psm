@Ecore(
	nsURI="http://andycarpenter.work/metamodel/WebApplicationFramework",
	nsPrefix="waf"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.waf.edit/src",
	editPluginID="work.andycarpenter.metamodel.waf.edit",
	childCreationExtenders="true",
	editorDirectory="/work.andycarpenter.metamodel.waf.editor/src",
	testsDirectory="/work.andycarpenter.metamodel.waf.tests/src",
	complianceLevel="17.0"
)
package work.andycarpenter.metamodel.waf

import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.common.util.ECollections
import work.andycarpenter.metamodel.api.API
import work.andycarpenter.metamodel.base.Classifier
import work.andycarpenter.metamodel.base.DataType
import work.andycarpenter.metamodel.base.EnumerationType
import work.andycarpenter.metamodel.base.NamedDisplayElement
import work.andycarpenter.metamodel.base.NamedElement
import work.andycarpenter.metamodel.expression.Expression
import work.andycarpenter.metamodel.expression.Predicate
import work.andycarpenter.metamodel.orm.Association
import work.andycarpenter.metamodel.orm.AssociationPathElement
import work.andycarpenter.metamodel.orm.Attribute
import work.andycarpenter.metamodel.orm.AttributePathElement
import work.andycarpenter.metamodel.orm.DateDetails
import work.andycarpenter.metamodel.orm.Entity
import work.andycarpenter.metamodel.orm.Filter
import work.andycarpenter.metamodel.orm.Label
import work.andycarpenter.metamodel.orm.LocationFeature
import work.andycarpenter.metamodel.orm.ModelLabel
import work.andycarpenter.metamodel.orm.OrmModel
import work.andycarpenter.metamodel.orm.Path
import work.andycarpenter.metamodel.orm.Repository
import work.andycarpenter.metamodel.orm.ResourceFeature
import work.andycarpenter.metamodel.orm.ResourcePathElement
import work.andycarpenter.metamodel.orm.Selection
import work.andycarpenter.metamodel.security.AuthorisationExpression
import work.andycarpenter.metamodel.security.SecurityModel
import work.andycarpenter.metamodel.service.BusinessOperation
import work.andycarpenter.metamodel.service.Service
import work.andycarpenter.metamodel.service.ServiceModel

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


enum FrameworkTechnologies {
	JSF
	CakePHP = 1
	CodeIgniter = 2
	Kohana = 3
	Laravel = 4
	Symfony = 5
}

class WafModel {
	contains SiteProperties siteProperties
	refers OrmModel[1] persistence
	refers SecurityModel security
	refers ServiceModel[1] business
	refers API api
	contains ImageManipulation[] imageManipulations
	contains Navigation navigation opposite partOf
	contains Controller[] controllers opposite partOf
	String defaultSaveLabel
	String defaultCancelLabel

	@OCL(derivation="not api.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAPI

	@OCL(derivation="controllers->collect(c | c.editUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile EditUnit[] editUnits

	@OCL(derivation="editUnits->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasEditUnits

	@OCL(derivation="controllers->collect(c | c.formUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile SingletonUnit[] formUnits

	@OCL(derivation="formUnits->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasFormUnits

	@OCL(derivation="controllers->collect(c | c.imageUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile ImageUnit[] imageUnits

	@OCL(derivation="imageUnits->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasImageUnits

	@OCL(derivation="controllers->collect(c | c.imageCardsUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile ImageCardsUnit[] imageCardsUnits

	@OCL(derivation="imageCardsUnits->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasImageCardsUnits

	@OCL(derivation="controllers->collect(c | c.autocompleteFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitAssociation[] autocompleteFields
	@OCL(derivation="autocompleteFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAutocompleteFields

	@OCL(derivation="controllers->collect(c | c.formFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] formFields

	@OCL(derivation="formFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasFormFields

	@OCL(derivation="formFields->select(f | f.isAssociationField())->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasFormAssociations

	@OCL(derivation="controllers->select(c | c.hasResourceFields())->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasResourceFields

	@OCL(derivation="if self.security.oclIsUndefined() then false else security.isAuthenticated endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isAuthenticated

	boolean useFormFloatingLabels = 'false'

    @GenModel(propertyCategory="Style")
	String defaultPageClass = ''
    contains DefaultUnitStyles defaultUnitStyles
    contains CardsUnitStyles defaultCardsStyles
    contains ImageCardsUnitStyles defaultImageCardsStyles
    contains ControlUnitStyles defaultControlStyles
    contains DetailsUnitStyles defaultDetailsStyles
    contains FormUnitStyles defaultFormStyles
    contains GalleryUnitStyles defaultGalleryStyles
    contains SliderUnitStyles defaultSliderStyles
    contains StaticUnitStyles defaultStaticStyles
    contains TabularUnitStyles defaultTabularStyles

	@OCL(derivation="self")
     @GenModel(propertyCategory="Debug")
   	refers readonly transient volatile unsettable derived WafModel genModel

	@OCL(derivation="self")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived WafModel uiModel
}

class SiteProperties {
	String[1] siteName
	String[1] siteTitle
	String[1] locale
	String webmasterEmail
	String copyrightText
	String metaDescription
	String logoImage
	refers ImageManipulation logoFilters
	FrameworkTechnologies frameworkTechnology
	boolean useDbSessionStorage
	String textEditorURL
	String siteTemplate
	String securityFromEmail = ''
	String securityFromName = ''
	boolean staticUnitsEditable
}

class Navigation {
	refers WafModel[1] partOf opposite navigation
	contains Menu[] menus opposite definedBy
	
	String navbarClass = "navbar"
	@OCL(derivation="navbarClass.trim() <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasNavbarClass

	AuthenticationMenuPlacement authenticationMenuPlacement
	String authenticationBarClass = "nav"
	@OCL(derivation="authenticationBarClass.trim() <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAuthenticationBarClass
}

enum AuthenticationMenuPlacement {
	Above = 0
	Below = 1
	Integrated = 2
}

class Menu extends NamedDisplayElement {
	refers Navigation[1] definedBy opposite menus
	contains MenuEntry[] entries opposite partOf
	boolean omitCaption
	String styleClass
	String captionClass
	String layoutClass
}

abstract class MenuEntry {
	container Menu[1] partOf opposite entries
}

class SubmenuEntry extends Menu, MenuEntry {
	contains AuthorisationExpression authorisation
	@OCL(derivation="not authorisation.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isAuthorised
	@OCL(derivation="entries
		->select(e | e.oclIsTypeOf(ActionMenuEntry)).oclAsType(ActionMenuEntry)
		->exists(e | e.alwaysVisible = true)")
    @GenModel(propertyCategory="Debug")
	boolean alwaysVisible
}

class ActionMenuEntry extends MenuEntry, NamedDisplayElement {
	refers ContentUnit[1] action
	boolean alwaysVisible = "false"
}

class EditStaticTextMenuEntry extends MenuEntry, NamedDisplayElement {
}


abstract class ContentUnitStyles {
	String sectionClass = ''
	String captionClass = ''
	String contentClass = ''
}

abstract class DynamicUnitStyles extends ContentUnitStyles {
	String fieldListClass = ''
	String definitionFieldListClass = ''
	String fieldLabelClass = ''
	String fieldValueClass = ''
	String controlClass = ''
	String anchorClass = ''
}

class CollectionUnitStyles extends DynamicUnitStyles {
	String instanceControlClass = ''
	String instanceActionClass = ''
}

class DefaultUnitStyles extends CollectionUnitStyles {
}

class CardsUnitStyles extends CollectionUnitStyles {
	String cardClass = ''
	String cardHeaderClass = ''
	String cardBodyClass = ''
	String cardFooterClass = ''
	String badgeClass = ''
}

class ImageCardsUnitStyles extends CardsUnitStyles {
	String imageActionClass = ''
}

class ControlUnitStyles extends DynamicUnitStyles {
}

class DetailsUnitStyles extends DynamicUnitStyles {
}

class FormUnitStyles extends DynamicUnitStyles {
	String inputGroupClass = ''
}

class GalleryUnitStyles extends CollectionUnitStyles {
}

class SliderUnitStyles extends CollectionUnitStyles {
}

class StaticUnitStyles extends ContentUnitStyles {
}

class TabularUnitStyles extends CollectionUnitStyles {
	String headerClass = ''
	String footerClass = ''
}


abstract class DisplayElement {
	String[1] displayLabel = ''
}


class ImageManipulation extends NamedElement {
	int jpegQuality = "-1"
	contains ImageFilter[] filters
}

abstract class ImageFilter {
}

enum BackgroundPositions {
	TopLeft = 0,
	Top = 1,
	TopRight = 2,
	Left = 3,
	Center = 4,
	Right = 5,
	BottomLeft = 6,
	Bottom = 7,
	BottomRight = 8
}

class BackgroundFilter extends ImageFilter {
	String color
	int width
	int height
	BackgroundPositions position
}


enum ThumbnailModes {
	Crop = 0,
	Resize = 1
}

class ThumbnailFilter extends ImageFilter {
	int width
	int height
	ThumbnailModes mode
}


abstract class Controller extends NamedDisplayElement {
	container WafModel partOf opposite controllers

	refers Controller parentController opposite childControllers

	refers Controller[] childControllers opposite parentController

	contains ContentUnit[] units opposite controller

	op boolean hasUnits() {
		!units.isEmpty()
	}

	@OCL(derivation="self.oclIsTypeOf(SinglePageController)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isSinglePage
	

	@OCL(derivation="self.oclIsTypeOf(MultiPageController)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isMultiPage
	
	op AuthorisationExpression commonAuthorisation() {
		if (!hasUnits()) {
			null
		} else if (hasCommonUnitAuthorisation) {
			units.head.authorisation
		} else {
			null
		}
	}

	op boolean isAuthorised() {
		commonAuthorisation() !== null
	}

	op boolean hasAuthorisation() {
		isAuthorised() || units.exists[u | u.hasAuthorisation()]
	}

	op boolean hasCommonUnitAuthorisation() {
		if (units.forall[u | !u.isAuthorised()]) {
			true
		} else if (!units.forall[u | u.isAuthorised()]) {
			false
		} else if (units.size < 2) {
			true
		} else {
			units.drop(1).forall[u | u.authorisation.areSame(units.head.authorisation)]
		}
	}

	op boolean hasChangableCollections() {
		!editUnits().filter[it.hasChangableCollections].isEmpty()
	}

	op boolean hasCaptchaUnits() {
		!editUnits().filter[it.hasCaptcha].isEmpty()
	}

	@OCL(derivation="units->select(u | u.oclIsKindOf(CollectionUnit)).oclAsType(CollectionUnit)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived CollectionUnit[] collectionUnits
	@OCL(derivation="collectionUnits->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasCollectionUnits

	op DynamicUnit[] dynamicUnits() {
		units.filter[it instanceof DynamicUnit].map[it as DynamicUnit].toEList()
	}
	op boolean hasDynamicUnits() {
		!dynamicUnits().isEmpty()
	}

	op EditUnit[] editUnits() {
		dynamicUnits().filter[it instanceof EditUnit].map[it as EditUnit].toEList()
	}
	op boolean hasEditUnits() {
		!editUnits().isEmpty()
	}

	op SingletonUnit[] formUnits() {
		dynamicUnits().filter[it.isFormUnit].map[it as SingletonUnit].toEList()
	}
	op boolean hasFormUnits() {
		!formUnits().isEmpty()
	}

	op boolean hasFilters() {
		!collectionUnits.filter[it.hasFilters].isEmpty()
	}

	op GalleryUnit[] galleryUnits() {
		dynamicUnits().filter[it instanceof GalleryUnit].map[it as GalleryUnit].toEList()
	}
	op boolean hasGalleryUnits() {
		!galleryUnits().isEmpty()
	}

	op TabularUnit[] tabularUnits() {
		dynamicUnits().filter[it instanceof TabularUnit].map[it as TabularUnit].toEList()
	}
	op boolean hasTabularUnits() {
		!tabularUnits().isEmpty()
	}

	op ImageUnit[] imageUnits() {
		dynamicUnits().filter[it instanceof ImageUnit].map[it as ImageUnit].toEList()
	}
	op boolean hasImageUnits() {
		!imageUnits().isEmpty()
	}

	op ImageCardsUnit[] imageCardsUnits() {
		imageUnits().filter[it instanceof ImageCardsUnit].map[it as ImageCardsUnit].toEList()
	}
	op boolean hasImageCardsUnits() {
		!imageCardsUnits().isEmpty()
	}

	op MapUnit[] mapUnits() {
		dynamicUnits().filter[it instanceof MapUnit].map[it as MapUnit].toEList()
	}
	op boolean hasMapUnits() {
		!mapUnits().isEmpty()
	}

	op SliderUnit[] sliderUnits() {
		dynamicUnits().filter[it instanceof SliderUnit].map[it as SliderUnit].toEList()
	}
	op boolean hasSliderUnits() {
		!sliderUnits().isEmpty()
	}

	@OCL(derivation="dynamicUnits()->collect(u | u.servicesUsed)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Service[] servicesUsed

	@OCL(derivation="collectionUnits->select(u | u.hasPagination)->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasPagination

	@OCL(derivation="dynamicUnits()->collect(u | u.associationFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitAssociation[] associationFields

	@OCL(derivation="dynamicUnits()->collect(u | u.autocompleteFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitAssociation[] autocompleteFields
	@OCL(derivation="autocompleteFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasAutocompleteFields

	@OCL(derivation="dynamicUnits()->collect(u | u.formFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived unsettable readonly transient volatile UnitField[] formFields

	op boolean hasImageFields() {
		!dynamicUnits().filter[it.hasImageFields].isEmpty
	}

	op boolean hasInterfaceFields() {
		!dynamicUnits().filter[it.hasInterfaceFields].isEmpty
	}

	op boolean hasRequiredInterfaceFields() {
		!dynamicUnits().filter[it.hasRequiredInterfaceFields].isEmpty
	}

	op boolean hasResourceFields() {
		!dynamicUnits().filter[it.hasResourceFields].isEmpty
	}

	@OCL(derivation="dynamicUnits()->collect(u | u.actionsWithoutTarget())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Action[] actionsWithoutTarget
	
	@OCL(derivation="dynamicUnits()->collect(u | u.fileActions())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile OperationAction[] fileActions
	@OCL(derivation="fileActions->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasFileActions

	op boolean hasActionsWithDisabledMessage() {
		!dynamicUnits().filter[it.hasActionsWithDisabledMessage()].isEmpty()
	}

	op boolean hasSuccessMessages() {
		!dynamicUnits().filter[it.hasActionsWithSuccessMessage()].isEmpty()
	}

	op boolean hasMessages() {
		!editUnits.filter[it.hasMessages].isEmpty()
		|| !dynamicUnits().filter[it.hasActionsWithMessages()].isEmpty()
	}

    @GenModel(propertyCategory="Navigation")
	String uriElement = ''

    @GenModel(propertyCategory="Style")
	String[1] pageClassOverride = ''
	@OCL(derivation="if pageClassOverride.trim() <> '' then
			pageClassOverride.trim()
		else if uiModel.defaultPageClass.trim() <> '' then
			uiModel.defaultPageClass.trim()
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String pageClass
	@OCL(derivation="pageClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasPageClass

	@OCL(derivation="partOf.genModel")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived WafModel genModel

	@OCL(derivation="partOf.uiModel")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived WafModel uiModel

	@OCL(derivation="if parentController = null then
			self
		else
			parentController.rootController
		endif")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived Controller rootController
}

class SinglePageController extends Controller {
}

class MultiPageController extends Controller {
}

abstract class ContentUnit extends NamedDisplayElement {
	container Controller[1] controller opposite units

    @GenModel(propertyCategory="Navigation")
	String uriElement = ''

    @GenModel(propertyCategory="Navigation")
    refers ContentUnit uriParent

	contains AuthorisationExpression authorisation
	op boolean isAuthorised() {
		authorisation !== null
	}

	op boolean hasAuthorisation() {
		isAuthorised()
	}

	String purposeSummary
	String alternative
	boolean omitCaption

	@OCL(derivation="self.oclIsKindOf(EditUnit) or self.oclIsKindOf(ControlUnit)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isFormUnit

	@GenModel(propertyCategory="Style")
	String localSectionClass = ''
	@GenModel(propertyCategory="Style")
	String localCaptionClass = ''
	@GenModel(propertyCategory="Style")
	String localContentClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else {
			''
		}
	}
	op boolean hasSectionClass() {
		sectionClass() !== ''
	}

	op String captiontClass() {
		if (localCaptionClass.trim() !== '') {
			localCaptionClass.trim()
		} else {
			''
		}
	}
	op boolean hasCaptionClass() {
		captiontClass() !== ''
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else {
			''
		}
	}
	op boolean hasContentClass() {
		contentClass() !== ''
	}

	@OCL(derivation="controller.genModel")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived WafModel genModel
	@OCL(derivation="controller.uiModel")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived WafModel uiModel
}

class StaticUnit extends ContentUnit {
	refers Repository repository
	String[1] content

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultStaticStyles.sectionClass.trim() !== '') {
			uiModel.defaultStaticStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultStaticStyles.captionClass.trim() !== '') {
			uiModel.defaultStaticStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultStaticStyles.contentClass.trim() !== '') {
			uiModel.defaultStaticStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}
}

abstract class DynamicUnit extends ContentUnit, ActionContainer {
	refers Entity[1] contentType

	@OCL(derivation="if not contentType.oclIsUndefined() then
			contentType.containingAssociation
		else
			null
		endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Association containingAssociation

	op boolean hasAuthorisation() {
		isAuthorised() || actions().exists[a | a.isAuthorised()]
	}

	op Entity containingType() {
		if (contentType === null) {
			null
		} else {
			contentType.containingType
		}
	}

	op boolean isContained() {
		containingType() !== null
	}

	op Entity[] referencableTypes() {
		var types = new BasicEList<Entity>()
		if (contentType !== null) {
			types.add(contentType)
		}
		return types
	}

	@OCL(derivation="if self.oclIsKindOf(EditUnit) and not containingAssociation.oclIsUndefined() then
			featureFields->exists(f | f.leafFeature() = containingAssociation)
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasExplicitlyEditedContainer

	@OCL(derivation="operationActions()->collect(u | u.servicesUsed)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived Service[] servicesUsed
	@OCL(derivation="servicesUsed->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasServicesUsed

    @GenModel(propertyCategory="Business")
	contains RouteActual[] routeActuals

    @GenModel(propertyCategory="Model")
	contains UnitField[] displayFields opposite displayedOn

    @GenModel(propertyCategory="Business")
	contains Predicate hideWhen

	@OCL(derivation="not hideWhen.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isConditionallyDisplayed

    @GenModel(propertyCategory="Interface")
	String messageWhenHidden = ''
	@OCL(derivation="self.isConditionallyDisplayed = true and messageWhenHidden.trim() <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasHiddenMessage

	String header
	String footer

	refers derived readonly unsettable transient volatile UnitAssociation[] associationFields get {
		displayFields.filter[it.isAssociationField()].map[it as UnitAssociation].toEList()
	}
	derived readonly unsettable transient volatile boolean hasAssociationFields get {
		!associationFields.isEmpty()
	}

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
				associationFields->select(f | f.useAutocomplete)->asOrderedSet()
			else
				OrderedSet{}
			endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly transient volatile UnitAssociation[] autocompleteFields
	derived readonly unsettable transient volatile boolean hasAutocompleteFields get {
		autocompleteFields.isEmpty()
	}

	derived readonly unsettable transient volatile boolean hasBooleanFields get {
		displayFields.exists[it.isBooleanField()]
	}

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
				self.oclAsType(EditUnit).useCaptcha
			else
				false
			endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCaptcha

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
				collectionFields
					->select(f | f.isFeatureField()).oclAsType(UnitFeature)
					->select(f | f.collectionUiAllowAdd = true or f.collectionUiAllowRemove = true)
					->notEmpty()
			else
				false
			endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasChangableCollections

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] collectionFields get {
		displayFields.filter[!it.isSingletonField()].toEList()
	}

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitFeature[] collectionFeatures get {
		collectionFields.filter[it.isFeatureField()].map[it as UnitFeature].toEList()
	}

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] dataTypeFields get {
		displayFields.filter[it.isDataTypeField()].toEList()
	}

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] dateFields get {
		displayFields.filter[it.isDateField()].toEList()
	}

	@OCL(derivation="displayFields->select(f | f.hasDefaultValue = true)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] defaultValueFields

	derived readonly unsettable transient volatile boolean hasDefaultValueFields get {
		!defaultValueFields.isEmpty()
	}

	@OCL(derivation="displayFields->exists(f | f.isDisabled)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasDisabledFields

	@OCL(derivation="displayFields->exists(f | f.isEmailField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasEmailFields

	@OCL(derivation="displayFields->select(f | f.isEncryptedField() = true)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] encryptedFields

	@OCL(derivation="encryptedFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasEncryptedFields

	@OCL(derivation="displayFields->select(f | f.isEnumerationField() = true)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] enumerationFields
	@OCL(derivation="enumerationFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasEnumerationFields

	@OCL(derivation="displayFields->select(f | f.isFeatureField()).oclAsType(UnitFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitFeature[] featureFields
	@OCL(derivation="featureFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFeatureFields

	@OCL(derivation="resourceFields->select(f | f.resource.isFileFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitResource[] fileFields
	@OCL(derivation="fileFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFileFields

	@OCL(derivation="displayFields->select(f | f.hasForcedValue)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] forcedValueFields
	@OCL(derivation="forcedValueFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasForcedValueFields

	@OCL(derivation="if self.isFormUnit = true then
				displayFields
			else
				OrderedSet{}
			endif")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] formFields

	@OCL(derivation="resourceFields->select(f | f.resource.isImageFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitResource[] imageFields
	@OCL(derivation="imageFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasImageFields

	@OCL(derivation="displayFields->exists(f | f.isIntegerField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasIntegerFields

	@OCL(derivation="displayFields->select(f | f.oclIsKindOf(InterfaceField)).oclAsType(InterfaceField)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived InterfaceField[] interfaceFields
	@OCL(derivation="interfaceFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasInterfaceFields

	@OCL(derivation="interfaceFields->exists(f | f.isRequiredField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasRequiredInterfaceFields

	@OCL(derivation="displayFields->exists(f | f.isObfuscatedField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasObfuscatedFields

	@OCL(derivation="displayFields->exists(f | f.isRepeated = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasRepeatedFields

	@OCL(derivation="displayFields->select(f | f.isResourceField() = true).oclAsType(UnitResource)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitResource[] resourceFields
	@OCL(derivation="resourceFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	readonly transient volatile unsettable derived boolean hasResourceFields

	@OCL(derivation="displayFields->exists(f | f.isStringField())")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasStringFields

	@OCL(derivation="displayFields->exists(f | f.isTextareaField())")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasTextareaFields

	@OCL(derivation="displayFields->exists(f | f.isUrlField())")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasUrlFields

	String localFieldListClass = ''
	String localDefinitionFieldListClass = ''
	String localFieldLabelClass = ''
	String localFieldValueClass = ''
	String localControlClass = ''
	String localAnchorClass = ''

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
					if self.oclAsType(EditUnit).hasFieldListClass = true then
						self.oclAsType(EditUnit).fieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(DetailsUnit) then
					if self.oclAsType(DetailsUnit).hasFieldListClass = true then
						self.oclAsType(DetailsUnit).fieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(TabularUnit) then
					if self.oclAsType(TabularUnit).hasFieldListClass = true then
						self.oclAsType(TabularUnit).fieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(CardsUnit) then
					if self.oclAsType(CardsUnit).hasFieldListClass = true then
						self.oclAsType(CardsUnit).fieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(SliderUnit) then
					if self.oclAsType(SliderUnit).hasFieldListClass = true then
						self.oclAsType(SliderUnit).fieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(GalleryUnit) then
					if self.oclAsType(GalleryUnit).hasFieldListClass = true then
						self.oclAsType(GalleryUnit).fieldListClass
					else
						''
					endif
				else
					''
				endif endif endif endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String commonFieldListClass
    @GenModel(propertyCategory="Debug")
	@OCL(derivation="commonFieldListClass <> ''")
	derived readonly transient volatile boolean hasCommonFieldListClass

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
					if self.oclAsType(EditUnit).hasDefinitionFieldListClass = true then
						self.oclAsType(EditUnit).definitionFieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(DetailsUnit) then
					if self.oclAsType(DetailsUnit).hasDefinitionFieldListClass = true then
						self.oclAsType(DetailsUnit).definitionFieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(TabularUnit) then
					if self.oclAsType(TabularUnit).hasDefinitionFieldListClass = true then
						self.oclAsType(TabularUnit).definitionFieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(CardsUnit) then
					if self.oclAsType(CardsUnit).hasDefinitionFieldListClass = true then
						self.oclAsType(CardsUnit).definitionFieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(SliderUnit) then
					if self.oclAsType(SliderUnit).hasDefinitionFieldListClass = true then
						self.oclAsType(SliderUnit).definitionFieldListClass
					else
						''
					endif
				else if self.oclIsKindOf(GalleryUnit) then
					if self.oclAsType(GalleryUnit).hasDefinitionFieldListClass = true then
						self.oclAsType(GalleryUnit).definitionFieldListClass
					else
						''
					endif
				else
					''
				endif endif endif endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String commonDefinitionFieldListClass
	@OCL(derivation="commonDefinitionFieldListClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasCommonDefinitionFieldListClass

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
					if self.oclAsType(EditUnit).hasFieldLabelClass = true then
						self.oclAsType(EditUnit).fieldLabelClass
					else
						''
					endif
				else if self.oclIsKindOf(DetailsUnit) then
					if self.oclAsType(DetailsUnit).hasFieldLabelClass = true then
						self.oclAsType(DetailsUnit).fieldLabelClass
					else
						''
					endif
				else if self.oclIsKindOf(TabularUnit) then
					if self.oclAsType(TabularUnit).hasFieldLabelClass = true then
						self.oclAsType(TabularUnit).fieldLabelClass
					else
						''
					endif
				else if self.oclIsKindOf(CardsUnit) then
					if self.oclAsType(CardsUnit).hasFieldLabelClass = true then
						self.oclAsType(CardsUnit).fieldLabelClass
					else
						''
					endif
				else if self.oclIsKindOf(SliderUnit) then
					if self.oclAsType(SliderUnit).hasFieldLabelClass = true then
						self.oclAsType(SliderUnit).fieldLabelClass
					else
						''
					endif
				else if self.oclIsKindOf(GalleryUnit) then
					if self.oclAsType(GalleryUnit).hasFieldLabelClass = true then
						self.oclAsType(GalleryUnit).fieldLabelClass
					else
						''
					endif
				else
					''
				endif endif endif endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String commonFieldLabelClass
	@OCL(derivation="commonFieldLabelClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasCommonFieldLabelClass

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
					if self.oclAsType(EditUnit).hasFieldValueClass = true then
						self.oclAsType(EditUnit).fieldValueClass
					else
						''
					endif
				else if self.oclIsKindOf(DetailsUnit) then
					if self.oclAsType(DetailsUnit).hasFieldValueClass = true then
						self.oclAsType(DetailsUnit).fieldValueClass
					else
						''
					endif
				else if self.oclIsKindOf(TabularUnit) then
					if self.oclAsType(TabularUnit).hasFieldValueClass = true then
						self.oclAsType(TabularUnit).fieldValueClass
					else
						''
					endif
				else if self.oclIsKindOf(CardsUnit) then
					if self.oclAsType(CardsUnit).hasFieldValueClass = true then
						self.oclAsType(CardsUnit).fieldValueClass
					else
						''
					endif
				else if self.oclIsKindOf(SliderUnit) then
					if self.oclAsType(SliderUnit).hasFieldValueClass = true then
						self.oclAsType(SliderUnit).fieldValueClass
					else
						''
					endif
				else if self.oclIsKindOf(GalleryUnit) then
					if self.oclAsType(GalleryUnit).hasFieldValueClass = true then
						self.oclAsType(GalleryUnit).fieldValueClass
					else
						''
					endif
				else
					''
				endif endif endif endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String commonFieldValueClass
	@OCL(derivation="commonFieldValueClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasCommonFieldValueClass

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
					if self.oclAsType(EditUnit).hasAnchorClass = true then
						self.oclAsType(EditUnit).anchorClass
					else
						''
					endif
				else if self.oclIsKindOf(DetailsUnit) then
					if self.oclAsType(DetailsUnit).hasAnchorClass = true then
						self.oclAsType(DetailsUnit).anchorClass
					else
						''
					endif
				else if self.oclIsKindOf(TabularUnit) then
					if self.oclAsType(TabularUnit).hasAnchorClass = true then
						self.oclAsType(TabularUnit).anchorClass
					else
						''
					endif
				else if self.oclIsKindOf(CardsUnit) then
					if self.oclAsType(CardsUnit).hasAnchorClass = true then
						self.oclAsType(CardsUnit).anchorClass
					else
						''
					endif
				else if self.oclIsKindOf(SliderUnit) then
					if self.oclAsType(SliderUnit).hasAnchorClass = true then
						self.oclAsType(SliderUnit).anchorClass
					else
						''
					endif
				else if self.oclIsKindOf(GalleryUnit) then
					if self.oclAsType(GalleryUnit).hasAnchorClass = true then
						self.oclAsType(GalleryUnit).anchorClass
					else
						''
					endif
				else
					''
				endif endif endif endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String commonAnchorClass
	@OCL(derivation="commonAnchorClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasCommonAnchorClass
}

class RouteActual {
	refers Attribute[1] routeParameter
	contains Expression[1] value
}

enum CollectionDisplayOptions {
	LineDirection
	PageDirection = 1
}

interface UnitField extends DisplayElement {
	container DynamicUnit[1] displayedOn opposite displayFields

	@OCL(derivation="if self.isFeatureField() = true then
			self.oclAsType(UnitFeature).name
		else if self.isInterfaceField() = true then
			self.oclAsType(InterfaceField).name
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String fieldName

	contains AuthorisationExpression authorisation
	@OCL(derivation="not authorisation.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isAuthorised

	@OCL(derivation="if self.isFeatureField() = true then
			(displayLabel.trim() <> '')
				and (displayLabel.trim() <> self.oclAsType(UnitFeature).leafFeature().displayLabel.trim())
		else if self.isInterfaceField() = true then
			true
		else
			false
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCustomisedDisplayLabel

	@OCL(derivation="if self.isInterfaceField() = true then
			self.oclAsType(InterfaceField).repeatedField
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isRepeated

	@OCL(derivation="if self.isFeatureField() = true then
			let feature : UnitFeature = self.oclAsType(UnitFeature)
				in if feature.titleOverride.trim() <> '' then
						feature.titleOverride.trim()
					else if feature.displayLabel.trim() <> '' then
						feature.displayLabel.trim()
					else if feature.leafFeature().displayLabel.trim() <> '' then
						feature.leafFeature().displayLabel.trim()
					else
						feature.leafFeature().name
					endif endif endif
		else if self.isInterfaceField() = true then
			let field : InterfaceField = self.oclAsType(InterfaceField)
				in if field.fieldTitle.trim() <> '' then
						field.fieldTitle.trim()
					else if field.displayLabel.trim() <> '' then
						field.displayLabel.trim()
					else
						field.name
					endif endif
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String title
	@OCL(derivation="title <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasTitle

	@OCL(derivation="if self.isFeatureField() = true then
			title <> self.oclAsType(UnitFeature).leafFeature().displayLabel.trim()
		else
			title <> ''
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCustomisedTitle

	@OCL(derivation="if self.isInterfaceField() and self.isRepeated then
			self.oclAsType(InterfaceField).secondTitle.trim() <> ''
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSecondTitle

	@OCL(derivation="if self.isFeatureField() = true then
			let feature : UnitFeature = self.oclAsType(UnitFeature)
				in if feature.placeholderOverride.trim() <> '' then
						feature.placeholderOverride.trim()
					else if feature.displayLabel.trim() <> '' then
						feature.displayLabel.trim()
					else if feature.leafFeature().displayLabel.trim() <> '' then
						feature.leafFeature().displayLabel.trim()
					else
						feature.leafFeature().name
					endif endif endif
		else if self.isInterfaceField() = true then
			let field : InterfaceField = self.oclAsType(InterfaceField)
				in if field.fieldPlaceholder.trim() <> '' then
						field.fieldPlaceholder.trim()
					else if field.displayLabel.trim() <> '' then
						field.displayLabel.trim()
					else
						field.name
					endif endif
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String placeholder
	@OCL(derivation="placeholder <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasPlaceholder

	@OCL(derivation="if self.isFeatureField() = true then
			placeholder <> self.oclAsType(UnitFeature).leafFeature().displayLabel.trim()
		else
			placeholder <> ''
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCustomisedPlaceholder

	@OCL(derivation="if self.isInterfaceField() and self.isRepeated then
			self.oclAsType(InterfaceField).secondPlaceholder.trim() <> ''
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSecondPlaceholder

	String localHelp = ''
	@OCL(derivation="if self.oclIsTypeOf(UnitLabel) then
			''
		else
			if localHelp.trim() <> '' then
				localHelp.trim()
			else
				''
			endif
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String help
	@OCL(derivation="help <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasHelp

	@OCL(derivation="if self.oclIsKindOf(InterfaceField) and self.isRepeated then
			self.oclAsType(InterfaceField).secondHelp.trim() <> ''
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSecondHelp

	contains Predicate hideWhen

	@OCL(derivation="if self.isAssociationField() = true then
			self.oclAsType(UnitAssociation).association.isContains
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isContains

	@OCL(derivation="disabledInput")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isDisabled

	String defaultDisplay
	contains Predicate displayDefaultWhen

 	op boolean isAssociationField() {
		false
	}

 	op boolean isAttributeField() {
		false
	}

  	op boolean isBooleanField() {
		false
	}

  	op boolean isDataTypeField() {
		false
	}

  	op boolean isDateField() {
		false
	}

   	op boolean isEmailField() {
		false
	}

  	op boolean isEncryptedField() {
		false
	}

  	op boolean isEnumerationField() {
		false
	}

  	op boolean isFeatureField() {
		false
	}

  	op boolean isInterfaceField() {
		false
	}

  	op boolean isIntegerField() {
		false
	}

  	op boolean isLabelField() {
		false
	}

  	op boolean isLocationField() {
		false
	}

  	op boolean isObfuscatedField() {
		false
	}

 	op boolean isResourceField() {
		false
	}

   	op boolean isRequiredField() {
		false
	}

 	op boolean isSingletonField() {
		true
	}

 	op boolean isStringField() {
		false
	}

  	op boolean isTextareaField() {
		false
	}

  	op boolean isUrlField() {
		false
	}

 	op boolean hasDefaultDisplay() {
		defaultDisplay !== null
	}

 	op boolean hasDisplayDefaultWhen() {
		hasDefaultDisplay() && displayDefaultWhen !== null
	}

 	op boolean hasDefaultValue() {
		defaultValue() !== null
	}

 	op boolean hasEmptyCollectionDisplay() {
		false
	}

  	op Action[] actions() {
		ECollections.emptyEList()
	}

 	op Classifier dataType() {
		null
	}

  	op DateDetails dateDetails() {
		null
	}

  	op Expression defaultValue() {
		null
	}

  	op EnumerationType enumerationType() {
		null
	}

	@OCL(derivation="if self.isAttributeField() = true then
			self.oclAsType(UnitAttribute).attributeDefaultValue
		else if self.isInterfaceField() = true then
			self.oclAsType(InterfaceField).fieldDefaultValue
		else
			null
		endif endif")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile derived Expression defaultValue

	@OCL(derivation="not defaultValue.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasDefaultValue

	@OCL(derivation="if self.isFeatureField() = true then
			not self.oclAsType(UnitFeature).forcedValue.oclIsUndefined()
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasForcedValue

	boolean escapeHTML = "true"
	CollectionDisplayOptions collectionDisplayOption
	boolean truncate
	String dateFormat
	boolean disabledInput
	String headerClass

	String inputGroupClassOverride = ''
	@OCL(derivation="if inputGroupClassOverride.trim() <> '' then
			inputGroupClassOverride.trim()
		else if displayedOn.oclIsKindOf(EditUnit) then
			if displayedOn.oclAsType(EditUnit).hasInputGroupClass = true then
				displayedOn.oclAsType(EditUnit).inputGroupClass
			else
				''
			endif
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String inputGroupClass
	@OCL(derivation="inputGroupClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasInputGroupClass

	String fieldLabelClassOverride = ''
	@OCL(derivation="if fieldLabelClassOverride.trim() <> '' then
			fieldLabelClassOverride.trim()
		else if displayedOn.hasCommonFieldLabelClass = true then
			displayedOn.commonFieldLabelClass
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldLabelClass

	String fieldValueClassOverride = ''
	@OCL(derivation="if fieldValueClassOverride.trim() <> '' then
			fieldValueClassOverride.trim()
		else if displayedOn.hasCommonFieldValueClass = true then
			displayedOn.commonFieldValueClass
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldValueClass

	String footerClass

	@OCL(derivation="displayedOn.genModel")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived WafModel genModel

	@OCL(derivation="displayedOn.uiModel")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived WafModel uiModel
}

abstract class UnitFeature extends UnitField, Path, ActionContainer {
	String titleOverride = ''
	String placeholderOverride = ''
	contains Expression forcedValue
	boolean collectionUiAllowAdd = "true"
	boolean collectionUiAllowRemove = "true"
	int collectionMaximumValues = "0"
	String emptyCollectionDisplay
	boolean autofocus
	String footer

 	op boolean hasEmptyCollectionDisplay() {
		emptyCollectionDisplay !== null
	}

  	op boolean isAssociationField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature() instanceof Association
		}
	}

 	op boolean isAttributeField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature() instanceof Attribute
		}
	}

  	op boolean isBooleanField() {
		if (isDataTypeField()) {
			leafFeature().isBooleanFeature
		} else {
			false
		}
	}

  	op boolean isDataTypeField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature().isDataTypeFeature
		}
	}

  	op boolean isDateField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature().isDateFeature
		}
	}

  	op boolean isEmailField() {
		if (isDataTypeField()) {
			leafFeature().isEmailFeature
		} else {
			false
		}
	}

  	op boolean isEncryptedField() {
		if (isDataTypeField()) {
			false
		} else {
			leafFeature().isEncrypted
		}
	}

  	op boolean isEnumerationField() {
		if (isDataTypeField()) {
			leafFeature().isEnumerationFeature
		} else {
			false
		}
	}

   	op boolean isFeatureField() {
		true
	}

  	op boolean isIntegerField() {
		if (isDataTypeField()) {
			leafFeature().isIntegerFeature
		} else {
			false
		}
	}

  	op boolean isLocationField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature().isLocationFeature
		}
	}

  	op boolean isObfuscatedField() {
		if (isDataTypeField()) {
			leafFeature().isObfuscatedFeature
		} else {
			false
		}
	}

   	op boolean isRequiredField() {
		if (leafFeature() === null) {
			true
		} else {
			leafFeature().isRequired
		}
	}

 	op boolean isResourceField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature() instanceof ResourceFeature
		}
	}

   	op boolean isSingletonField() {
		if (leafFeature() === null) {
			true
		} else {
			leafFeature().isSingleton
		}
	}

  	op boolean isStringField() {
		if (isDataTypeField()) {
			leafFeature().isStringFeature
		} else {
			false
		}
	}

  	op boolean isTextareaField() {
		if (isDataTypeField()) {
			leafFeature().isTextareaFeature
		} else {
			false
		}
	}

  	op boolean isUrlField() {
		if (isDataTypeField()) {
			leafFeature().isUrlFeature
		} else {
			false
		}
	}

  	op Classifier dataType() {
		if (isDataTypeField()) {
			leafFeature().dataType
		} else {
			null
		}
	}

  	op DateDetails dateDetails() {
		if (isDateField()) {
			leafFeature().dateDetails
		} else {
			null
		}
	}

  	op EnumerationType enumerationType() {
		if (isEnumerationField()) {
			leafFeature().enumerationType
		} else {
			null
		}
	}
}

class UnitAssociation extends UnitFeature, AssociationPathElement {
	refers Selection options
	refers Attribute collectionSortBy
	boolean useAutocomplete = "false"

  	op Expression defaultValue() {
		if (leafFeature() !== null) {
			leafFeature().defaultValue
		} else {
			null
		}
	}
}

class UnitAttribute extends UnitFeature, AttributePathElement {
	contains Expression attributeDefaultValue
	boolean obfuscateFormFields
	String validationPattern = ''
}

class UnitResource extends UnitFeature, ResourcePathElement {
	boolean isDeletable = "true"
	boolean isDownloadable = "true"
	boolean showImageWhenEditing = "true"
	refers ImageManipulation imageFilter
}

class UnitLabel extends UnitField {
	refers ModelLabel[1] label

	@OCL(derivation="if not label.oclIsUndefined() then
			label.name
		else
			''
		endif")
    @GenModel(propertyCategory="Debug")
	derived String[1] name

  	op boolean isLabelField() {
		true
	}
}

abstract class InterfaceField extends NamedElement, UnitField {
	String fieldTitle = ''
	String fieldPlaceholder = ''
	boolean fieldRequired
	contains Expression fieldDefaultValue
	String interfaceType
	String validationPattern = ''
	boolean repeatedField = 'false'
	String secondDisplayLabel = ''
	String secondTitle = ''
	String secondPlaceholder = ''
	String secondHelp = ''

   	op boolean isInterfaceField() {
		true
	}

   	op boolean isRequiredField() {
		fieldRequired
	}

  	op Expression defaultValue() {
		fieldDefaultValue
	}
}

class DataTypeField extends InterfaceField {
	refers DataType[1] interfaceDataType
	boolean caseInsensitive
	boolean obfuscateFormFields
	boolean encrypt

  	op boolean isBooleanField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isBooleanDataType
		}
	}

  	op boolean isDataTypeField() {
		true
	}

  	op boolean isEmailField() {
		if (interfaceDataType === null) {
			interfaceDataType.isEmailDataType
		} else {
			false
		}
	}
	
  	op boolean isEncryptedField() {
		encrypt
	}

  	op boolean isEnumerationField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isEnumerationType
		}
	}

  	op boolean isIntegerField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isIntegerDataType
		}
	}

  	op boolean isObfuscatedField() {
		obfuscateFormFields
	}

  	op boolean isStringField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isStringDataType
		}
	}

  	op boolean isTextareaField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isTextareaDataType
		}
	}

  	op boolean isUrlField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isUrlDataType
		}
	}
}

class DateField extends InterfaceField {
	DateDetails[1] details
	String format

  	op boolean isDateField() {
		true
	}
}

interface SelectableUnit {
	refers SelectAction[] selectors opposite target
}

class SingletonUnit extends DynamicUnit {
	refers Label title
}

enum PaginationControlPlacements {
	Below = 0
	Above = 1
	AboveAndBelow = 2
}

abstract class CollectionUnit extends DynamicUnit, SelectableUnit, ValueContext {
	refers Label unitTitle
	contains DisplayValue elementTitle
	boolean truncateElementTitle = "false"
	refers Selection selection
	refers Selection findContainerSelection
	refers Selection findElementSelection

	op Entity containingType() {
		if (findContainerSelection !== null) {
			findContainerSelection.definedBy.serves
		} else if (selection !== null) {
			selection.selectionType()
		} else if (contentType !== null) {
			contentType.containingType
		} else {
			null
		}
	}

	op Entity[] referencableTypes() {
		var entities = new BasicEList<Entity>() //
		if (contentType !== null) {
			entities.add(contentType);
			if (isContained()) {
				entities.add(containingType());
			}
		}
		return entities
	}

	refers Filter filter
	refers Filter[] supportedFilters
	@OCL(derivation="supportedFilters->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFilters

	@OCL(derivation="if not selection.oclIsUndefined() then
			selection.grouping->notEmpty()
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasGroupedResults

	@OCL(derivation="defaultPaginationSize > 0
		and if selection.oclIsUndefined() then
				true
			else
				selection.hasPaginationSupport = true
			endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasPagination

	String emptyMessage
	boolean omitFieldLabels
	int defaultPaginationSize
	int maximumPaginationSize
	PaginationControlPlacements paginationControlPlacement = "Below"
	int nextNpages
	int previousNpages
	String nextPageLabel = ">"
	String nextPageIconName = ''
	String previousPageLabel = "<"
	String previousPageIconName = ''
	boolean useDisabledPageLinks
	boolean useFirstLastPageLinks
	String firstPageLabel = "<<"
	String firstPageIconName = ''
	String lastPageLabel = ">>"
	String lastPageIconName = ''
	String paginationClass
	String paginationElementClass
	String paginationAnchorClass

	String localInstanceControlClass = ''
	String localInstanceActionClass = ''

	@OCL(derivation="if self.oclIsKindOf(TabularUnit) then
					if self.oclAsType(TabularUnit).hasInstanceControlClass = true then
						self.oclAsType(TabularUnit).instanceControlClass
					else
						''
					endif
				else if self.oclIsKindOf(CardsUnit) then
					if self.oclAsType(CardsUnit).hasInstanceControlClass = true then
						self.oclAsType(CardsUnit).instanceControlClass
					else
						''
					endif
				else if self.oclIsKindOf(SliderUnit) then
					if self.oclAsType(SliderUnit).hasInstanceControlClass = true then
						self.oclAsType(SliderUnit).instanceControlClass
					else
						''
					endif
				else if self.oclIsKindOf(GalleryUnit) then
					if self.oclAsType(GalleryUnit).hasInstanceControlClass = true then
						self.oclAsType(GalleryUnit).instanceControlClass
					else
						''
					endif
				else
					''
				endif endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String commonInstanceControlClass
	@OCL(derivation="commonInstanceControlClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasCommonInstanceControlClass

	@OCL(derivation="if self.oclIsKindOf(TabularUnit) then
					if self.oclAsType(TabularUnit).hasInstanceActionClass = true then
						self.oclAsType(TabularUnit).instanceActionClass
					else
						''
					endif
				else if self.oclIsKindOf(CardsUnit) then
					if self.oclAsType(CardsUnit).hasInstanceActionClass = true then
						self.oclAsType(CardsUnit).instanceActionClass
					else
						''
					endif
				else if self.oclIsKindOf(SliderUnit) then
					if self.oclAsType(SliderUnit).hasInstanceActionClass = true then
						self.oclAsType(SliderUnit).instanceActionClass
					else
						''
					endif
				else if self.oclIsKindOf(GalleryUnit) then
					if self.oclAsType(GalleryUnit).hasInstanceActionClass = true then
						self.oclAsType(GalleryUnit).instanceActionClass
					else
						''
					endif
				else
					''
				endif endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String commonInstanceActionClass
	@OCL(derivation="commonInstanceActionClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasCommonInstanceActionClass
}

abstract class EditUnit extends SingletonUnit {
	boolean useCaptcha = 'false'
	boolean onSaveContinueEditing = 'false'
	contains Predicate disableWhen
	refers ContentUnit confirmDestination
	String[1] confirmLabel
	boolean hasCustomConfirmLabel

	contains Message confirmMessage
	@OCL(derivation="not confirmMessage.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasConfirmMessage

	contains Message successMessage
	@OCL(derivation="not successMessage.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasSuccessMessage

	@OCL(derivation="hasConfirmMessage or hasSuccessMessage")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasMessages

	refers ContentUnit cancelDestination
	String cancelLabel
	boolean hasCustomCancelLabel

	String[1] localInputGroupClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultFormStyles.sectionClass.trim() !== '') {
			uiModel.defaultFormStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultFormStyles.captionClass.trim() !== '') {
			uiModel.defaultFormStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultFormStyles.contentClass.trim() !== '') {
			uiModel.defaultFormStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	@OCL(derivation="if localFieldListClass.trim() <> '' then
			localFieldListClass.trim()
		else if uiModel.defaultFormStyles.fieldListClass.trim() <> '' then
			uiModel.defaultFormStyles.fieldListClass.trim()
		else if uiModel.defaultUnitStyles.fieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldListClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldListClass
	@OCL(derivation="fieldListClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldListClass

	@OCL(derivation="if localDefinitionFieldListClass.trim() <> '' then
			localDefinitionFieldListClass.trim()
		else if uiModel.defaultFormStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultFormStyles.definitionFieldListClass.trim()
		else if uiModel.defaultUnitStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.definitionFieldListClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String definitionFieldListClass
	@OCL(derivation="definitionFieldListClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasDefinitionFieldListClass

	@OCL(derivation="if localFieldLabelClass.trim() <> '' then
			localFieldLabelClass.trim()
		else if uiModel.defaultFormStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultFormStyles.fieldLabelClass.trim()
		else if uiModel.defaultUnitStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldLabelClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldLabelClass

	@OCL(derivation="if localFieldValueClass.trim() <> '' then
			localFieldValueClass.trim()
		else if uiModel.defaultFormStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultFormStyles.fieldValueClass.trim()
		else if uiModel.defaultUnitStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldValueClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldValueClass

	@OCL(derivation="if localControlClass.trim() <> '' then
			localControlClass.trim()
		else if uiModel.defaultFormStyles.controlClass.trim() <> '' then
			uiModel.defaultFormStyles.controlClass.trim()
		else if uiModel.defaultUnitStyles.controlClass.trim() <> '' then
			uiModel.defaultUnitStyles.controlClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String controlClass
	@OCL(derivation="controlClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasControlClass

	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if uiModel.defaultFormStyles.anchorClass.trim() <> '' then
			uiModel.defaultFormStyles.anchorClass.trim()
		else if uiModel.defaultUnitStyles.anchorClass.trim() <> '' then
			uiModel.defaultUnitStyles.anchorClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasAnchorClass

	@OCL(derivation="if localInputGroupClass.trim() <> '' then
			localInputGroupClass.trim()
		else if uiModel.defaultFormStyles.inputGroupClass.trim() <> '' then
			uiModel.defaultFormStyles.inputGroupClass.trim()
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String inputGroupClass
	@OCL(derivation="inputGroupClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasInputGroupClass
}

class CreateUnit extends EditUnit {
}

class UpdateUnit extends EditUnit, SelectableUnit {
	boolean displayEmptyForm = "true"
}

class CreateUpdateUnit extends EditUnit, SelectableUnit {
	String updateUriElement = ''
	String clearLabel
}

class MapUnit extends EditUnit, SelectableUnit {
	boolean readOnly
	int defaultZoomLevel
	refers LocationFeature[1] location
	refers Attribute placeName
}

class DetailsUnit extends SingletonUnit, SelectableUnit {
	refers Selection selection
	boolean omitFieldLabels

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultDetailsStyles.sectionClass.trim() !== '') {
			uiModel.defaultDetailsStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultDetailsStyles.captionClass.trim() !== '') {
			uiModel.defaultDetailsStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultDetailsStyles.contentClass.trim() !== '') {
			uiModel.defaultDetailsStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	@OCL(derivation="if localFieldListClass.trim() <> '' then
			localFieldListClass.trim()
		else if uiModel.defaultDetailsStyles.fieldListClass.trim() <> '' then
			uiModel.defaultDetailsStyles.fieldListClass.trim()
		else if uiModel.defaultUnitStyles.fieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldListClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldListClass
	@OCL(derivation="fieldListClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldListClass

	@OCL(derivation="if localDefinitionFieldListClass.trim() <> '' then
			localDefinitionFieldListClass.trim()
		else if uiModel.defaultDetailsStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultDetailsStyles.definitionFieldListClass.trim()
		else if uiModel.defaultUnitStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.definitionFieldListClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String definitionFieldListClass
	@OCL(derivation="definitionFieldListClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasDefinitionFieldListClass

	@OCL(derivation="if localFieldLabelClass.trim() <> '' then
			localFieldLabelClass.trim()
		else if uiModel.defaultDetailsStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultDetailsStyles.fieldLabelClass.trim()
		else if uiModel.defaultUnitStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldLabelClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldLabelClass

	@OCL(derivation="if localFieldValueClass.trim() <> '' then
			localFieldValueClass.trim()
		else if uiModel.defaultDetailsStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultDetailsStyles.fieldValueClass.trim()
		else if uiModel.defaultUnitStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldValueClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFieldValueClass

	@OCL(derivation="if localControlClass.trim() <> '' then
			localControlClass.trim()
		else if uiModel.defaultDetailsStyles.controlClass.trim() <> '' then
			uiModel.defaultDetailsStyles.controlClass.trim()
		else if uiModel.defaultUnitStyles.controlClass.trim() <> '' then
			uiModel.defaultUnitStyles.controlClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String controlClass
	@OCL(derivation="controlClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasControlClass

	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if uiModel.defaultDetailsStyles.anchorClass.trim() <> '' then
			uiModel.defaultDetailsStyles.anchorClass.trim()
		else if uiModel.defaultUnitStyles.anchorClass.trim() <> '' then
			uiModel.defaultUnitStyles.anchorClass.trim()
		else
			''
		endif endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasAnchorClass
}

class TabularUnit extends CollectionUnit {
	refers SearchUnit targettingSearches opposite resultsDestination
	String rowClasses
	String localHeaderClass = ''
	String localFooterClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultTabularStyles.sectionClass.trim() !== '') {
			uiModel.defaultTabularStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultTabularStyles.captionClass.trim() !== '') {
			uiModel.defaultTabularStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultTabularStyles.contentClass.trim() !== '') {
			uiModel.defaultTabularStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	@OCL(derivation="if localHeaderClass.trim() <> '' then
			localHeaderClass.trim()
		else if uiModel.defaultTabularStyles.headerClass.trim() <> '' then
			uiModel.defaultTabularStyles.headerClass.trim()
		else
			''
		endif endif")
	derived readonly transient volatile String headerClass
	@OCL(derivation="headerClass <> ''")
	derived readonly transient volatile boolean hasHeaderClass

	@OCL(derivation="if localFooterClass.trim() <> '' then
			localFooterClass.trim()
		else if uiModel.defaultTabularStyles.footerClass.trim() <> '' then
			uiModel.defaultTabularStyles.footerClass.trim()
		else
			''
		endif endif")
	derived readonly transient volatile String footerClass
	@OCL(derivation="footerClass <> ''")
	derived readonly transient volatile boolean hasFooterClass

	@OCL(derivation="if localFieldListClass.trim() <> '' then
			localFieldListClass.trim()
		else if uiModel.defaultTabularStyles.fieldListClass.trim() <> '' then
			uiModel.defaultTabularStyles.fieldListClass.trim()
		else if uiModel.defaultUnitStyles.fieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldListClass
	@OCL(derivation="fieldListClass <> ''")
	derived readonly transient volatile boolean hasFieldListClass

	@OCL(derivation="if localDefinitionFieldListClass.trim() <> '' then
			localDefinitionFieldListClass.trim()
		else if uiModel.defaultTabularStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultTabularStyles.definitionFieldListClass.trim()
		else if uiModel.defaultUnitStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.definitionFieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String definitionFieldListClass
	@OCL(derivation="definitionFieldListClass <> ''")
	derived readonly transient volatile boolean hasDefinitionFieldListClass

	@OCL(derivation="if localFieldLabelClass.trim() <> '' then
			localFieldLabelClass.trim()
		else if uiModel.defaultTabularStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultTabularStyles.fieldLabelClass.trim()
		else if uiModel.defaultUnitStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldLabelClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
	derived readonly transient volatile boolean hasFieldLabelClass

	@OCL(derivation="if localFieldValueClass.trim() <> '' then
			localFieldValueClass.trim()
		else if uiModel.defaultTabularStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultTabularStyles.fieldValueClass.trim()
		else if uiModel.defaultUnitStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldValueClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
	derived readonly transient volatile boolean hasFieldValueClass

	@OCL(derivation="if localControlClass.trim() <> '' then
			localControlClass.trim()
		else if uiModel.defaultTabularStyles.controlClass.trim() <> '' then
			uiModel.defaultTabularStyles.controlClass.trim()
		else if uiModel.defaultUnitStyles.controlClass.trim() <> '' then
			uiModel.defaultUnitStyles.controlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String controlClass
	@OCL(derivation="controlClass <> ''")
	derived readonly transient volatile boolean hasControlClass

	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if uiModel.defaultTabularStyles.anchorClass.trim() <> '' then
			uiModel.defaultTabularStyles.anchorClass.trim()
		else if uiModel.defaultUnitStyles.anchorClass.trim() <> '' then
			uiModel.defaultUnitStyles.anchorClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass <> ''")
	derived readonly transient volatile boolean hasAnchorClass

	@OCL(derivation="if localInstanceControlClass.trim() <> '' then
			localInstanceControlClass.trim()
		else if uiModel.defaultTabularStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultTabularStyles.instanceControlClass.trim()
		else if uiModel.defaultUnitStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceControlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceControlClass
	@OCL(derivation="instanceControlClass <> ''")
	derived readonly transient volatile boolean hasInstanceControlClass

	@OCL(derivation="if localInstanceActionClass.trim() <> '' then
			localInstanceActionClass.trim()
		else if uiModel.defaultTabularStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultTabularStyles.instanceActionClass.trim()
		else if uiModel.defaultUnitStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceActionClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceActionClass
	@OCL(derivation="instanceActionClass <> ''")
	derived readonly transient volatile boolean hasInstanceActionClass
}

abstract class CardsUnit extends CollectionUnit {
	contains Badge[] badges opposite displayedOn
	boolean overlaySingleSelectAction

	@GenModel(propertyCategory="Style")
	String[1] localCardClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localCardHeaderClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localCardBodyClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localCardFooterClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localBadgeClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultCardsStyles.sectionClass.trim() !== '') {
			uiModel.defaultCardsStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultCardsStyles.captionClass.trim() !== '') {
			uiModel.defaultCardsStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultCardsStyles.contentClass.trim() !== '') {
			uiModel.defaultCardsStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	@OCL(derivation="if localFieldListClass.trim() <> '' then
			localFieldListClass.trim()
		else if uiModel.defaultCardsStyles.fieldListClass.trim() <> '' then
			uiModel.defaultCardsStyles.fieldListClass.trim()
		else if uiModel.defaultUnitStyles.fieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldListClass
	@OCL(derivation="fieldListClass <> ''")
	derived readonly transient volatile boolean hasFieldListClass

	@OCL(derivation="if localDefinitionFieldListClass.trim() <> '' then
			localDefinitionFieldListClass.trim()
		else if uiModel.defaultCardsStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultCardsStyles.definitionFieldListClass.trim()
		else if uiModel.defaultUnitStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.definitionFieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String definitionFieldListClass
	@OCL(derivation="definitionFieldListClass <> ''")
	derived readonly transient volatile boolean hasDefinitionFieldListClass

	@OCL(derivation="if localFieldLabelClass.trim() <> '' then
			localFieldLabelClass.trim()
		else if uiModel.defaultCardsStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultCardsStyles.fieldLabelClass.trim()
		else if uiModel.defaultUnitStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldLabelClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
	derived readonly transient volatile boolean hasFieldLabelClass

	@OCL(derivation="if localFieldValueClass.trim() <> '' then
			localFieldValueClass.trim()
		else if uiModel.defaultCardsStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultCardsStyles.fieldValueClass.trim()
		else if uiModel.defaultUnitStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldValueClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
	derived readonly transient volatile boolean hasFieldValueClass

	@OCL(derivation="if localControlClass.trim() <> '' then
			localControlClass.trim()
		else if uiModel.defaultCardsStyles.controlClass.trim() <> '' then
			uiModel.defaultCardsStyles.controlClass.trim()
		else if uiModel.defaultUnitStyles.controlClass.trim() <> '' then
			uiModel.defaultUnitStyles.controlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String controlClass
	@OCL(derivation="controlClass <> ''")
	derived readonly transient volatile boolean hasControlClass

	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if uiModel.defaultCardsStyles.anchorClass.trim() <> '' then
			uiModel.defaultCardsStyles.anchorClass.trim()
		else if uiModel.defaultUnitStyles.anchorClass.trim() <> '' then
			uiModel.defaultUnitStyles.anchorClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass <> ''")
	derived readonly transient volatile boolean hasAnchorClass


	@OCL(derivation="if localInstanceControlClass.trim() <> '' then
			localInstanceControlClass.trim()
		else if uiModel.defaultCardsStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultCardsStyles.instanceControlClass.trim()
		else if uiModel.defaultUnitStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceControlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceControlClass
	@OCL(derivation="instanceControlClass <> ''")
	derived readonly transient volatile boolean hasInstanceControlClass

	@OCL(derivation="if localInstanceActionClass.trim() <> '' then
			localInstanceActionClass.trim()
		else if uiModel.defaultCardsStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultCardsStyles.instanceActionClass.trim()
		else if uiModel.defaultUnitStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceActionClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceActionClass
	@OCL(derivation="instanceActionClass <> ''")
	derived readonly transient volatile boolean hasInstanceActionClass

	op String cardClass() {
		if (localCardClass.trim() !== '') {
			localCardClass.trim()
		} else if (uiModel.defaultCardsStyles.cardClass.trim() !== '') {
			uiModel.defaultCardsStyles.cardClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardClass() {
		cardClass() !== ''
	}

	op String cardHeaderClass() {
		if (localCardHeaderClass.trim() !== '') {
			localCardHeaderClass.trim()
		} else if (uiModel.defaultCardsStyles.cardHeaderClass.trim() !== '') {
			uiModel.defaultCardsStyles.cardHeaderClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardHeaderClass() {
		cardHeaderClass() !== ''
	}

	op String cardBodyClass() {
		if (localCardBodyClass.trim() !== '') {
			localCardBodyClass.trim()
		} else if (uiModel.defaultCardsStyles.cardBodyClass.trim() !== '') {
			uiModel.defaultCardsStyles.cardBodyClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardBodyClass() {
		cardBodyClass() !== ''
	}

	op String cardFooterClass() {
		if (localCardFooterClass.trim() !== '') {
			localCardFooterClass.trim()
		} else if (uiModel.defaultCardsStyles.cardFooterClass.trim() !== '') {
			uiModel.defaultCardsStyles.cardFooterClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardFooterClass() {
		cardFooterClass() !== ''
	}

	op String badgeClass() {
		if (localBadgeClass.trim() !== '') {
			localBadgeClass.trim()
		} else if (uiModel.defaultCardsStyles.badgeClass.trim() !== '') {
			uiModel.defaultCardsStyles.badgeClass.trim()
		} else {
			''
		}
	}
	@OCL(derivation="badgeClass <> ''")
	op boolean hasBadgeClass() {
		badgeClass() !== ''
	}
}

class Badge extends ValueContext {
	refers CardsUnit[1] displayedOn opposite badges
	String iconName
	contains DisplayValue value
	refers Attribute title
	contains Predicate displayWhen

	@GenModel(propertyCategory="Style")
	String localBadgeClass

	op String badgeClass() {
		if (localBadgeClass.trim() !== '') {
			localBadgeClass.trim()
		} else if (displayedOn.hasBadgeClass()) {
			displayedOn.badgeClass()
		} else {
			''
		}
	}
	op boolean hasBadgeClass() {
		badgeClass() !== ''
	}
}

class TextCardsUnit extends CardsUnit {
}

class DateCardsUnit extends CardsUnit, ValueContext {
	contains DisplayValue[1] elementDate
}

interface ImageUnit extends ValueContext {
	contains DisplayValue[1] imageFeaturePath
	String missingImagePath
	contains Predicate showMissingImageWhen
	refers ImageManipulation imageFilter
}


class ImageCardsUnit extends CardsUnit, ImageUnit {
	boolean enableImageEnlargement
	boolean overlayTitle
	boolean revealUntruncatedContent
	@GenModel(propertyCategory="Style")
	String imageActionClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultImageCardsStyles.sectionClass.trim() !== '') {
			uiModel.defaultImageCardsStyles.sectionClass.trim()
		} else if (uiModel.defaultCardsStyles.sectionClass.trim() !== '') {
			uiModel.defaultCardsStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultImageCardsStyles.captionClass.trim() !== '') {
			uiModel.defaultImageCardsStyles.captionClass.trim()
		} else if (uiModel.defaultCardsStyles.captionClass.trim() !== '') {
			uiModel.defaultCardsStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultImageCardsStyles.contentClass.trim() !== '') {
			uiModel.defaultImageCardsStyles.contentClass.trim()
		} else if (uiModel.defaultCardsStyles.contentClass.trim() !== '') {
			uiModel.defaultCardsStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String imageActionClass() {
		if (imageActionClass().trim() !== '') {
			imageActionClass().trim()
		} else if (uiModel.defaultImageCardsStyles.imageActionClass.trim() !== '') {
			uiModel.defaultImageCardsStyles.imageActionClass.trim()
		} else {
			''
		}
	}
	op boolean hasImageActionClass() {
		imageActionClass() !== ''
	}
}

class SliderUnit extends CollectionUnit, ImageUnit {
	int showTime
	int transitionTime

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultSliderStyles.sectionClass.trim() !== '') {
			uiModel.defaultSliderStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultSliderStyles.captionClass.trim() !== '') {
			uiModel.defaultSliderStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultSliderStyles.contentClass.trim() !== '') {
			uiModel.defaultSliderStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	@OCL(derivation="if localFieldListClass.trim() <> '' then
			localFieldListClass.trim()
		else if uiModel.defaultSliderStyles.fieldListClass.trim() <> '' then
			uiModel.defaultSliderStyles.fieldListClass.trim()
		else if uiModel.defaultUnitStyles.fieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldListClass
	@OCL(derivation="fieldListClass <> ''")
	derived readonly transient volatile boolean hasFieldListClass

	@OCL(derivation="if localDefinitionFieldListClass.trim() <> '' then
			localDefinitionFieldListClass.trim()
		else if uiModel.defaultSliderStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultSliderStyles.definitionFieldListClass.trim()
		else if uiModel.defaultUnitStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.definitionFieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String definitionFieldListClass
	@OCL(derivation="definitionFieldListClass <> ''")
	derived readonly transient volatile boolean hasDefinitionFieldListClass

	@OCL(derivation="if localFieldLabelClass.trim() <> '' then
			localFieldLabelClass.trim()
		else if uiModel.defaultSliderStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultSliderStyles.fieldLabelClass.trim()
		else if uiModel.defaultUnitStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldLabelClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
	derived readonly transient volatile boolean hasFieldLabelClass

	@OCL(derivation="if localFieldValueClass.trim() <> '' then
			localFieldValueClass.trim()
		else if uiModel.defaultSliderStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultSliderStyles.fieldValueClass.trim()
		else if uiModel.defaultUnitStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldValueClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
	derived readonly transient volatile boolean hasFieldValueClass

	@OCL(derivation="if localControlClass.trim() <> '' then
			localControlClass.trim()
		else if uiModel.defaultSliderStyles.controlClass.trim() <> '' then
			uiModel.defaultSliderStyles.controlClass.trim()
		else if uiModel.defaultUnitStyles.controlClass.trim() <> '' then
			uiModel.defaultUnitStyles.controlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String controlClass
	@OCL(derivation="controlClass <> ''")
	derived readonly transient volatile boolean hasControlClass

	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if uiModel.defaultSliderStyles.anchorClass.trim() <> '' then
			uiModel.defaultSliderStyles.anchorClass.trim()
		else if uiModel.defaultUnitStyles.anchorClass.trim() <> '' then
			uiModel.defaultUnitStyles.anchorClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass <> ''")
	derived readonly transient volatile boolean hasAnchorClass

	@OCL(derivation="if localInstanceControlClass.trim() <> '' then
			localInstanceControlClass.trim()
		else if uiModel.defaultSliderStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultSliderStyles.instanceControlClass.trim()
		else if uiModel.defaultUnitStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceControlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceControlClass
	@OCL(derivation="instanceControlClass <> ''")
	derived readonly transient volatile boolean hasInstanceControlClass

	@OCL(derivation="if localInstanceActionClass.trim() <> '' then
			localInstanceActionClass.trim()
		else if uiModel.defaultSliderStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultSliderStyles.instanceActionClass.trim()
		else if uiModel.defaultUnitStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceActionClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceActionClass
	@OCL(derivation="instanceActionClass <> ''")
	derived readonly transient volatile boolean hasInstanceActionClass
}

class GalleryUnit extends CollectionUnit, ImageUnit {
	refers ImageManipulation fullSizeFilter
	int showTime
	int transitionTime

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultGalleryStyles.sectionClass.trim() !== '') {
			uiModel.defaultGalleryStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultGalleryStyles.captionClass.trim() !== '') {
			uiModel.defaultGalleryStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultGalleryStyles.contentClass.trim() !== '') {
			uiModel.defaultGalleryStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	@OCL(derivation="if localFieldListClass.trim() <> '' then
			localFieldListClass.trim()
		else if uiModel.defaultFormStyles.fieldListClass.trim() <> '' then
			uiModel.defaultFormStyles.fieldListClass.trim()
		else if uiModel.defaultUnitStyles.fieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldListClass
	@OCL(derivation="fieldListClass <> ''")
	derived readonly transient volatile boolean hasFieldListClass

	@OCL(derivation="if localDefinitionFieldListClass.trim() <> '' then
			localDefinitionFieldListClass.trim()
		else if uiModel.defaultGalleryStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultGalleryStyles.definitionFieldListClass.trim()
		else if uiModel.defaultUnitStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.definitionFieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String definitionFieldListClass
	@OCL(derivation="definitionFieldListClass <> ''")
	derived readonly transient volatile boolean hasDefinitionFieldListClass

	@OCL(derivation="if localFieldLabelClass.trim() <> '' then
			localFieldLabelClass.trim()
		else if uiModel.defaultGalleryStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultGalleryStyles.fieldLabelClass.trim()
		else if uiModel.defaultUnitStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldLabelClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
	derived readonly transient volatile boolean hasFieldLabelClass

	@OCL(derivation="if localFieldValueClass.trim() <> '' then
			localFieldValueClass.trim()
		else if uiModel.defaultGalleryStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultGalleryStyles.fieldValueClass.trim()
		else if uiModel.defaultUnitStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldValueClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
	derived readonly transient volatile boolean hasFieldValueClass

	@OCL(derivation="if localControlClass.trim() <> '' then
			localControlClass.trim()
		else if uiModel.defaultGalleryStyles.controlClass.trim() <> '' then
			uiModel.defaultGalleryStyles.controlClass.trim()
		else if uiModel.defaultUnitStyles.controlClass.trim() <> '' then
			uiModel.defaultUnitStyles.controlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String controlClass
	@OCL(derivation="controlClass <> ''")
	derived readonly transient volatile boolean hasControlClass

	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if uiModel.defaultGalleryStyles.anchorClass.trim() <> '' then
			uiModel.defaultGalleryStyles.anchorClass.trim()
		else if uiModel.defaultUnitStyles.anchorClass.trim() <> '' then
			uiModel.defaultUnitStyles.anchorClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass <> ''")
	derived readonly transient volatile boolean hasAnchorClass

	@OCL(derivation="if localInstanceControlClass.trim() <> '' then
			localInstanceControlClass.trim()
		else if uiModel.defaultGalleryStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultGalleryStyles.instanceControlClass.trim()
		else if uiModel.defaultUnitStyles.instanceControlClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceControlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceControlClass
	@OCL(derivation="instanceControlClass <> ''")
	derived readonly transient volatile boolean hasInstanceControlClass

	@OCL(derivation="if localInstanceActionClass.trim() <> '' then
			localInstanceActionClass.trim()
		else if uiModel.defaultGalleryStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultGalleryStyles.instanceActionClass.trim()
		else if uiModel.defaultUnitStyles.instanceActionClass.trim() <> '' then
			uiModel.defaultUnitStyles.instanceActionClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String instanceActionClass
	@OCL(derivation="instanceActionClass <> ''")
	derived readonly transient volatile boolean hasInstanceActionClass
}

abstract class ControlUnit extends DynamicUnit {
	String[1] submitLabel
	refers ContentUnit cancelDestination
	String cancelLabel

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel.defaultControlStyles.sectionClass.trim() !== '') {
			uiModel.defaultControlStyles.sectionClass.trim()
		} else if (uiModel.defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel.defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultControlStyles.captionClass.trim() !== '') {
			uiModel.defaultControlStyles.captionClass.trim()
		} else if (uiModel.defaultUnitStyles.captionClass.trim() !== '') {
			uiModel.defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel.defaultControlStyles.contentClass.trim() !== '') {
			uiModel.defaultControlStyles.contentClass.trim()
		} else if (uiModel.defaultUnitStyles.contentClass.trim() !== '') {
			uiModel.defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	@OCL(derivation="if localFieldListClass.trim() <> '' then
			localFieldListClass.trim()
		else if uiModel.defaultControlStyles.fieldListClass.trim() <> '' then
			uiModel.defaultControlStyles.fieldListClass.trim()
		else if uiModel.defaultUnitStyles.fieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldListClass
	@OCL(derivation="fieldListClass <> ''")
	derived readonly transient volatile boolean hasFieldListClass

	@OCL(derivation="if localDefinitionFieldListClass.trim() <> '' then
			localDefinitionFieldListClass.trim()
		else if uiModel.defaultControlStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultControlStyles.definitionFieldListClass.trim()
		else if uiModel.defaultUnitStyles.definitionFieldListClass.trim() <> '' then
			uiModel.defaultUnitStyles.definitionFieldListClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String definitionFieldListClass
	@OCL(derivation="definitionFieldListClass <> ''")
	derived readonly transient volatile boolean hasDefinitionFieldListClass

	@OCL(derivation="if localFieldLabelClass.trim() <> '' then
			localFieldLabelClass.trim()
		else if uiModel.defaultControlStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultControlStyles.fieldLabelClass.trim()
		else if uiModel.defaultUnitStyles.fieldLabelClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldLabelClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldLabelClass
	@OCL(derivation="fieldLabelClass <> ''")
	derived readonly transient volatile boolean hasFieldLabelClass

	@OCL(derivation="if localFieldValueClass.trim() <> '' then
			localFieldValueClass.trim()
		else if uiModel.defaultControlStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultControlStyles.fieldValueClass.trim()
		else if uiModel.defaultUnitStyles.fieldValueClass.trim() <> '' then
			uiModel.defaultUnitStyles.fieldValueClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String fieldValueClass
	@OCL(derivation="fieldValueClass <> ''")
	derived readonly transient volatile boolean hasFieldValueClass

	@OCL(derivation="if localControlClass.trim() <> '' then
			localControlClass.trim()
		else if uiModel.defaultControlStyles.controlClass.trim() <> '' then
			uiModel.defaultControlStyles.controlClass.trim()
		else if uiModel.defaultUnitStyles.controlClass.trim() <> '' then
			uiModel.defaultUnitStyles.controlClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String controlClass
	@OCL(derivation="controlClass <> ''")
	derived readonly transient volatile boolean hasControlClass

	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if uiModel.defaultControlStyles.anchorClass.trim() <> '' then
			uiModel.defaultControlStyles.anchorClass.trim()
		else if uiModel.defaultUnitStyles.anchorClass.trim() <> '' then
			uiModel.defaultUnitStyles.anchorClass.trim()
		else
			''
		endif endif endif")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass <> ''")
	derived readonly transient volatile boolean hasAnchorClass
}

class SearchUnit extends ControlUnit {
	refers TabularUnit[1] resultsDestination opposite targettingSearches
}


interface ValueContext {
	op Entity[] referencableTypes()
}

abstract class DisplayValue extends Path {
	@OCL(derivation="if leafFeature().oclIsUndefined() then
			false
		else
			leafFeature().isRequired
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isRequired

	@OCL(derivation="if leafFeature().oclIsUndefined() then
			false
		else
			leafFeature().isSingleton
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isSingleton
}

class AssociationDisplayValue extends AssociationPathElement, DisplayValue {
}

class AttributeDisplayValue extends AttributePathElement, DisplayValue {
}

class ResourceDisplayValue extends ResourcePathElement, DisplayValue {
}

class LabelDisplayValue extends DisplayValue {
	refers ModelLabel[1] label

	op String name() {
		if (label === null ) {
			''
		} else {
			label.name
		}
	}
	
	op Path leafElement() {
		this
	}
}


enum ContainerActionsPlacement {
	Above = 0
	Below = 1
	Float = 2
}

enum InstanceActionsPlacement {
	Footer = 0
	Float = 1
}

interface ActionContainer {
    @GenModel(propertyCategory="Interface")
	ContainerActionsPlacement containerActionsPlacement

    @GenModel(propertyCategory="Interface")
	InstanceActionsPlacement instanceActionsPlacement

	contains Action[] allActions opposite usedBy

	op Action[] actions() {
		allActions.filter[!it.disable].toEList()
	}

	op boolean hasActions() {
		!actions().isEmpty()
	}

	op boolean hasActionsWithDisabledMessage() {
		!actions().filter[it.hasDisabledMessage()].isEmpty()
	}

	op boolean hasActionsWithSuccessMessage() {
		!actions().filter[it.hasSuccessMessage()].isEmpty()
	}

	op boolean hasActionsWithMessages() {
		!actions().filter[it.hasMessages()].isEmpty()
	}

	op Action[] actionsWithoutTarget() {
		actions().filter[!it.isSelectAction()].asEList()
	}

	op Action[] containerActions() {
		actions().filter[it.isContainerAction()].asEList()
	}
	op boolean hasContainerActions() {
		!containerActions().isEmpty()
	}

	op OperationAction[] fileActions() {
		operationActions.filter[it.operation.resultType.literal == 'File'].toEList()
	}
	op boolean hasFileActions() {
		!fileActions().isEmpty()
	}

	op Action[] generalActions() {
		actions().filter[it.isGeneralAction()].asEList()
	}
	op boolean hasGeneralActions() {
		!generalActions().isEmpty()
	}

	op Action[] targetActions() {
		actions().filter[it.isTargetAction()].asEList()
	}
	op boolean hasTargetActions() {
		!targetActions().isEmpty()
	}

	op Action[] instanceActions() {
		actions().filter[it.isInstanceAction()].asEList()
	}
	op boolean hasInstanceActions() {
		!instanceActions().isEmpty()
	}

	op OperationAction[] operationActions() {
		actions().filter[it.isOperationAction()].map[it as OperationAction].asEList()
	}
	op boolean hasOperationActions() {
		!operationActions().isEmpty()
	}

	@OCL(derivation="if self.oclIsKindOf(DynamicUnit) then
			self.oclAsType(DynamicUnit).genModel
		else if self.oclIsKindOf(UnitFeature) then
			self.oclAsType(UnitFeature).genModel
		else
			null
		endif endif")
    @GenModel(propertyCategory="Debug")
	refers readonly unsettable transient volatile derived WafModel genModelRef

	@OCL(derivation="if self.oclIsKindOf(DynamicUnit) then
			self.oclAsType(DynamicUnit).uiModel
		else if self.oclIsKindOf(UnitFeature) then
			self.oclAsType(UnitFeature).uiModel
		else
			null
		endif endif")
    @GenModel(propertyCategory="Debug")
	refers readonly unsettable transient volatile derived WafModel uiModelRef
}

abstract class Action extends NamedDisplayElement {
	refers ActionContainer[1]usedBy opposite allActions

    @GenModel(propertyCategory="Interface")
	String iconName = ''

    @GenModel(propertyCategory="Business")
	boolean disable

	contains Predicate displayWhen

	contains Predicate enableWhen

	op DynamicUnit parentUnit() {
		if (usedBy instanceof DynamicUnit) {
			usedBy as DynamicUnit
		} else if (usedBy instanceof UnitFeature) {
			(usedBy as UnitFeature).displayedOn
		} else {
			return null
		}
	}

	op AuthorisationExpression authorisation() {
		null
	}
	op boolean isAuthorised() {
		authorisation() !== null
	}

	op boolean hasCustomisedAuthorisation() {
		if (authorisation() === null) {
			false
		} else if (parentUnit().authorisation === null) {
			true
		} else {
			!authorisation().areSame(parentUnit().authorisation)
		}
	}

	op boolean isContainerAction() {
		false
	}

	op boolean isGeneralAction() {
		false
	}

	op boolean isInstanceAction() {
		false
	}

	op boolean isOperationAction() {
		false
	}

	op boolean isSelectAction() {
		false
	}

	op boolean isTargetAction() {
		false
	}

    @GenModel(propertyCategory="Interface")
	String confirmMessage = ''
	op boolean hasConfirmMessage() {
		confirmMessage.trim() !== ''
	}

    @GenModel(propertyCategory="Interface")
	String successMessage = ''
	op boolean hasSuccessMessage() {
		successMessage.trim() !== ''
	}

    @GenModel(propertyCategory="Interface")
	String failureMessage = ''
	op boolean hasFailureMessage() {
		failureMessage.trim() !== ''
	}

    @GenModel(propertyCategory="Interface")
	String disabledMessage = ''
	op boolean hasDisabledMessage() {
		disabledMessage.trim() !== ''
	}

	op boolean hasMessages() {
		hasConfirmMessage() || hasSuccessMessage() || hasFailureMessage() || hasDisabledMessage()
	}

    @GenModel(propertyCategory="Style")
	String localAnchorClass = ''
	@OCL(derivation="if localAnchorClass.trim() <> '' then
			localAnchorClass.trim()
		else if usedBy.oclIsKindOf(DynamicUnit) then
			if self.isInstanceAction() = true then
				if parentUnit().oclIsKindOf(CollectionUnit) then
					if parentUnit().oclAsType(CollectionUnit).hasCommonInstanceActionClass = true then
						parentUnit().oclAsType(CollectionUnit).commonInstanceActionClass
					else
						''
					endif
				else
					''
				endif
			else
				if parentUnit().hasCommonAnchorClass= true then
					parentUnit().commonAnchorClass
				else
					''
				endif
			endif
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile String anchorClass
	@OCL(derivation="anchorClass.trim() <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasAnchorClass
}

class DeleteAction extends Action {
    @GenModel(propertyCategory="Navigation")
	String[1] uriElement

	contains AuthorisationExpression localAuthorisation

	op AuthorisationExpression authorisation() {
		if (localAuthorisation !== null) {
			localAuthorisation
		} else {
			parentUnit()?.authorisation
		}
	}

	op boolean isInstanceAction() {
		true
	}
}

abstract class SelectAction extends Action {
    @GenModel(propertyCategory="Navigation")
	refers SelectableUnit[1] target opposite selectors
	contains DisplayValue valuePath

	op AuthorisationExpression authorisation() {
		if (target === null) {
			null
		} else {
			(target as DynamicUnit).authorisation
		}
	}

	op boolean isSelectAction() {
		true
	}
}

class ContainerSelectAction extends SelectAction {
	op boolean isContainerAction() {
		true
	}
}

class InstanceSelectAction extends SelectAction {
	op boolean isInstanceAction() {
		true
	}
}

class TargetAction extends SelectAction {
	op boolean isTargetAction() {
		true
	}
}

abstract class OperationAction extends Action {
	@OCL(derivation="if operation.oclIsUndefined() then
			OrderedSet(service::Service){}
		else
			OrderedSet(service::Service){ operation.partOf }
		endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly transient volatile Service[] servicesUsed
	@OCL(derivation="servicesUsed->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasServicesUsed

    @GenModel(propertyCategory="Business")
	refers BusinessOperation[1] operation

    @GenModel(propertyCategory="Navigation")
	String[1] uriElement

	contains AuthorisationExpression localAuthorisation

	op AuthorisationExpression authorisation() {
		if (localAuthorisation !== null) {
			localAuthorisation
		} else {
			parentUnit()?.authorisation
		}
	}

	op boolean isOperationAction() {
		true
	}
}

class InstanceOperationAction extends OperationAction {
	op boolean isInstanceAction() {
		true
	}
}

class ContainerOperationAction extends OperationAction {
}

class GeneralOperationAction extends OperationAction {
	op boolean isGeneralAction() {
		true
	}
}


class Message extends ValueContext {
	String[1] text
	contains DisplayValue[] features
}