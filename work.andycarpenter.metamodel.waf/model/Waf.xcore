@Ecore(
	nsURI="http://andycarpenter.work/metamodel/WebApplicationFramework",
	nsPrefix="waf"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.waf.edit/src",
	editPluginID="work.andycarpenter.metamodel.waf.edit",
	childCreationExtenders="true",
	editorDirectory="/work.andycarpenter.metamodel.waf.editor/src",
	testsDirectory="/work.andycarpenter.metamodel.waf.tests/src",
	complianceLevel="17.0"
)
package work.andycarpenter.metamodel.waf

import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.common.util.ECollections
import work.andycarpenter.metamodel.api.API
import work.andycarpenter.metamodel.base.Classifier
import work.andycarpenter.metamodel.base.DataType
import work.andycarpenter.metamodel.base.EnumerationType
import work.andycarpenter.metamodel.base.NamedDisplayElement
import work.andycarpenter.metamodel.base.NamedElement
import work.andycarpenter.metamodel.expression.Expression
import work.andycarpenter.metamodel.expression.Predicate
import work.andycarpenter.metamodel.orm.Association
import work.andycarpenter.metamodel.orm.AssociationPathElement
import work.andycarpenter.metamodel.orm.Attribute
import work.andycarpenter.metamodel.orm.AttributePathElement
import work.andycarpenter.metamodel.orm.DateDetails
import work.andycarpenter.metamodel.orm.Entity
import work.andycarpenter.metamodel.orm.Feature
import work.andycarpenter.metamodel.orm.Filter
import work.andycarpenter.metamodel.orm.Label
import work.andycarpenter.metamodel.orm.LocationFeature
import work.andycarpenter.metamodel.orm.ModelLabel
import work.andycarpenter.metamodel.orm.OrmModel
import work.andycarpenter.metamodel.orm.Path
import work.andycarpenter.metamodel.orm.Repository
import work.andycarpenter.metamodel.orm.ResourceFeature
import work.andycarpenter.metamodel.orm.ResourcePathElement
import work.andycarpenter.metamodel.orm.Selection
import work.andycarpenter.metamodel.security.AuthorisationExpression
import work.andycarpenter.metamodel.security.SecurityModel
import work.andycarpenter.metamodel.service.BusinessOperation
import work.andycarpenter.metamodel.service.Service
import work.andycarpenter.metamodel.service.ServiceModel

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


enum FrameworkTechnologies {
	JSF
	CakePHP = 1
	CodeIgniter = 2
	Kohana = 3
	Laravel = 4
	Symfony = 5
}

class WafModel {
	contains SiteProperties siteProperties
	refers OrmModel[1] persistence
	refers SecurityModel security
	refers ServiceModel[1] business
	refers API api
	contains ImageManipulation[] imageManipulations
	contains Navigation navigation opposite partOf
	contains Controller[] controllers opposite partOf
	String defaultSaveLabel
	String defaultCancelLabel

	op boolean hasAPI() {
		api !== null
	}

	@OCL(derivation="controllers->collect(c | c.editUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile EditUnit[] editUnits

	op boolean hasEditUnits() {
		!editUnits.isEmpty()
	}

	@OCL(derivation="controllers->collect(c | c.formUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile SingletonUnit[] formUnits

	op boolean hasFormUnits() {
		!formUnits.isEmpty()
	}

	@OCL(derivation="controllers->collect(c | c.collectionUnitsWithFilters())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile CollectionUnit[] collectionUnitsWithFilters

	@OCL(derivation="controllers->collect(c | c.imageUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile ImageUnit[] imageUnits

	op boolean hasImageUnits() {
		!imageUnits.isEmpty()
	}

	@OCL(derivation="controllers->collect(c | c.imageCardsUnits())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile ImageCardsUnit[] imageCardsUnits

	op boolean hasImageCardsUnits() {
		!imageCardsUnits.isEmpty()
	}

	@OCL(derivation="controllers->collect(c | c.autocompleteFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitAssociation[] autocompleteFields
	op boolean hasAutocompleteFields() {
		!autocompleteFields.isEmpty()
	}

	@OCL(derivation="controllers->collect(c | c.formFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] formFields
	op boolean hasFormFields() {
		!formFields.isEmpty()
	}

	op boolean hasFormAssociations() {
		formFields.exists[f | f.isAssociationField()]
	}

	op boolean hasResourceFields() {
		controllers.exists[c | c.hasResourceFields()]
	}

	@OCL(derivation="if self.security.oclIsUndefined() then false else security.isAuthenticated endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isAuthenticated

	boolean useFormFloatingLabels = 'false'

    @GenModel(propertyCategory="Style")
	String defaultPageClass = ''
    contains DefaultUnitStyles defaultUnitStyles
    contains CardsUnitStyles defaultCardsStyles
    contains ImageCardsUnitStyles defaultImageCardsStyles
    contains ControlUnitStyles defaultControlStyles
    contains DetailsUnitStyles defaultDetailsStyles
    contains FormUnitStyles defaultFormStyles
    contains GalleryUnitStyles defaultGalleryStyles
    contains SliderUnitStyles defaultSliderStyles
    contains StaticUnitStyles defaultStaticStyles
    contains TabularUnitStyles defaultTabularStyles

   	op WafModel genModel() {
		this
	}

	op WafModel uiModel() {
		this
	}
}

class SiteProperties {
	String[1] siteName
	String[1] siteTitle
	String[1] locale
	String webmasterEmail
	String copyrightText
	String metaDescription
	String logoImage
	refers ImageManipulation logoFilters
	FrameworkTechnologies frameworkTechnology
	boolean useDbSessionStorage
	String textEditorURL
	String siteTemplate
	String securityFromEmail = ''
	String securityFromName = ''
	boolean staticUnitsEditable
}

class Navigation {
	refers WafModel[1] partOf opposite navigation
	contains Menu[] menus opposite definedBy
	
	String navbarClass = "navbar"
	op boolean hasNavbarClass() {
		navbarClass.trim() !== ''
	}

	AuthenticationMenuPlacement authenticationMenuPlacement
	String authenticationBarClass = "nav"
	op boolean hasAuthenticationBarClass() {
		authenticationBarClass.trim() !== ''
	}
}

enum AuthenticationMenuPlacement {
	Above = 0
	Below = 1
	Integrated = 2
}

class Menu extends NamedDisplayElement {
	refers Navigation[1] definedBy opposite menus
	contains MenuEntry[] entries opposite partOf
	boolean omitCaption
	String styleClass
	String captionClass
	String layoutClass
}

abstract class MenuEntry {
	container Menu[1] partOf opposite entries
}

class SubmenuEntry extends Menu, MenuEntry {
	contains AuthorisationExpression authorisation
	@OCL(derivation="not authorisation.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isAuthorised
	@OCL(derivation="entries
		->select(e | e.oclIsTypeOf(ActionMenuEntry)).oclAsType(ActionMenuEntry)
		->exists(e | e.alwaysVisible = true)")
    @GenModel(propertyCategory="Debug")
	boolean alwaysVisible
}

class ActionMenuEntry extends MenuEntry, NamedDisplayElement {
	refers ContentUnit[1] action
	boolean alwaysVisible = "false"
}

class EditStaticTextMenuEntry extends MenuEntry, NamedDisplayElement {
}


abstract class ContentUnitStyles {
	String sectionClass = ''
	String captionClass = ''
	String contentClass = ''
}

abstract class DynamicUnitStyles extends ContentUnitStyles {
	String fieldListClass = ''
	String definitionFieldListClass = ''
	String fieldLabelClass = ''
	String fieldValueClass = ''
	String controlClass = ''
	String actionClass = ''
}

class CollectionUnitStyles extends DynamicUnitStyles {
	String instanceControlClass = ''
	String instanceActionClass = ''
}

class DefaultUnitStyles extends CollectionUnitStyles {
}

class CardsUnitStyles extends CollectionUnitStyles {
	String cardClass = ''
	String cardHeaderClass = ''
	String cardBodyClass = ''
	String cardFooterClass = ''
	String badgeClass = ''
}

class ImageCardsUnitStyles extends CardsUnitStyles {
	String imageActionClass = ''
}

class ControlUnitStyles extends DynamicUnitStyles {
}

class DetailsUnitStyles extends DynamicUnitStyles {
}

class FormUnitStyles extends DynamicUnitStyles {
	String inputGroupClass = ''
}

class GalleryUnitStyles extends CollectionUnitStyles {
}

class SliderUnitStyles extends CollectionUnitStyles {
}

class StaticUnitStyles extends ContentUnitStyles {
}

class TabularUnitStyles extends CollectionUnitStyles {
	String headerClass = ''
	String footerClass = ''
}


abstract class DisplayElement {
	String[1] displayLabel = ''
}


class ImageManipulation extends NamedElement {
	int jpegQuality = "-1"
	contains ImageFilter[] filters
}


abstract class ImageFilter {
}

enum BackgroundPositions {
	TopLeft = 0,
	Top = 1,
	TopRight = 2,
	Left = 3,
	Center = 4,
	Right = 5,
	BottomLeft = 6,
	Bottom = 7,
	BottomRight = 8
}

class BackgroundFilter extends ImageFilter {
	String color
	int width
	int height
	BackgroundPositions position
}


enum ThumbnailModes {
	Crop = 0,
	Resize = 1
}

class ThumbnailFilter extends ImageFilter {
	int width
	int height
	ThumbnailModes mode
}


abstract class Controller extends NamedDisplayElement {
	container WafModel partOf opposite controllers

	refers Controller parentController opposite childControllers

	refers Controller[] childControllers opposite parentController

	contains ContentUnit[] units opposite controller

	op boolean hasUnits() {
		!units.isEmpty()
	}

	op boolean isSinglePage() {
		false
	}

	op boolean isMultiPage() {
		false
	}

	op AuthorisationExpression commonAuthorisation() {
		if (!hasUnits()) {
			null
		} else if (hasCommonUnitAuthorisation) {
			units.head.authorisation
		} else {
			null
		}
	}

	op boolean isAuthorised() {
		commonAuthorisation() !== null
	}

	op boolean hasAuthorisation() {
		isAuthorised() || units.exists[u | u.hasAuthorisation()]
	}

	op boolean hasCommonUnitAuthorisation() {
		if (units.forall[u | !u.isAuthorised()]) {
			true
		} else if (!units.forall[u | u.isAuthorised()]) {
			false
		} else if (units.size < 2) {
			true
		} else {
			units.drop(1).forall[u | u.authorisation.areSame(units.head.authorisation)]
		}
	}

	op boolean hasChangableCollections() {
		!editUnits().filter[it.hasChangableCollections].isEmpty()
	}

	op boolean hasCaptchaUnits() {
		!editUnits().filter[it.hasCaptcha].isEmpty()
	}

	op CollectionUnit[] collectionUnits() {
		units.filter[it instanceof CollectionUnit].map[it as CollectionUnit].asEList()
	}
	op boolean hasCollectionUnits() {
		!collectionUnits().isEmpty()
	}

	op DynamicUnit[] dynamicUnits() {
		units.filter[it instanceof DynamicUnit].map[it as DynamicUnit].toEList()
	}
	op boolean hasDynamicUnits() {
		!dynamicUnits().isEmpty()
	}

	op EditUnit[] editUnits() {
		dynamicUnits().filter[it instanceof EditUnit].map[it as EditUnit].toEList()
	}
	op boolean hasEditUnits() {
		!editUnits().isEmpty()
	}

	op SingletonUnit[] formUnits() {
		dynamicUnits().filter[it.isFormUnit].map[it as SingletonUnit].toEList()
	}
	op boolean hasFormUnits() {
		!formUnits().isEmpty()
	}

	op boolean hasFilters() {
		!collectionUnits().filter[it.hasFilters].isEmpty()
	}

	op CollectionUnit[] collectionUnitsWithFilters() {
		collectionUnits().filter[it.hasCollectionFilters()].toEList()
	}

	op boolean hasCollectionFilters() {
		!collectionUnitsWithFilters().isEmpty()
	}

	op boolean hasTextFilters() {
		collectionUnits().exists[u | u.hasTextFilters]
	}

	op GalleryUnit[] galleryUnits() {
		dynamicUnits().filter[it instanceof GalleryUnit].map[it as GalleryUnit].toEList()
	}
	op boolean hasGalleryUnits() {
		!galleryUnits().isEmpty()
	}

	op TabularUnit[] tabularUnits() {
		dynamicUnits().filter[it instanceof TabularUnit].map[it as TabularUnit].toEList()
	}
	op boolean hasTabularUnits() {
		!tabularUnits().isEmpty()
	}

	op ImageUnit[] imageUnits() {
		dynamicUnits().filter[it instanceof ImageUnit].map[it as ImageUnit].toEList()
	}
	op boolean hasImageUnits() {
		!imageUnits().isEmpty()
	}

	op ImageCardsUnit[] imageCardsUnits() {
		imageUnits().filter[it instanceof ImageCardsUnit].map[it as ImageCardsUnit].toEList()
	}
	op boolean hasImageCardsUnits() {
		!imageCardsUnits().isEmpty()
	}

	op MapUnit[] mapUnits() {
		dynamicUnits().filter[it instanceof MapUnit].map[it as MapUnit].toEList()
	}
	op boolean hasMapUnits() {
		!mapUnits().isEmpty()
	}

	op SliderUnit[] sliderUnits() {
		dynamicUnits().filter[it instanceof SliderUnit].map[it as SliderUnit].toEList()
	}
	op boolean hasSliderUnits() {
		!sliderUnits().isEmpty()
	}

	@OCL(derivation="dynamicUnits()->collect(u | u.servicesUsed)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Service[] servicesUsed

	op boolean hasPagination() {
		collectionUnits().exists[u | u.hasPagination]
	}

	@OCL(derivation="dynamicUnits()->collect(u | u.associationFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitAssociation[] associationFields

	@OCL(derivation="dynamicUnits()->collect(u | u.autocompleteFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitAssociation[] autocompleteFields
	op boolean hasAutocompleteFields() {
		!autocompleteFields.isEmpty()
	}

	@OCL(derivation="dynamicUnits()->collect(u | u.formFields)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived unsettable readonly transient volatile UnitField[] formFields

	op boolean hasImageFields() {
		!dynamicUnits().filter[it.hasImageFields].isEmpty
	}

	op boolean hasInterfaceFields() {
		!dynamicUnits().filter[it.hasInterfaceFields].isEmpty
	}

	op boolean hasRequiredInterfaceFields() {
		!dynamicUnits().filter[it.hasRequiredInterfaceFields].isEmpty
	}

	op boolean hasResourceFields() {
		!dynamicUnits().filter[it.hasResourceFields].isEmpty
	}

	@OCL(derivation="dynamicUnits()->collect(u | u.actionsWithoutTarget())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Action[] actionsWithoutTarget
	
	@OCL(derivation="dynamicUnits()->collect(u | u.fileActions())->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile OperationAction[] fileActions
	op boolean hasFileActions() {
		!fileActions.isEmpty()
	}

	op boolean hasActionsWithDisabledMessage() {
		!dynamicUnits().filter[it.hasActionsWithDisabledMessage()].isEmpty()
	}

	op boolean hasSuccessMessages() {
		!dynamicUnits().filter[it.hasActionsWithSuccessMessage()].isEmpty()
	}

	op boolean hasMessages() {
		!editUnits.filter[it.hasMessages].isEmpty()
		|| !dynamicUnits().filter[it.hasActionsWithMessages()].isEmpty()
	}

    @GenModel(propertyCategory="Navigation")
	String uriElement = ''

    @GenModel(propertyCategory="Style")
	String[1] localPageClass = ''
	op String pageClass() {
		if (localPageClass.trim() !== '') {
			localPageClass.trim()
		} else if (uiModel().defaultPageClass.trim() !== '') {
			uiModel().defaultPageClass.trim()
		} else {
			''
		}
	}
	op boolean hasPageClass() {
		pageClass() !== ''
	}

   	op WafModel genModel() {
		partOf.genModel()
	}

   	op WafModel uiModel() {
		partOf.uiModel()
	}

	@OCL(derivation="if parentController = null then
			self
		else
			parentController.rootController
		endif")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived Controller rootController
}

class SinglePageController extends Controller {
	op boolean isSinglePage() {
		true
	}
}

class MultiPageController extends Controller {
	op boolean isMultiPage() {
		true
	}
}

abstract class ContentUnit extends NamedDisplayElement {
	container Controller[1] controller opposite units

    @GenModel(propertyCategory="Navigation")
	String uriElement = ''

    @GenModel(propertyCategory="Navigation")
    refers ContentUnit uriParent

	contains AuthorisationExpression authorisation
	op boolean isAuthorised() {
		authorisation !== null
	}

	op boolean hasAuthorisation() {
		isAuthorised()
	}

	String purposeSummary
	String alternative
	boolean omitCaption

	@OCL(derivation="self.oclIsKindOf(EditUnit) or self.oclIsKindOf(ControlUnit)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isFormUnit

	@GenModel(propertyCategory="Style")
	String localSectionClass = ''
	@GenModel(propertyCategory="Style")
	String localCaptionClass = ''
	@GenModel(propertyCategory="Style")
	String localContentClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else {
			''
		}
	}
	op boolean hasSectionClass() {
		sectionClass() !== ''
	}

	op String captiontClass() {
		if (localCaptionClass.trim() !== '') {
			localCaptionClass.trim()
		} else {
			''
		}
	}
	op boolean hasCaptionClass() {
		captiontClass() !== ''
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else {
			''
		}
	}
	op boolean hasContentClass() {
		contentClass() !== ''
	}

	op WafModel genModel() {
		controller.genModel()
	}

	op WafModel uiModel() {
		controller.uiModel()
	}
}

class StaticUnit extends ContentUnit {
	refers Repository repository
	String[1] content

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultStaticStyles.sectionClass.trim() !== '') {
			uiModel().defaultStaticStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultStaticStyles.captionClass.trim() !== '') {
			uiModel().defaultStaticStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultStaticStyles.contentClass.trim() !== '') {
			uiModel().defaultStaticStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}
}

abstract class DynamicUnit extends ContentUnit, ActionContainer {
	refers Entity[1] contentType

	@OCL(derivation="if not contentType.oclIsUndefined() then
			contentType.containingAssociation
		else
			null
		endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile Association containingAssociation

	op boolean hasAuthorisation() {
		isAuthorised() || actions().exists[a | a.isAuthorised()]
	}

	op Entity containingType() {
		if (contentType === null) {
			null
		} else {
			contentType.containingType
		}
	}

	op boolean isContained() {
		containingType() !== null
	}

	op Entity[] referencableTypes() {
		var types = new BasicEList<Entity>()
		if (contentType !== null) {
			types.add(contentType)
		}
		return types
	}

	@OCL(derivation="if self.oclIsKindOf(EditUnit) and not containingAssociation.oclIsUndefined() then
			featureFields->exists(f | f.leafFeature() = containingAssociation)
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasExplicitlyEditedContainer

	@OCL(derivation="operationActions()->collect(u | u.servicesUsed)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived Service[] servicesUsed
	@OCL(derivation="servicesUsed->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasServicesUsed

    @GenModel(propertyCategory="Business")
	contains RouteActual[] routeActuals

    @GenModel(propertyCategory="Model")
	contains UnitField[] displayFields opposite displayedOn

    @GenModel(propertyCategory="Business")
	contains Predicate hideWhen

	@OCL(derivation="not hideWhen.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isConditionallyDisplayed

    @GenModel(propertyCategory="Interface")
	String messageWhenHidden = ''
	@OCL(derivation="self.isConditionallyDisplayed = true and messageWhenHidden.trim() <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasHiddenMessage

	String header
	String footer

	refers derived readonly unsettable transient volatile UnitAssociation[] associationFields get {
		displayFields.filter[it.isAssociationField()].map[it as UnitAssociation].toEList()
	}
	derived readonly unsettable transient volatile boolean hasAssociationFields get {
		!associationFields.isEmpty()
	}

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
				associationFields->select(f | f.useAutocomplete)->asOrderedSet()
			else
				OrderedSet{}
			endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly transient volatile UnitAssociation[] autocompleteFields
	derived readonly unsettable transient volatile boolean hasAutocompleteFields get {
		autocompleteFields.isEmpty()
	}

	derived readonly unsettable transient volatile boolean hasBooleanFields get {
		displayFields.exists[it.isBooleanField()]
	}

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
				self.oclAsType(EditUnit).useCaptcha
			else
				false
			endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCaptcha

	@OCL(derivation="if self.oclIsKindOf(EditUnit) then
				collectionFields
					->select(f | f.isFeatureField()).oclAsType(UnitFeature)
					->select(f | f.collectionUiAllowAdd = true or f.collectionUiAllowRemove = true)
					->notEmpty()
			else
				false
			endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasChangableCollections

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] collectionFields get {
		displayFields.filter[!it.isSingletonField()].toEList()
	}

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitFeature[] collectionFeatures get {
		collectionFields.filter[it.isFeatureField()].map[it as UnitFeature].toEList()
	}

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] dataTypeFields get {
		displayFields.filter[it.isDataTypeField()].toEList()
	}

    @GenModel(propertyCategory="Debug")
	refers derived readonly unsettable transient volatile UnitField[] dateFields get {
		displayFields.filter[it.isDateField()].toEList()
	}

	@OCL(derivation="displayFields->select(f | f.hasDefaultValue = true)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] defaultValueFields

	derived readonly unsettable transient volatile boolean hasDefaultValueFields get {
		!defaultValueFields.isEmpty()
	}

	@OCL(derivation="displayFields->exists(f | f.isDisabled)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasDisabledFields

	@OCL(derivation="displayFields->exists(f | f.isEmailField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasEmailFields

	@OCL(derivation="displayFields->select(f | f.isEncryptedField() = true)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] encryptedFields

	@OCL(derivation="encryptedFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasEncryptedFields

	@OCL(derivation="displayFields->select(f | f.isEnumerationField() = true)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] enumerationFields
	@OCL(derivation="enumerationFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasEnumerationFields

	@OCL(derivation="displayFields->select(f | f.isFeatureField()).oclAsType(UnitFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitFeature[] featureFields
	@OCL(derivation="featureFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFeatureFields

	@OCL(derivation="resourceFields->select(f | f.resource.isFileFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitResource[] fileFields
	@OCL(derivation="fileFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFileFields

	@OCL(derivation="displayFields->select(f | f.hasForcedValue)")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] forcedValueFields
	@OCL(derivation="forcedValueFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasForcedValueFields

	@OCL(derivation="if self.isFormUnit = true then
				displayFields
			else
				OrderedSet{}
			endif")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitField[] formFields

	@OCL(derivation="resourceFields->select(f | f.resource.isImageFeature)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitResource[] imageFields
	@OCL(derivation="imageFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasImageFields

	@OCL(derivation="displayFields->exists(f | f.isIntegerField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasIntegerFields

	@OCL(derivation="displayFields->select(f | f.oclIsKindOf(InterfaceField)).oclAsType(InterfaceField)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived InterfaceField[] interfaceFields
	@OCL(derivation="interfaceFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasInterfaceFields

	@OCL(derivation="interfaceFields->exists(f | f.isRequiredField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasRequiredInterfaceFields

	@OCL(derivation="displayFields->exists(f | f.isObfuscatedField() = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasObfuscatedFields

	@OCL(derivation="displayFields->exists(f | f.isRepeated = true)")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasRepeatedFields

	@OCL(derivation="displayFields->select(f | f.isResourceField() = true).oclAsType(UnitResource)->asOrderedSet()")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile unsettable derived UnitResource[] resourceFields
	@OCL(derivation="resourceFields->notEmpty()")
    @GenModel(propertyCategory="Debug")
	readonly transient volatile unsettable derived boolean hasResourceFields

	@OCL(derivation="displayFields->exists(f | f.isStringField())")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasStringFields

	@OCL(derivation="displayFields->exists(f | f.isTextareaField())")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasTextareaFields

	@OCL(derivation="displayFields->exists(f | f.isUrlField())")
    @GenModel(propertyCategory="Debug")
	derived readonly transient unsettable volatile boolean hasUrlFields

	@GenModel(propertyCategory="Style")
	String localFieldListClass = ''
	@GenModel(propertyCategory="Style")
	String localDefinitionFieldListClass = ''
	@GenModel(propertyCategory="Style")
	String localFieldLabelClass = ''
	@GenModel(propertyCategory="Style")
	String localFieldValueClass = ''
	@GenModel(propertyCategory="Style")
	String localControlClass = ''
	@GenModel(propertyCategory="Style")
	String localActionClass = ''

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		}  else {
			''
		}
	}
 	op boolean hasFieldListClass() {
		fieldListClass() !== ''
	}
	

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		}  else {
			''
		}
	}
	op boolean hasDefinitionFieldListClass() {
		definitionFieldListClass() !== ''
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		}  else {
			''
		}
	}
	op boolean hasFieldLabelClass() {
		fieldLabelClass() !== ''
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		}  else {
			''
		}
	}
	op boolean hasFieldValueClass() {
		fieldValueClass() !== ''
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		}  else {
			''
		}
	}
	op boolean hasControlClass() {
		controlClass() !== ''
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		}  else {
			''
		}
	}
	op boolean hasActionClass() {
		actionClass() !== ''
	}
}

class RouteActual {
	refers Attribute[1] routeParameter
	contains Expression[1] value
}

enum CollectionDisplayOptions {
	LineDirection
	PageDirection = 1
}

interface UnitField extends DisplayElement {
	container DynamicUnit[1] displayedOn opposite displayFields

  	op String fieldName() {
		''
	}

	contains AuthorisationExpression authorisation
	@OCL(derivation="not authorisation.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isAuthorised

	@OCL(derivation="if self.isFeatureField() = true then
			(displayLabel.trim() <> '')
				and (displayLabel.trim() <> self.oclAsType(UnitFeature).leafFeature().displayLabel.trim())
		else if self.isInterfaceField() = true then
			true
		else
			false
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCustomisedDisplayLabel

	@OCL(derivation="if self.isInterfaceField() = true then
			self.oclAsType(InterfaceField).repeatedField
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isRepeated

	@OCL(derivation="if self.isFeatureField() = true then
			let feature : UnitFeature = self.oclAsType(UnitFeature)
				in if feature.titleOverride.trim() <> '' then
						feature.titleOverride.trim()
					else if feature.displayLabel.trim() <> '' then
						feature.displayLabel.trim()
					else if feature.leafFeature().displayLabel.trim() <> '' then
						feature.leafFeature().displayLabel.trim()
					else
						feature.leafFeature().name
					endif endif endif
		else if self.isInterfaceField() = true then
			let field : InterfaceField = self.oclAsType(InterfaceField)
				in if field.fieldTitle.trim() <> '' then
						field.fieldTitle.trim()
					else if field.displayLabel.trim() <> '' then
						field.displayLabel.trim()
					else
						field.name
					endif endif
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String title
	@OCL(derivation="title <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasTitle

	@OCL(derivation="if self.isFeatureField() = true then
			title <> self.oclAsType(UnitFeature).leafFeature().displayLabel.trim()
		else
			title <> ''
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCustomisedTitle

	@OCL(derivation="if self.isInterfaceField() and self.isRepeated then
			self.oclAsType(InterfaceField).secondTitle.trim() <> ''
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSecondTitle

	@OCL(derivation="if self.isFeatureField() = true then
			let feature : UnitFeature = self.oclAsType(UnitFeature)
				in if feature.placeholderOverride.trim() <> '' then
						feature.placeholderOverride.trim()
					else if feature.displayLabel.trim() <> '' then
						feature.displayLabel.trim()
					else if feature.leafFeature().displayLabel.trim() <> '' then
						feature.leafFeature().displayLabel.trim()
					else
						feature.leafFeature().name
					endif endif endif
		else if self.isInterfaceField() = true then
			let field : InterfaceField = self.oclAsType(InterfaceField)
				in if field.fieldPlaceholder.trim() <> '' then
						field.fieldPlaceholder.trim()
					else if field.displayLabel.trim() <> '' then
						field.displayLabel.trim()
					else
						field.name
					endif endif
		else
			''
		endif endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String placeholder
	@OCL(derivation="placeholder <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasPlaceholder

	@OCL(derivation="if self.isFeatureField() = true then
			placeholder <> self.oclAsType(UnitFeature).leafFeature().displayLabel.trim()
		else
			placeholder <> ''
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasCustomisedPlaceholder

	@OCL(derivation="if self.isInterfaceField() and self.isRepeated then
			self.oclAsType(InterfaceField).secondPlaceholder.trim() <> ''
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSecondPlaceholder

	String localHelp = ''
	@OCL(derivation="if self.oclIsTypeOf(UnitLabel) then
			''
		else
			if localHelp.trim() <> '' then
				localHelp.trim()
			else
				''
			endif
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile String help
	@OCL(derivation="help <> ''")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasHelp

	@OCL(derivation="if self.oclIsKindOf(InterfaceField) and self.isRepeated then
			self.oclAsType(InterfaceField).secondHelp.trim() <> ''
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasSecondHelp

	contains Predicate hideWhen

	@OCL(derivation="if self.isAssociationField() = true then
			self.oclAsType(UnitAssociation).association.isContains
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isContains

	@OCL(derivation="disabledInput")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isDisabled

	String defaultDisplay
	contains Predicate displayDefaultWhen

 	op boolean isAssociationField() {
		false
	}

 	op boolean isAttributeField() {
		false
	}

  	op boolean isBooleanField() {
		false
	}

  	op boolean isDataTypeField() {
		false
	}

  	op boolean isDateField() {
		false
	}

   	op boolean isEmailField() {
		false
	}

  	op boolean isEncryptedField() {
		false
	}

  	op boolean isEnumerationField() {
		false
	}

  	op boolean isFeatureField() {
		false
	}

  	op boolean isInterfaceField() {
		false
	}

  	op boolean isIntegerField() {
		false
	}

  	op boolean isLabelField() {
		false
	}

  	op boolean isLocationField() {
		false
	}

  	op boolean isObfuscatedField() {
		false
	}

 	op boolean isResourceField() {
		false
	}

   	op boolean isRequiredField() {
		false
	}

 	op boolean isSingletonField() {
		true
	}

 	op boolean isStringField() {
		false
	}

  	op boolean isTextareaField() {
		false
	}

  	op boolean isUrlField() {
		false
	}

 	op boolean hasDefaultDisplay() {
		defaultDisplay !== null
	}

 	op boolean hasDisplayDefaultWhen() {
		hasDefaultDisplay() && displayDefaultWhen !== null
	}

 	op boolean hasDefaultValue() {
		defaultValue() !== null
	}

 	op boolean hasEmptyCollectionDisplay() {
		false
	}

  	op Action[] actions() {
		ECollections.emptyEList()
	}

 	op Classifier dataType() {
		null
	}

  	op DateDetails dateDetails() {
		null
	}

  	op Expression defaultValue() {
		null
	}

  	op EnumerationType enumerationType() {
		null
	}

	@OCL(derivation="if self.isAttributeField() = true then
			self.oclAsType(UnitAttribute).attributeDefaultValue
		else if self.isInterfaceField() = true then
			self.oclAsType(InterfaceField).fieldDefaultValue
		else
			null
		endif endif")
    @GenModel(propertyCategory="Debug")
	refers readonly transient volatile derived Expression defaultValue

	@OCL(derivation="not defaultValue.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasDefaultValue

	@OCL(derivation="if self.isFeatureField() = true then
			not self.oclAsType(UnitFeature).forcedValue.oclIsUndefined()
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasForcedValue

	boolean escapeHTML = "true"
	CollectionDisplayOptions collectionDisplayOption
	boolean truncate
	String dateFormat
	boolean disabledInput
	String headerClass

	@GenModel(propertyCategory="Style")
	String localInputGroupClass = ''
	@GenModel(propertyCategory="Style")
	String localFieldLabelClass = ''
	@GenModel(propertyCategory="Style")
	String localFieldValueClass = ''

	op String inputGroupClass() {
		if (localInputGroupClass.trim() !== '') {
			localInputGroupClass.trim()
		}  else if (displayedOn instanceof EditUnit) {
			if ((displayedOn as EditUnit).hasInputGroupClass()) {
				(displayedOn as EditUnit).inputGroupClass()
			} else {
				''
			}
		}  else {
			''
		}
	}
	op boolean hasInputGroupClass() {
		inputGroupClass() !== ''
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		}  else if (displayedOn.hasFieldLabelClass()) {
			displayedOn.fieldLabelClass()
		}  else {
			''
		}
	}
	op boolean hasFieldLabelClass() {
		fieldLabelClass() !== ''
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		}  else if (displayedOn.hasFieldValueClass()) {
			displayedOn.fieldValueClass()
		}  else {
			''
		}
	}
	op boolean hasFieldValueClass() {
		fieldLabelClass() !== ''
	}

   	op WafModel genModel() {
		displayedOn.genModel()
	}

   	op WafModel uiModel() {
		displayedOn.uiModel()
	}
}

abstract class UnitFeature extends UnitField, Path, ActionContainer {
  	op String fieldName() {
		name()
	}

	String titleOverride = ''
	String placeholderOverride = ''
	contains Expression forcedValue
	boolean collectionUiAllowAdd = "true"
	boolean collectionUiAllowRemove = "true"
	int collectionMaximumValues = "0"
	String emptyCollectionDisplay
	boolean autofocus
	String footer

	op Entity contextEntity() {
		displayedOn.contentType
	}

 	op boolean hasEmptyCollectionDisplay() {
		emptyCollectionDisplay !== null
	}

  	op boolean isAssociationField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature() instanceof Association
		}
	}

 	op boolean isAttributeField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature() instanceof Attribute
		}
	}

  	op boolean isBooleanField() {
		if (isDataTypeField()) {
			leafFeature().isBooleanFeature
		} else {
			false
		}
	}

  	op boolean isDataTypeField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature().isDataTypeFeature
		}
	}

  	op boolean isDateField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature().isDateFeature
		}
	}

  	op boolean isEmailField() {
		if (isDataTypeField()) {
			leafFeature().isEmailFeature
		} else {
			false
		}
	}

  	op boolean isEncryptedField() {
		if (isDataTypeField()) {
			false
		} else {
			leafFeature().isEncrypted
		}
	}

  	op boolean isEnumerationField() {
		if (isDataTypeField()) {
			leafFeature().isEnumerationFeature
		} else {
			false
		}
	}

   	op boolean isFeatureField() {
		true
	}

  	op boolean isIntegerField() {
		if (isDataTypeField()) {
			leafFeature().isIntegerFeature
		} else {
			false
		}
	}

  	op boolean isLocationField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature().isLocationFeature
		}
	}

  	op boolean isObfuscatedField() {
		if (isDataTypeField()) {
			leafFeature().isObfuscatedFeature
		} else {
			false
		}
	}

   	op boolean isRequiredField() {
		if (leafFeature() === null) {
			true
		} else {
			leafFeature().isRequired
		}
	}

 	op boolean isResourceField() {
		if (leafFeature() === null) {
			false
		} else {
			leafFeature() instanceof ResourceFeature
		}
	}

   	op boolean isSingletonField() {
		if (leafFeature() === null) {
			true
		} else {
			leafFeature().isSingleton
		}
	}

  	op boolean isStringField() {
		if (isDataTypeField()) {
			leafFeature().isStringFeature
		} else {
			false
		}
	}

  	op boolean isTextareaField() {
		if (isDataTypeField()) {
			leafFeature().isTextareaFeature
		} else {
			false
		}
	}

  	op boolean isUrlField() {
		if (isDataTypeField()) {
			leafFeature().isUrlFeature
		} else {
			false
		}
	}

  	op Classifier dataType() {
		if (isDataTypeField()) {
			leafFeature().dataType
		} else {
			null
		}
	}

  	op DateDetails dateDetails() {
		if (isDateField()) {
			leafFeature().dateDetails
		} else {
			null
		}
	}

  	op EnumerationType enumerationType() {
		if (isEnumerationField()) {
			leafFeature().enumerationType
		} else {
			null
		}
	}
}

class UnitAssociation extends UnitFeature, AssociationPathElement {
	refers Selection options
	refers Attribute collectionSortBy
	boolean useAutocomplete = "false"

  	op Expression defaultValue() {
		if (leafFeature() !== null) {
			leafFeature().defaultValue
		} else {
			null
		}
	}
}

class UnitAttribute extends UnitFeature, AttributePathElement {
	contains Expression attributeDefaultValue
	boolean obfuscateFormFields
	String validationPattern = ''
}

class UnitResource extends UnitFeature, ResourcePathElement {
	boolean isDeletable = "true"
	boolean isDownloadable = "true"
	boolean showImageWhenEditing = "true"
	refers ImageManipulation imageFilter
}

class UnitLabel extends UnitField {
	refers ModelLabel[1] label

  	op String name() {
		if (label === null) {
			''
		} else {
			label.name
		}
	}

  	op String fieldName() {
		name()
	}

  	op boolean isLabelField() {
		true
	}
}

abstract class InterfaceField extends NamedElement, UnitField {
  	op String name() {
		getName()
	}

  	op String fieldName() {
		name()
	}

	String fieldTitle = ''
	String fieldPlaceholder = ''
	boolean fieldRequired
	contains Expression fieldDefaultValue
	String interfaceType
	String validationPattern = ''
	boolean repeatedField = 'false'
	String secondDisplayLabel = ''
	String secondTitle = ''
	String secondPlaceholder = ''
	String secondHelp = ''

   	op boolean isInterfaceField() {
		true
	}

   	op boolean isRequiredField() {
		fieldRequired
	}

  	op Expression defaultValue() {
		fieldDefaultValue
	}
}

class DataTypeField extends InterfaceField {
	refers DataType[1] interfaceDataType
	boolean caseInsensitive
	boolean obfuscateFormFields
	boolean encrypt

  	op boolean isBooleanField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isBooleanDataType
		}
	}

  	op boolean isDataTypeField() {
		true
	}

  	op boolean isEmailField() {
		if (interfaceDataType === null) {
			interfaceDataType.isEmailDataType
		} else {
			false
		}
	}
	
  	op boolean isEncryptedField() {
		encrypt
	}

  	op boolean isEnumerationField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isEnumerationType
		}
	}

  	op boolean isIntegerField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isIntegerDataType
		}
	}

  	op boolean isObfuscatedField() {
		obfuscateFormFields
	}

  	op boolean isStringField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isStringDataType
		}
	}

  	op boolean isTextareaField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isTextareaDataType
		}
	}

  	op boolean isUrlField() {
		if (interfaceDataType === null) {
			false
		} else {
			interfaceDataType.isUrlDataType
		}
	}
}

class DateField extends InterfaceField {
	DateDetails[1] details
	String format

  	op boolean isDateField() {
		true
	}
}

interface SelectableUnit {
	refers SelectAction[] selectors opposite target
}

class SingletonUnit extends DynamicUnit {
	refers Label title
}

abstract class CollectionUnit extends DynamicUnit, SelectableUnit, ValueContext {
	refers Label unitTitle
	contains DisplayValue elementTitle
	boolean truncateElementTitle = "false"
	refers Selection selection
	refers Selection findContainerSelection
	refers Selection findElementSelection
	contains CollectionFilter[] filters opposite affects

	op boolean hasCollectionFilters() {
		!filters.isEmpty()
	}


	op Entity containingType() {
		if (findContainerSelection !== null) {
			findContainerSelection.definedBy.serves
		} else if (selection !== null) {
			if (selection.hasSelectPath()) {
				selection.selectionType()
			} else {
				null
			} 
		} else if (contentType !== null) {
			contentType.containingType
		} else {
			null
		}
	}

	op Entity[] referencableTypes() {
		var entities = new BasicEList<Entity>()
		if (contentType !== null) {
			entities.add(contentType);
			if (isContained()) {
				entities.add(containingType());
			}
		}
		return entities
	}

	op boolean hasNumericFilters() {
		!filters.filter[it instanceof NumericFilter].isEmpty()
	}

	op boolean hasTextFilters() {
		!filters.filter[it instanceof TextFilter].isEmpty()
	}

	refers Filter filter
	refers Filter[] supportedFilters
	@OCL(derivation="supportedFilters->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasFilters

	@OCL(derivation="if not selection.oclIsUndefined() then
			selection.grouping->notEmpty()
		else
			false
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasGroupedResults

	@OCL(derivation="defaultPaginationSize > 0
		and if selection.oclIsUndefined() then
				true
			else
				selection.hasPaginationSupport = true
			endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasPagination

	String emptyMessage
	boolean omitFieldLabels
	int defaultPaginationSize
	int maximumPaginationSize

	@GenModel(propertyCategory="Style")
	String[1] localInstanceControlClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localInstanceActionClass = ''

	op String instanceControlClass() {
		if (localInstanceControlClass.trim() !== '') {
			localInstanceControlClass.trim()
		} else {
			''
		}
	}
	op boolean hasInstanceControlClass() {
		instanceControlClass() !== ''
	}

	op String instanceActionClass() {
		if (localInstanceActionClass.trim() !== '') {
			localInstanceActionClass.trim()
		} else {
			''
		}
	}
	op boolean hasInstanceActionClass() {
		instanceActionClass() !== ''
	}
}

abstract class CollectionFilter extends NamedElement {
	container CollectionUnit[1] affects opposite filters
    @GenModel(propertyCategory="Business")
	refers Attribute[1] attribute
    @GenModel(propertyCategory="Interface")
	String help = ''
    @GenModel(propertyCategory="Interface")
	String placeholderOverride = ''
    @GenModel(propertyCategory="Interface")
	String titleOverride = ''

	op Entity[] referencableTypes() {
		var entities = new BasicEList<Entity>()
		if (affects.selection !== null) {
			entities.addAll(affects.selection.referencableTypes());
		} else {
			entities.add(affects.contentType);
		}

		return entities
	}

	op boolean hasHelp() {
		help.trim() !== ''
	}
	
	op String placeholder() {
		if (placeholderOverride.trim() !== '') {
			placeholderOverride.trim()
		} else {
			if (attribute !== null) {
				attribute.displayLabel
			} else {
				''
			}
		}
	}
	
	op boolean hasCustomisedPlaceholder() {
		if (placeholderOverride.trim() === '' || attribute !== null) {
			false
		} else {
			placeholderOverride.trim() !== attribute.displayLabel
		}
	}

	op String title() {
		if (titleOverride.trim() !== '') {
			titleOverride.trim()
		} else {
			if (attribute !== null) {
				attribute.displayLabel
			} else {
				''
			}
		}
	}
	
	op boolean hasCustomisedTitle() {
		if (titleOverride.trim() === '' || attribute === null) {
			false
		} else {
			titleOverride.trim() !== attribute.displayLabel
		}
	}
}

class ArrayFilter extends CollectionFilter {
}

class BooleanFilter extends CollectionFilter {
	refers Feature feature
}

class ChoiceFilter extends CollectionFilter {
}

class ComparisonFilter extends CollectionFilter {
}

class DateTimeFilter extends CollectionFilter {
}

class EntityFilter extends CollectionFilter {
}

class NullFilter extends CollectionFilter {
}

class NumericFilter extends CollectionFilter {
}

class TextFilter extends CollectionFilter {
}

abstract class EditUnit extends SingletonUnit {
	boolean useCaptcha = 'false'
	boolean onSaveContinueEditing = 'false'
	contains Predicate disableWhen
	refers ContentUnit confirmDestination
	String[1] confirmLabel
	boolean hasCustomConfirmLabel

	contains Message confirmMessage
	@OCL(derivation="not confirmMessage.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasConfirmMessage

	contains Message successMessage
	@OCL(derivation="not successMessage.oclIsUndefined()")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasSuccessMessage

	@OCL(derivation="hasConfirmMessage or hasSuccessMessage")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean hasMessages

	refers ContentUnit cancelDestination
	String cancelLabel
	boolean hasCustomCancelLabel

	String[1] localInputGroupClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultFormStyles.sectionClass.trim() !== '') {
			uiModel().defaultFormStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultFormStyles.captionClass.trim() !== '') {
			uiModel().defaultFormStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultFormStyles.contentClass.trim() !== '') {
			uiModel().defaultFormStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		} else if (uiModel().defaultFormStyles.fieldListClass.trim() !== '') {
			uiModel().defaultFormStyles.fieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldListClass.trim()
		} else {
			''
		}
	}

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		} else if (uiModel().defaultFormStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultFormStyles.definitionFieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.definitionFieldListClass.trim()
		} else {
			''
		}
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		} else if (uiModel().defaultFormStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultFormStyles.fieldLabelClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldLabelClass.trim()
		} else {
			''
		}
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		} else if (uiModel().defaultFormStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultFormStyles.fieldValueClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldValueClass.trim()
		} else {
			''
		}
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		} else if (uiModel().defaultFormStyles.controlClass.trim() !== '') {
			uiModel().defaultFormStyles.controlClass.trim()
		} else if (uiModel().defaultUnitStyles.controlClass.trim() !== '') {
			uiModel().defaultUnitStyles.controlClass.trim()
		} else {
			''
		}
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (uiModel().defaultFormStyles.actionClass.trim() !== '') {
			uiModel().defaultFormStyles.actionClass.trim()
		} else if (uiModel().defaultUnitStyles.actionClass.trim() !== '') {
			uiModel().defaultUnitStyles.actionClass.trim()
		} else {
			''
		}
	}

	op String inputGroupClass() {
		if (localInputGroupClass.trim() !== '') {
			localInputGroupClass.trim()
		} else if (uiModel().defaultFormStyles.inputGroupClass.trim() !== '') {
			uiModel().defaultFormStyles.inputGroupClass.trim()
		} else {
			''
		}
	}
	op boolean hasInputGroupClass() {
		inputGroupClass() !== ''
	}
}

class CreateUnit extends EditUnit {
}

class UpdateUnit extends EditUnit, SelectableUnit {
	boolean displayEmptyForm = "true"
}

class CreateUpdateUnit extends EditUnit, SelectableUnit {
	String updateUriElement = ''
	String clearLabel
}

class MapUnit extends EditUnit, SelectableUnit {
	boolean readOnly
	int defaultZoomLevel
	refers LocationFeature[1] location
	refers Attribute placeName
}

class DetailsUnit extends SingletonUnit, SelectableUnit {
	refers Selection selection
	boolean omitFieldLabels

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultDetailsStyles.sectionClass.trim() !== '') {
			uiModel().defaultDetailsStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultDetailsStyles.captionClass.trim() !== '') {
			uiModel().defaultDetailsStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultDetailsStyles.contentClass.trim() !== '') {
			uiModel().defaultDetailsStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		} else if (uiModel().defaultDetailsStyles.fieldListClass.trim() !== '') {
			uiModel().defaultDetailsStyles.fieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldListClass.trim()
		} else {
			''
		}
	}

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		} else if (uiModel().defaultDetailsStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultDetailsStyles.definitionFieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.definitionFieldListClass.trim()
		} else {
			''
		}
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		} else if (uiModel().defaultDetailsStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultDetailsStyles.fieldLabelClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldLabelClass.trim()
		} else {
			''
		}
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		} else if (uiModel().defaultDetailsStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultDetailsStyles.fieldValueClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldValueClass.trim()
		} else {
			''
		}
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		} else if (uiModel().defaultDetailsStyles.controlClass.trim() !== '') {
			uiModel().defaultDetailsStyles.controlClass.trim()
		} else if (uiModel().defaultUnitStyles.controlClass.trim() !== '') {
			uiModel().defaultUnitStyles.controlClass.trim()
		} else {
			''
		}
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (uiModel().defaultDetailsStyles.actionClass.trim() !== '') {
			uiModel().defaultDetailsStyles.actionClass.trim()
		} else if (uiModel().defaultUnitStyles.actionClass.trim() !== '') {
			uiModel().defaultUnitStyles.actionClass.trim()
		} else {
			''
		}
	}
}

class TabularUnit extends CollectionUnit {
	refers SearchUnit targettingSearches opposite resultsDestination
	String rowClasses
	String localHeaderClass = ''
	String localFooterClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultTabularStyles.sectionClass.trim() !== '') {
			uiModel().defaultTabularStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultTabularStyles.captionClass.trim() !== '') {
			uiModel().defaultTabularStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultTabularStyles.contentClass.trim() !== '') {
			uiModel().defaultTabularStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		} else if (uiModel().defaultTabularStyles.fieldListClass.trim() !== '') {
			uiModel().defaultTabularStyles.fieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldListClass.trim()
		} else {
			''
		}
	}

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		} else if (uiModel().defaultTabularStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultTabularStyles.definitionFieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.definitionFieldListClass.trim()
		} else {
			''
		}
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		} else if (uiModel().defaultTabularStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultTabularStyles.fieldLabelClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldLabelClass.trim()
		} else {
			''
		}
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		} else if (uiModel().defaultTabularStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultTabularStyles.fieldValueClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldValueClass.trim()
		} else {
			''
		}
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		} else if (uiModel().defaultTabularStyles.controlClass.trim() !== '') {
			uiModel().defaultTabularStyles.controlClass.trim()
		} else if (uiModel().defaultUnitStyles.controlClass.trim() !== '') {
			uiModel().defaultUnitStyles.controlClass.trim()
		} else {
			''
		}
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (uiModel().defaultTabularStyles.actionClass.trim() !== '') {
			uiModel().defaultTabularStyles.actionClass.trim()
		} else if (uiModel().defaultUnitStyles.actionClass.trim() !== '') {
			uiModel().defaultUnitStyles.actionClass.trim()
		} else {
			''
		}
	}

	op String headerClass() {
		if (localHeaderClass.trim() !== '') {
			localHeaderClass.trim()
		} else if (uiModel().defaultTabularStyles.headerClass.trim() !== '') {
			uiModel().defaultTabularStyles.headerClass.trim()
		} else {
			''
		}
	}
	op boolean hasHeaderClass() {
		headerClass() !== ''
	}

	op String footerClass() {
		if (localFooterClass.trim() !== '') {
			localFooterClass.trim()
		} else if (uiModel().defaultTabularStyles.footerClass.trim() !== '') {
			uiModel().defaultTabularStyles.footerClass.trim()
		} else {
			''
		}
	}
	op boolean hasFooterClass() {
		footerClass() !== ''
	}
}

abstract class CardsUnit extends CollectionUnit {
	contains Badge[] badges opposite displayedOn
	boolean overlaySingleSelectAction

	@GenModel(propertyCategory="Style")
	String[1] localCardClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localCardHeaderClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localCardBodyClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localCardFooterClass = ''
	@GenModel(propertyCategory="Style")
	String[1] localBadgeClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultCardsStyles.sectionClass.trim() !== '') {
			uiModel().defaultCardsStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultCardsStyles.captionClass.trim() !== '') {
			uiModel().defaultCardsStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultCardsStyles.contentClass.trim() !== '') {
			uiModel().defaultCardsStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		} else if (uiModel().defaultCardsStyles.fieldListClass.trim() !== '') {
			uiModel().defaultCardsStyles.fieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldListClass.trim()
		} else {
			''
		}
	}

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		} else if (uiModel().defaultCardsStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultCardsStyles.definitionFieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.definitionFieldListClass.trim()
		} else {
			''
		}
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		} else if (uiModel().defaultCardsStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultCardsStyles.fieldLabelClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldLabelClass.trim()
		} else {
			''
		}
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		} else if (uiModel().defaultCardsStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultCardsStyles.fieldValueClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldValueClass.trim()
		} else {
			''
		}
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		} else if (uiModel().defaultCardsStyles.controlClass.trim() !== '') {
			uiModel().defaultCardsStyles.controlClass.trim()
		} else if (uiModel().defaultUnitStyles.controlClass.trim() !== '') {
			uiModel().defaultUnitStyles.controlClass.trim()
		} else {
			''
		}
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (uiModel().defaultCardsStyles.actionClass.trim() !== '') {
			uiModel().defaultCardsStyles.actionClass.trim()
		} else if (uiModel().defaultUnitStyles.actionClass.trim() !== '') {
			uiModel().defaultUnitStyles.actionClass.trim()
		} else {
			''
		}
	}

	op String instanceControlClass() {
		if (localInstanceControlClass.trim() !== '') {
			localInstanceControlClass.trim()
		} else if (uiModel().defaultCardsStyles.instanceControlClass.trim() !== '') {
			uiModel().defaultCardsStyles.instanceControlClass.trim()
		} else {
			''
		}
	}

	op String instanceActionClass() {
		if (localInstanceActionClass.trim() !== '') {
			localInstanceActionClass.trim()
		} else if (uiModel().defaultCardsStyles.instanceActionClass.trim() !== '') {
			uiModel().defaultCardsStyles.instanceActionClass.trim()
		} else {
			''
		}
	}

	op String cardClass() {
		if (localCardClass.trim() !== '') {
			localCardClass.trim()
		} else if (uiModel().defaultCardsStyles.cardClass.trim() !== '') {
			uiModel().defaultCardsStyles.cardClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardClass() {
		cardClass() !== ''
	}

	op String cardHeaderClass() {
		if (localCardHeaderClass.trim() !== '') {
			localCardHeaderClass.trim()
		} else if (uiModel().defaultCardsStyles.cardHeaderClass.trim() !== '') {
			uiModel().defaultCardsStyles.cardHeaderClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardHeaderClass() {
		cardHeaderClass() !== ''
	}

	op String cardBodyClass() {
		if (localCardBodyClass.trim() !== '') {
			localCardBodyClass.trim()
		} else if (uiModel().defaultCardsStyles.cardBodyClass.trim() !== '') {
			uiModel().defaultCardsStyles.cardBodyClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardBodyClass() {
		cardBodyClass() !== ''
	}

	op String cardFooterClass() {
		if (localCardFooterClass.trim() !== '') {
			localCardFooterClass.trim()
		} else if (uiModel().defaultCardsStyles.cardFooterClass.trim() !== '') {
			uiModel().defaultCardsStyles.cardFooterClass.trim()
		} else {
			''
		}
	}
	op boolean hasCardFooterClass() {
		cardFooterClass() !== ''
	}

	op String badgeClass() {
		if (localBadgeClass.trim() !== '') {
			localBadgeClass.trim()
		} else if (uiModel().defaultCardsStyles.badgeClass.trim() !== '') {
			uiModel().defaultCardsStyles.badgeClass.trim()
		} else {
			''
		}
	}
	@OCL(derivation="badgeClass <> ''")
	op boolean hasBadgeClass() {
		badgeClass() !== ''
	}
}

class Badge extends ValueContext {
	refers CardsUnit[1] displayedOn opposite badges
	String iconName
	contains DisplayValue value
	refers Attribute title
	contains Predicate displayWhen

	@GenModel(propertyCategory="Style")
	String localBadgeClass

	op String badgeClass() {
		if (localBadgeClass.trim() !== '') {
			localBadgeClass.trim()
		} else if (displayedOn.hasBadgeClass()) {
			displayedOn.badgeClass()
		} else {
			''
		}
	}
	op boolean hasBadgeClass() {
		badgeClass() !== ''
	}
}

class TextCardsUnit extends CardsUnit {
}

class DateCardsUnit extends CardsUnit, ValueContext {
	contains DisplayValue[1] elementDate
}

interface ImageUnit extends ValueContext {
	contains DisplayValue[1] imageFeaturePath
	String missingImagePath
	contains Predicate showMissingImageWhen
	refers ImageManipulation imageFilter
}


class ImageCardsUnit extends CardsUnit, ImageUnit {
	boolean enableImageEnlargement
	boolean overlayTitle
	boolean revealUntruncatedContent
	@GenModel(propertyCategory="Style")
	String imageActionClass = ''

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultImageCardsStyles.sectionClass.trim() !== '') {
			uiModel().defaultImageCardsStyles.sectionClass.trim()
		} else if (uiModel().defaultCardsStyles.sectionClass.trim() !== '') {
			uiModel().defaultCardsStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultImageCardsStyles.captionClass.trim() !== '') {
			uiModel().defaultImageCardsStyles.captionClass.trim()
		} else if (uiModel().defaultCardsStyles.captionClass.trim() !== '') {
			uiModel().defaultCardsStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultImageCardsStyles.contentClass.trim() !== '') {
			uiModel().defaultImageCardsStyles.contentClass.trim()
		} else if (uiModel().defaultCardsStyles.contentClass.trim() !== '') {
			uiModel().defaultCardsStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String imageActionClass() {
		if (imageActionClass().trim() !== '') {
			imageActionClass().trim()
		} else if (uiModel().defaultImageCardsStyles.imageActionClass.trim() !== '') {
			uiModel().defaultImageCardsStyles.imageActionClass.trim()
		} else {
			''
		}
	}
	op boolean hasImageActionClass() {
		imageActionClass() !== ''
	}
}

class SliderUnit extends CollectionUnit, ImageUnit {
	int showTime
	int transitionTime

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultSliderStyles.sectionClass.trim() !== '') {
			uiModel().defaultSliderStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultSliderStyles.captionClass.trim() !== '') {
			uiModel().defaultSliderStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultSliderStyles.contentClass.trim() !== '') {
			uiModel().defaultSliderStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		} else if (uiModel().defaultSliderStyles.fieldListClass.trim() !== '') {
			uiModel().defaultSliderStyles.fieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldListClass.trim()
		} else {
			''
		}
	}

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		} else if (uiModel().defaultSliderStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultSliderStyles.definitionFieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.definitionFieldListClass.trim()
		} else {
			''
		}
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		} else if (uiModel().defaultSliderStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultSliderStyles.fieldLabelClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldLabelClass.trim()
		} else {
			''
		}
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		} else if (uiModel().defaultSliderStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultSliderStyles.fieldValueClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldValueClass.trim()
		} else {
			''
		}
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		} else if (uiModel().defaultSliderStyles.controlClass.trim() !== '') {
			uiModel().defaultSliderStyles.controlClass.trim()
		} else if (uiModel().defaultUnitStyles.controlClass.trim() !== '') {
			uiModel().defaultUnitStyles.controlClass.trim()
		} else {
			''
		}
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (uiModel().defaultSliderStyles.actionClass.trim() !== '') {
			uiModel().defaultSliderStyles.actionClass.trim()
		} else if (uiModel().defaultUnitStyles.actionClass.trim() !== '') {
			uiModel().defaultUnitStyles.actionClass.trim()
		} else {
			''
		}
	}

	op String instanceControlClass() {
		if (localInstanceControlClass.trim() !== '') {
			localInstanceControlClass.trim()
		} else if (uiModel().defaultSliderStyles.instanceControlClass.trim() !== '') {
			uiModel().defaultSliderStyles.instanceControlClass.trim()
		} else {
			''
		}
	}

	op String instanceActionClass() {
		if (localInstanceActionClass.trim() !== '') {
			localInstanceActionClass.trim()
		} else if (uiModel().defaultSliderStyles.instanceActionClass.trim() !== '') {
			uiModel().defaultSliderStyles.instanceActionClass.trim()
		} else {
			''
		}
	}
}

class GalleryUnit extends CollectionUnit, ImageUnit {
	refers ImageManipulation fullSizeFilter
	int showTime
	int transitionTime

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultGalleryStyles.sectionClass.trim() !== '') {
			uiModel().defaultGalleryStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultGalleryStyles.captionClass.trim() !== '') {
			uiModel().defaultGalleryStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultGalleryStyles.contentClass.trim() !== '') {
			uiModel().defaultGalleryStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		} else if (uiModel().defaultGalleryStyles.fieldListClass.trim() !== '') {
			uiModel().defaultGalleryStyles.fieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldListClass.trim()
		} else {
			''
		}
	}

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		} else if (uiModel().defaultGalleryStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultGalleryStyles.definitionFieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.definitionFieldListClass.trim()
		} else {
			''
		}
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		} else if (uiModel().defaultGalleryStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultGalleryStyles.fieldLabelClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldLabelClass.trim()
		} else {
			''
		}
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		} else if (uiModel().defaultGalleryStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultGalleryStyles.fieldValueClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldValueClass.trim()
		} else {
			''
		}
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		} else if (uiModel().defaultGalleryStyles.controlClass.trim() !== '') {
			uiModel().defaultGalleryStyles.controlClass.trim()
		} else if (uiModel().defaultUnitStyles.controlClass.trim() !== '') {
			uiModel().defaultUnitStyles.controlClass.trim()
		} else {
			''
		}
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (uiModel().defaultGalleryStyles.actionClass.trim() !== '') {
			uiModel().defaultGalleryStyles.actionClass.trim()
		} else if (uiModel().defaultUnitStyles.actionClass.trim() !== '') {
			uiModel().defaultUnitStyles.actionClass.trim()
		} else {
			''
		}
	}

	op String instanceControlClass() {
		if (localInstanceControlClass.trim() !== '') {
			localInstanceControlClass.trim()
		} else if (uiModel().defaultGalleryStyles.instanceControlClass.trim() !== '') {
			uiModel().defaultGalleryStyles.instanceControlClass.trim()
		} else {
			''
		}
	}

	op String instanceActionClass() {
		if (localInstanceActionClass.trim() !== '') {
			localInstanceActionClass.trim()
		} else if (uiModel().defaultGalleryStyles.instanceActionClass.trim() !== '') {
			uiModel().defaultGalleryStyles.instanceActionClass.trim()
		} else {
			''
		}
	}
}

abstract class ControlUnit extends DynamicUnit {
	String[1] submitLabel
	refers ContentUnit cancelDestination
	String cancelLabel

	op String sectionClass() {
		if (localSectionClass.trim() !== '') {
			localSectionClass.trim()
		} else if (uiModel().defaultControlStyles.sectionClass.trim() !== '') {
			uiModel().defaultControlStyles.sectionClass.trim()
		} else if (uiModel().defaultUnitStyles.sectionClass.trim() !== '') {
			uiModel().defaultUnitStyles.sectionClass.trim()
		} else {
			''
		}
	}

	op String captionClass() {
		if (localCaptionClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultControlStyles.captionClass.trim() !== '') {
			uiModel().defaultControlStyles.captionClass.trim()
		} else if (uiModel().defaultUnitStyles.captionClass.trim() !== '') {
			uiModel().defaultUnitStyles.captionClass.trim()
		} else {
			''
		}
	}

	op String contentClass() {
		if (localContentClass.trim() !== '') {
			localContentClass.trim()
		} else if (uiModel().defaultControlStyles.contentClass.trim() !== '') {
			uiModel().defaultControlStyles.contentClass.trim()
		} else if (uiModel().defaultUnitStyles.contentClass.trim() !== '') {
			uiModel().defaultUnitStyles.contentClass.trim()
		} else {
			''
		}
	}

	op String fieldListClass() {
		if (localFieldListClass.trim() !== '') {
			localFieldListClass.trim()
		} else if (uiModel().defaultControlStyles.fieldListClass.trim() !== '') {
			uiModel().defaultControlStyles.fieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldListClass.trim()
		} else {
			''
		}
	}

	op String definitionFieldListClass() {
		if (localDefinitionFieldListClass.trim() !== '') {
			localDefinitionFieldListClass.trim()
		} else if (uiModel().defaultControlStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultControlStyles.definitionFieldListClass.trim()
		} else if (uiModel().defaultUnitStyles.definitionFieldListClass.trim() !== '') {
			uiModel().defaultUnitStyles.definitionFieldListClass.trim()
		} else {
			''
		}
	}

	op String fieldLabelClass() {
		if (localFieldLabelClass.trim() !== '') {
			localFieldLabelClass.trim()
		} else if (uiModel().defaultControlStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultControlStyles.fieldLabelClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldLabelClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldLabelClass.trim()
		} else {
			''
		}
	}

	op String fieldValueClass() {
		if (localFieldValueClass.trim() !== '') {
			localFieldValueClass.trim()
		} else if (uiModel().defaultControlStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultControlStyles.fieldValueClass.trim()
		} else if (uiModel().defaultUnitStyles.fieldValueClass.trim() !== '') {
			uiModel().defaultUnitStyles.fieldValueClass.trim()
		} else {
			''
		}
	}

	op String controlClass() {
		if (localControlClass.trim() !== '') {
			localControlClass.trim()
		} else if (uiModel().defaultControlStyles.controlClass.trim() !== '') {
			uiModel().defaultControlStyles.controlClass.trim()
		} else if (uiModel().defaultUnitStyles.controlClass.trim() !== '') {
			uiModel().defaultUnitStyles.controlClass.trim()
		} else {
			''
		}
	}

	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (uiModel().defaultControlStyles.actionClass.trim() !== '') {
			uiModel().defaultControlStyles.actionClass.trim()
		} else if (uiModel().defaultUnitStyles.actionClass.trim() !== '') {
			uiModel().defaultUnitStyles.actionClass.trim()
		} else {
			''
		}
	}
}

class SearchUnit extends ControlUnit {
	refers TabularUnit[1] resultsDestination opposite targettingSearches
}


interface ValueContext {
	op Entity[] referencableTypes()
}

abstract class DisplayValue extends Path {
	@OCL(derivation="if leafFeature().oclIsUndefined() then
			false
		else
			leafFeature().isRequired
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isRequired

	@OCL(derivation="if leafFeature().oclIsUndefined() then
			false
		else
			leafFeature().isSingleton
		endif")
    @GenModel(propertyCategory="Debug")
	derived readonly transient volatile boolean isSingleton
}

class AssociationDisplayValue extends AssociationPathElement, DisplayValue {
}

class AttributeDisplayValue extends AttributePathElement, DisplayValue {
}

class ResourceDisplayValue extends ResourcePathElement, DisplayValue {
}

class LabelDisplayValue extends DisplayValue {
	refers ModelLabel[1] label

	op String name() {
		if (label === null ) {
			''
		} else {
			label.name
		}
	}
	
	op Path leafElement() {
		this
	}
}


enum ContainerActionsPlacement {
	Above = 0
	Below = 1
	Float = 2
}

enum InstanceActionsPlacement {
	Footer = 0
	Float = 1
}

interface ActionContainer {
    @GenModel(propertyCategory="Interface")
	ContainerActionsPlacement containerActionsPlacement

    @GenModel(propertyCategory="Interface")
	InstanceActionsPlacement instanceActionsPlacement

	contains Action[] allActions opposite usedBy

	op Action[] actions() {
		allActions.filter[!it.disable].toEList()
	}

	op boolean hasActions() {
		!actions().isEmpty()
	}

	op boolean hasActionsWithDisabledMessage() {
		!actions().filter[it.hasDisabledMessage()].isEmpty()
	}

	op boolean hasActionsWithSuccessMessage() {
		!actions().filter[it.hasSuccessMessage()].isEmpty()
	}

	op boolean hasActionsWithMessages() {
		!actions().filter[it.hasMessages()].isEmpty()
	}

	op Action[] actionsWithoutTarget() {
		actions().filter[!it.isSelectAction()].asEList()
	}

	op Action[] containerActions() {
		actions().filter[it.isContainerAction()].asEList()
	}
	op boolean hasContainerActions() {
		!containerActions().isEmpty()
	}

	op OperationAction[] fileActions() {
		operationActions.filter[it.operation.resultType.literal == 'File'].toEList()
	}
	op boolean hasFileActions() {
		!fileActions().isEmpty()
	}

	op Action[] generalActions() {
		actions().filter[it.isGeneralAction()].asEList()
	}
	op boolean hasGeneralActions() {
		!generalActions().isEmpty()
	}

	op Action[] targetActions() {
		actions().filter[it.isTargetAction()].asEList()
	}
	op boolean hasTargetActions() {
		!targetActions().isEmpty()
	}

	op Action[] instanceActions() {
		actions().filter[it.isInstanceAction()].asEList()
	}
	op boolean hasInstanceActions() {
		!instanceActions().isEmpty()
	}

	op OperationAction[] operationActions() {
		actions().filter[it.isOperationAction()].map[it as OperationAction].asEList()
	}
	op boolean hasOperationActions() {
		!operationActions().isEmpty()
	}
}

abstract class Action extends NamedDisplayElement {
	refers ActionContainer[1]usedBy opposite allActions

    @GenModel(propertyCategory="Interface")
	String iconName = ''

    @GenModel(propertyCategory="Business")
	boolean disable

	contains Predicate displayWhen

	contains Predicate enableWhen

	op DynamicUnit parentUnit() {
		if (usedBy instanceof DynamicUnit) {
			usedBy as DynamicUnit
		} else if (usedBy instanceof UnitFeature) {
			(usedBy as UnitFeature).displayedOn
		} else {
			return null
		}
	}

	op AuthorisationExpression authorisation() {
		null
	}
	op boolean isAuthorised() {
		authorisation() !== null
	}

	op boolean hasCustomisedAuthorisation() {
		if (authorisation() === null) {
			false
		} else if (parentUnit().authorisation === null) {
			true
		} else {
			!authorisation().areSame(parentUnit().authorisation)
		}
	}

	op boolean isContainerAction() {
		false
	}

	op boolean isGeneralAction() {
		false
	}

	op boolean isInstanceAction() {
		false
	}

	op boolean isOperationAction() {
		false
	}

	op boolean isSelectAction() {
		false
	}

	op boolean isTargetAction() {
		false
	}

    @GenModel(propertyCategory="Interface")
	String confirmMessage = ''
	op boolean hasConfirmMessage() {
		confirmMessage.trim() !== ''
	}

    @GenModel(propertyCategory="Interface")
	String successMessage = ''
	op boolean hasSuccessMessage() {
		successMessage.trim() !== ''
	}

    @GenModel(propertyCategory="Interface")
	String failureMessage = ''
	op boolean hasFailureMessage() {
		failureMessage.trim() !== ''
	}

    @GenModel(propertyCategory="Interface")
	String disabledMessage = ''
	op boolean hasDisabledMessage() {
		disabledMessage.trim() !== ''
	}

	op boolean hasMessages() {
		hasConfirmMessage() || hasSuccessMessage() || hasFailureMessage() || hasDisabledMessage()
	}

    @GenModel(propertyCategory="Style")
	String localActionClass = ''
	op String actionClass() {
		if (localActionClass.trim() !== '') {
			localActionClass.trim()
		} else if (usedBy instanceof DynamicUnit) {
			if (isInstanceAction()) {
				if (parentUnit() instanceof CollectionUnit) {
					if ((parentUnit() as CollectionUnit).hasInstanceActionClass()) {
						(parentUnit() as CollectionUnit).instanceActionClass()
					} else {
						''
					}
				} else {
					''
				}
			} else if (parentUnit().hasActionClass()) {
				parentUnit().actionClass()
			} else {
				''
			}
		} else {
			''
		}
	}
	op boolean hasActionClass() {
		actionClass() !== ''
	}
}

class DeleteAction extends Action {
    @GenModel(propertyCategory="Navigation")
	String[1] uriElement

	contains AuthorisationExpression localAuthorisation

	op AuthorisationExpression authorisation() {
		if (localAuthorisation !== null) {
			localAuthorisation
		} else {
			parentUnit()?.authorisation
		}
	}

	op boolean isInstanceAction() {
		true
	}
}

abstract class SelectAction extends Action {
    @GenModel(propertyCategory="Navigation")
	refers SelectableUnit[1] target opposite selectors
	contains DisplayValue valuePath

	op AuthorisationExpression authorisation() {
		if (target === null) {
			null
		} else {
			(target as DynamicUnit).authorisation
		}
	}

	op boolean isSelectAction() {
		true
	}
}

class ContainerSelectAction extends SelectAction {
	op boolean isContainerAction() {
		true
	}
}

class InstanceSelectAction extends SelectAction {
	op boolean isInstanceAction() {
		true
	}
}

class TargetAction extends SelectAction {
	op boolean isTargetAction() {
		true
	}
}

abstract class OperationAction extends Action {
	@OCL(derivation="if operation.oclIsUndefined() then
			OrderedSet(service::Service){}
		else
			OrderedSet(service::Service){ operation.partOf }
		endif")
    @GenModel(propertyCategory="Debug")
	refers derived readonly transient volatile Service[] servicesUsed
	@OCL(derivation="servicesUsed->notEmpty()")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean hasServicesUsed

    @GenModel(propertyCategory="Business")
	refers BusinessOperation[1] operation

    @GenModel(propertyCategory="Navigation")
	String[1] uriElement

	contains AuthorisationExpression localAuthorisation

	op AuthorisationExpression authorisation() {
		if (localAuthorisation !== null) {
			localAuthorisation
		} else {
			parentUnit()?.authorisation
		}
	}

	op boolean isOperationAction() {
		true
	}
}

class InstanceOperationAction extends OperationAction {
	op boolean isInstanceAction() {
		true
	}
}

class ContainerOperationAction extends OperationAction {
}

class GeneralOperationAction extends OperationAction {
	op boolean isGeneralAction() {
		true
	}
}


class Message extends ValueContext {
	String[1] text
	contains DisplayValue[] features
}