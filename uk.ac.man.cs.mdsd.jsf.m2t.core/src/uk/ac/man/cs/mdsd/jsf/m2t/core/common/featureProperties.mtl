[comment encoding = UTF-8 /]
[module featureProperties(
	'http://www.cs.man.ac.uk/mdsd/2010/GenJsf',
	'http://www.cs.man.ac.uk/mdsd/2010/GenOrm',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]


[query public escapeQuotes(string : String) : String
	= string.replaceAll('(\')', '\\\\$1')
/]


[query public entry(entries : Sequence(String), index : Integer) : String
	= if entries->size() < index then
			''
		else
			entries->drop(index - 1)->first()
		endif
/]


[query public hasCommandUnits(genModel : GenJsfModel) : Boolean
	= genModel.genPages->collect(p | p.genUnits)->select(e | e.oclIsTypeOf(GenCommandUnit))->notEmpty()
/]

[query public homePage(genModel : GenJsfModel) : GenPage
	= let topPage : GenPage
			= if genModel.topMenuItemsNonAuthenticated()->notEmpty() then
					genModel.topMenuItemsNonAuthenticated()->first()
				else
					null
				endif
		in if not topPage.oclIsUndefined() then
			topPage
		else
			if genModel.genPages->notEmpty() then
				genModel.genPages->first()
			else
				null
		endif endif
/]

[query public indexUnits(genModel : GenJsfModel) : Sequence(GenIndexUnit)
	= genModel.genPages->collect(p | p.indexUnits())
/]

[query public isAuthenticated(genJsfModel : GenJsfModel) : Boolean
	= not genJsfModel.jsfModel.properties.authentication.oclIsUndefined()
/]

[query public modelAssociations(genModel : GenOrmModel) : Sequence(GenAssociation)
	= genModel.modelFeatures()->select(f | f.oclIsKindOf(GenAssociation))
/]

[query public modelAttributes(genModel : GenOrmModel) : Sequence(GenAttribute)
	= genModel.modelFeatures()->select(f | f.oclIsTypeOf(GenAttribute))
/]

[query public modelFeatures(genModel : GenOrmModel) : Sequence(GenFeature)
	= genModel.genEntities->collect(genFeatures)
/]

[query public modelManyToManyAssociations(genModel : GenOrmModel) : Sequence(GenCollectionAssociation)
	= genModel.modelAssociations()->select(f | f.isManyToManyAssociationXX())
/]

[query public topMenuItemsAuthenticated(genModel : GenJsfModel) : OrderedSet(GenPage)
	= genModel.genPages
		->select(p | p.jsfPage.topMenuOption <> PageTopMenuOptions::NeverInclude)
		->sortedBy(p | p.jsfPage.topMenuRank)
/]

[query public topMenuItemsNonAuthenticated(genModel : GenJsfModel) : OrderedSet(GenPage)
	= genModel.genPages
		->select(p | p.jsfPage.topMenuOption = PageTopMenuOptions::AlwaysInclude)
		->sortedBy(p | p.jsfPage.topMenuRank)
/]


[query public hasDefaultValue(genFeature : GenIncludedFeature) : Boolean
	= if genFeature.oclIsKindOf(GenIncludedElement) then
			not genFeature.oclAsType(GenIncludedElement).genDefaultValue.oclIsUndefined()
		else
			false
		endif
/]

[query public hasForcedValue(genFeature : GenIncludedFeature) : Boolean
	= not genFeature.genForcedValue.oclIsUndefined()
/]

[query public isAssociation(genFeature : GenIncludedFeature) : Boolean
	= genFeature.oclIsKindOf(GenIncludedAssociation)
/]


[query public associations(genService : GenService) : Sequence(GenServiceAssociation)
	= genService.genFeatures
		->select(f | f.oclIsKindOf(GenServiceAssociation))
		.oclAsType(GenServiceAssociation)
/]

[query public attributes(genService : GenService) : Sequence(GenServiceEntityElement)
	= genService.genFeatures
		->select(f | f.oclIsTypeOf(GenServiceEntityElement))
		.oclAsType(GenServiceEntityElement)
/]

[query public attributesAndSingletons(genService : GenService) : OrderedSet(GenServiceFeature)
	= genService.genFeatures
		->select(f | f.oclIsTypeOf(GenServiceEntityElement) or f.isSingleton())
/]

[query public collectionAssociations(genService : GenService) : Sequence(GenServiceAssociation)
	= genService.associations()->select(f | not f.isSingleton())
/]

[query public defaultValueFeatures(genService : GenService) : Sequence(GenServiceEntityElement)
	= genService.genFeatures
		->select(f | f.oclIsKindOf(GenIncludedElement)).oclAsType(GenIncludedElement)
		->select(f | f.hasDefaultValue())
/]

[query public dependentSingletonAssociations(genService : GenService) : Sequence(GenServiceAssociation)
	= genService.associations()->select(a | 
		if a.isOneToOneAssociation() then
			a.oclAsType(GenServiceAssociation).isDependentEnd()
		else
			a.isOneToManyAssociation()
		endif)
/]

[query public displayFeatures(genService : GenService) : Sequence(GenServiceEntityFeature)
	= let displayFeatures : Sequence(Feature)
			= genService.genEntities->collect(e | e.ormEntity.displayFeatures)
		in displayFeatures->collect(f | genService.genFeatures->any(i | i.name = f.name))
/]

[query public fileAttributes(genService : GenService) : Sequence(GenServiceEntityElement)
	= genService.genFeatures->select(f | f.isFileAttribute()).oclAsType(GenServiceEntityElement)
/]

[query public forcedValueFeatures(genService : GenService) : Sequence(GenServiceEntityFeature)
	= genService.genFeatures
		->select(f | f.oclIsKindOf(GenIncludedFeature)).oclAsType(GenIncludedFeature)
		->select(f | f.hasForcedValue())
/]

[query public hasAssociations(genService : GenService) : Boolean
	= genService.associations()->notEmpty()
/]

[query public hasAttributes(genService : GenService) : Boolean
	= genService.attributes()->notEmpty()
/]

[query public hasAttributesOrSingletons(genService : GenService) : Boolean
	= genService.attributesAndSingletons()->notEmpty()
/]

[query public hasCollectionAssociations(genService : GenService) : Boolean
	= genService.collectionAssociations()->notEmpty()
/]

[query public hasDefaultValueFeatures(genService : GenService) : Boolean
	= genService.defaultValueFeatures()->notEmpty()
/]

[query public hasDependentSingletonAssociations(genService : GenService) : Boolean
	= genService.dependentSingletonAssociations()->notEmpty()
/]

[query public hasDisplayFeatures(genService : GenService) : Boolean
	= genService.displayFeatures()->notEmpty()
/]

[query public hasExplicitTableName(genService : GenService) : Boolean
	= if not genService.jsfService.view then
			let defaultTableName : String = genService.genEntities->first().defaultTableName.toLower()
				in genService.tableName().toLower() <> defaultTableName
		else
			let defaultViewName : String = genService.defaultViewName.toLower()
				in genService.viewName.toLower() <> defaultViewName
		endif
/]

[query public hasFileAttributes(genService : GenService) : Boolean
	= genService.fileAttributes()->notEmpty()
/]

[query public hasForcedValueFeatures(genService : GenService) : Boolean
	= genService.forcedValueFeatures()->notEmpty()
/]

[query public hasIndependentSingletonAssociations(genService : GenService) : Boolean
	= genService.independentSingletonAssociations()->notEmpty()
/]

[query public hasInputAssociations(genService : GenService) : Boolean
	= genService.inputAssociations()->notEmpty()
/]

[query public hasInputCollectionAssociations(genService : GenService) : Boolean
	= genService.inputCollectionAssociations()->notEmpty()
/]

[query public hasInputFeatures(genService : GenService) : Boolean
	= genService.inputFeatures()->notEmpty()
/]

[query public hasValidatedFeatures(genService : GenService) : Boolean
	= genService.validatedFeatures()->notEmpty()
/]

[query public independentSingletonAssociations(genService : GenService) : Sequence(GenServiceAssociation)
	= genService.associations()->select(a | 
		if a.isOneToOneAssociation() then
			not a.oclAsType(GenServiceAssociation).isDependentEnd()
		else
			false
		endif)
/]

[query public inputAssociations(genService : GenService) : OrderedSet(GenServiceEntityAssociation)
	= genService.inputFeatures()->select(f | f.oclIsTypeOf(GenServiceEntityAssociation))
/]

[query public inputCollectionAssociations(genService : GenService) : OrderedSet(GenServiceEntityAssociation)
	= genService.inputFeatures()->select(f | f.oclIsTypeOf(GenServiceEntityAssociation) and not f.isSingleton())
/]

[query public inputFeatures(genService : GenService) : OrderedSet(GenServiceEntityFeature)
	= genService.genFeatures->select(f | f.isInput())
/]

[query public keyName(genService : GenService) : String
	= genService.genEntities->first().keyName
/]

[query public tableName(genService : GenService) : String
	= genService.genEntities->first().tableName
/]

[query public validatedFeatures(genService : GenService) : OrderedSet(GenServiceEntityFeature)
	= genService.genFeatures->select(f | f.isValidated())
/]


[query public columnName(genFeature : GenServiceFeature) : String
	= let name : String =
			if genFeature.oclIsTypeOf(GenServiceEntityElement) then
				genFeature.oclAsType(GenServiceEntityElement).genFeature.columnName()
			else if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
				genFeature.oclAsType(GenServiceEntityAssociation).genFeature.columnName()
			else
				'unhandledFeature'
			endif endif
		in name
/]

[query public displayLabel(genFeature : GenServiceFeature) : String
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).jsfFeature.displayLabel
		else if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			genFeature.oclAsType(GenServiceEntityAssociation).jsfFeature.displayLabel
		else
			'unhandledFeature'
		endif endif
/]

[query public hasForcedValue(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsKindOf(GenServiceEntityFeature) then
			genFeature.oclAsType(GenIncludedFeature).hasForcedValue()
		else
			false
		endif
/]

[query public isCaseInsensitive(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).jsfFeature.caseInsensitive
		else
			false
		endif
/]

[query public isCollectionAssociation(genFeature : GenServiceAssociation) : Boolean
	= genFeature.oclIsTypeOf(GenServiceEntityAssociation) and not genFeature.isSingleton()
/]

[query public isDependentEnd(genFeature : GenServiceAssociation) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			let genAssociation : GenServiceEntityAssociation = genFeature.oclAsType(GenServiceEntityAssociation)
			in if genAssociation.jsfFeature.cardinality = Cardinality::Many then
					false
				else
					genAssociation.genFeature.oclAsType(GenSingletonAssociation).isDependentEnd()
				endif
		else
			false
		endif
/]

[query public isEncrypted(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).jsfFeature.encrypt
		else
			false
		endif
/]

[query public isEnumerationTypeSingletonElement(genFeature : GenServiceFeature) : Boolean
	= if not genFeature.oclIsTypeOf(GenServiceEntityElement) then
			false
		else let serviceFeature : GenServiceEntityElement = genFeature.oclAsType(GenServiceEntityElement)
			in if not serviceFeature.genFeature.oclIsTypeOf(GenSingletonElement) then
					false
				else let genFeature : GenSingletonElement = serviceFeature.genFeature.oclAsType(GenSingletonElement)
					in genFeature.genDataType.ormDataType.oclIsTypeOf(EnumerationType)
				endif
		endif
/]

[query public isFileAttribute(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).genFeature.oclIsTypeOf(GenSingletonFile)
		else
			false
		endif
/]

[comment TODO switch use of jsfFeature to genFeature/]
[query public isInput(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).jsfFeature.feature.isInput()
		else if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			genFeature.oclAsType(GenServiceEntityAssociation).jsfFeature.feature.isInput()
		else
			false
		endif endif
/]

[query public isLocation(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).genFeature.oclIsTypeOf(GenSingletonLocation)
		else
			false
		endif
/]

[query public isManyToManyAssociation(genFeature : GenServiceAssociation) : Boolean
	= genFeature.isCollectionAssociation() and genFeature.isOppositeCollectionAssociation()
/]

[query public isManyToOneAssociation(genFeature : GenServiceAssociation) : Boolean
	= genFeature.isCollectionAssociation() and genFeature.isOppositeSingletonAssociation()
/]

[query public isOneToOneAssociation(genFeature : GenServiceAssociation) : Boolean
	= genFeature.isSingleton() and genFeature.isOppositeSingletonAssociation()
/]

[query public isOneToManyAssociation(genFeature : GenServiceAssociation) : Boolean
	= genFeature.isSingleton() and genFeature.isOppositeCollectionAssociation()
/]

[query public isOppositeCollectionAssociation(genFeature : GenServiceAssociation) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			genFeature.oclAsType(GenServiceEntityAssociation).genFeature.genOpposite.oclIsKindOf(GenCollectionAssociation)
		else
			false
		endif
/]

[query public isOppositeSingletonAssociation(genFeature : GenServiceAssociation) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			genFeature.oclAsType(GenServiceEntityAssociation).genFeature.genOpposite.oclIsKindOf(GenSingletonAssociation)
		else
			false
		endif
/]

[query public isRequired(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).jsfFeature.cardinality = Cardinality::Required
		else if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			genFeature.oclAsType(GenServiceEntityAssociation).jsfFeature.cardinality = Cardinality::Required
		else
			false
		endif endif
/]

[query public isSingleton(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).jsfFeature.cardinality <> Cardinality::Many
		else if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			genFeature.oclAsType(GenServiceEntityAssociation).jsfFeature.cardinality <> Cardinality::Many
		else
			genFeature.oclAsType(GenServiceViewAssociation).jsfFeature.cardinality <> Cardinality::Many
		endif endif
/]

[query public isUnique(genFeature : GenServiceFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			let genElement : GenServiceEntityElement = genFeature.oclAsType(GenServiceEntityElement)
			in if genElement.genFeature.oclIsTypeOf(GenSingletonElement) then
					genElement.genFeature.oclAsType(GenSingletonElement).ormFeature.unique
				else if genElement.genFeature.oclIsTypeOf(GenSingletonDate) then
					genElement.genFeature.oclAsType(GenSingletonDate).ormFeature.unique
				else
					false
				endif endif
		else
			false
		endif
/]

[query public isValidated(genFeature : GenServiceFeature) : Boolean
	= genFeature.isRequired() or genFeature.isUnique()
/]

[query public modelPropertyName(genFeature : GenServiceFeature) : String
	= if genFeature.oclIsTypeOf(GenServiceEntityElement) then
			genFeature.oclAsType(GenServiceEntityElement).columnName
		else if genFeature.oclIsKindOf(GenServiceAssociation) then
			genFeature.oclAsType(GenServiceAssociation).name
		else
			'unhandledFeature'
		endif endif
/]

[query public oppositeColumnName(genFeature : GenServiceFeature) : String
	= let name : String =
			if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
				genFeature.oclAsType(GenServiceEntityAssociation).genFeature.oppositeColumnName()
			else if genFeature.oclIsTypeOf(GenServiceViewAssociation) then
				genFeature.oclAsType(GenServiceViewAssociation).genTargetFeature.columnName()
			else
				'unhandledFeature'
			endif endif
		in name
/]

[query public pivotColumnName(genFeature : GenServiceAssociation) : String
	= if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			let genAssociation : GenServiceEntityAssociation
				= genFeature.oclAsType(GenServiceEntityAssociation)
				in if genAssociation.genFeature.oclIsTypeOf(GenCollectionAssociation) then
						genAssociation.genFeature.oclAsType(GenCollectionAssociation).pivotColumnName
					else
						'unhandledFeature'
					endif
		else
			'unhandledFeature'
		endif
/]

[query public pivotTableName(genFeature : GenServiceAssociation) : String
	= if genFeature.oclIsTypeOf(GenServiceEntityAssociation) then
			let genAssociation : GenServiceEntityAssociation
				= genFeature.oclAsType(GenServiceEntityAssociation)
				in if genAssociation.genFeature.oclIsTypeOf(GenCollectionAssociation) then
						genAssociation.genFeature.oclAsType(GenCollectionAssociation).pivotTableName
					else
						'unhandledFeature'
					endif
		else
			'unhandledFeature'
		endif
/]


[query public displayLabel(genAction : GenUnitSupportAction) : String
	= genAction.jsfAction.displayLabel
/]


[query public authenticationUnits(genPage : GenPage) : OrderedSet(GenAuthenticationUnit)
	= genPage.genUnits->select(u | u.oclIsKindOf(GenAuthenticationUnit))
/]

[query public commandUnits(genPage : GenPage) : OrderedSet(GenCommandUnit)
	= genPage.genUnits->select(u | u.oclIsTypeOf(GenCommandUnit))
/]

[query public controlUnits(genPage : GenPage) : OrderedSet(GenDynamicUnit)
	= genPage.genUnits->select(u | u.oclIsKindOf(GenControlUnit))
/]

[query public dataSupportActions(genPage : GenPage) : Sequence(GenUnitSupportAction)
	= genPage.dynamicUnits()->select(u | u.oclIsKindOf(GenDataUnit))->collect(u | u.genSupportActions)
/]

[query public displayLabel(genPage : GenPage) : String
	= genPage.jsfPage.displayLabel
/]

[query public dynamicUnits(genPage : GenPage) : OrderedSet(GenDynamicUnit)
	= genPage.genUnits->select(u | u.oclIsKindOf(GenDynamicUnit))
/]

[query public formUnits(genPage : GenPage) : Sequence(GenDynamicUnit)
	= genPage.genUnits->select(u | u.oclIsKindOf(GenControlUnit) or u.oclIsKindOf(GenEditUnit)).oclAsType(GenDynamicUnit)
/]

[query public hasAuthenticationUnit(genPage : GenPage) : Boolean
	= genPage.authenticationUnits()->notEmpty()
/]

[query public hasCommandUnits(genPage : GenPage) : Boolean
	= genPage.commandUnits()->notEmpty()
/]

[query public hasControlUnits(genPage : GenPage) : Boolean
	= genPage.controlUnits()->notEmpty()
/]

[query public hasDataSupportActions(genPage : GenPage) : Boolean
	= genPage.dataSupportActions()->notEmpty()
/]

[query public hasDynamicUnits(genPage : GenPage) : Boolean
	= genPage.dynamicUnits()->notEmpty()
/]

[query public hasFormUnits(genPage : GenPage) : Boolean
	= genPage.formUnits()->notEmpty()
/]

[query public hasInputAssociations(genPage : GenPage) : Boolean
	= genPage.inputAssociations()->notEmpty()
/]

[query public hasMapUnits(genPage : GenPage) : Boolean
	= genPage.mapUnits()->notEmpty()
/]

[query public hasNoDynamicUnits(genPage : GenPage) : Boolean
	= genPage.dynamicUnits()->isEmpty()
/]

[query public hasParameterisedUnits(genPage : GenPage) : Boolean
	= genPage.parameterisedUnits()->notEmpty()
/]

[query public hasSupportActions(genPage : GenPage) : Boolean
	= genPage.supportActions()->notEmpty()
/]

[query public hasUriActions(genPage : GenPage) : Boolean
	= genPage.uriActions()->notEmpty()
/]

[query public indexUnits(genPage : GenPage) : OrderedSet(GenIndexUnit)
	= genPage.genUnits->select(u | u.oclIsKindOf(GenIndexUnit))
/]

[query public inputAssociations(genPage : GenPage) : Sequence(GenIncludedAssociation)
	= genPage.dynamicUnits()->collect(u | u.inputAssociations())
/]

[query public isAuthenticated(genPage : GenPage) : Boolean
	= genPage.jsfPage.authenticated and genPage.genPartOf.isAuthenticated()
/]

[query public mapUnits(genPage : GenPage) : Sequence(GenMapUnit)
	= genPage.genUnits->select(u | u.oclIsKindOf(GenMapUnit)).oclAsType(GenMapUnit)
/]

[query public nonDynamicUnits(genPage : GenPage) : OrderedSet(GenContentUnit)
	= genPage.genUnits->select(u | not u.oclIsKindOf(GenDynamicUnit))
/]

[query public parameterisedUnits(genPage : GenPage) : OrderedSet(GenDynamicUnit)
	= genPage.genUnits->select(u | u.isParameterised())
/]

[query public supportActions(genPage : GenPage) : Sequence(GenUnitSupportAction)
	= genPage.dynamicUnits()->collect(u | u.genSupportActions)
/]

[query public uriActions(genPage : GenPage) : Sequence(GenInlineAction)
	= genPage.dynamicUnits()->collect(u | u.uriActions())
/]


[query public name(genMenu : GenMenu) : String
	= if genMenu.oclIsTypeOf(GenDynamicMenu) then
			genMenu.oclAsType(GenDynamicMenu).name
		else if genMenu.oclIsKindOf(GenStaticMenu) then
			genMenu.oclAsType(GenStaticMenu).name
		else
			'unhandledMenu'
		endif endif
/]

[query public styleClass(genMenu : GenMenu) : String
	= if genMenu.oclIsTypeOf(GenDynamicMenu) then
			genMenu.oclAsType(GenDynamicMenu).jsfMenu.styleClass
		else if genMenu.oclIsKindOf(GenStaticMenu) then
			genMenu.oclAsType(GenStaticMenu).jsfMenu.styleClass
		else
			'unhandledMenu'
		endif endif
/]


[query public associationFields(genUnit : GenDynamicUnit) : OrderedSet(GenUnitAssociation)
	= genUnit.genDisplayFields->select(f | f.oclIsTypeOf(GenUnitAssociation))
/]

[query public cancelLabel(genUnit : GenDynamicUnit) : String
	= let unit : ContentUnit = genUnit.jsfUnit()
		in if unit.oclIsUndefined() then
				'unhandledUnit'
			else if unit.oclIsKindOf(EditUnit) then
				unit.oclAsType(EditUnit).cancelLabel
			else if unit.oclIsKindOf(ControlUnit) then
				unit.oclAsType(ControlUnit).cancelLabel
			else
				'unexpectedUnit'
			endif endif endif
/]

[query public captchaFields(genUnit : GenDynamicUnit) : OrderedSet(GenUnitField)
	= genUnit.genDisplayFields->select(f | f.oclIsTypeOf(GenCaptchaField))
/]

[query public captionClass(genUnit : GenContentUnit) : String
	= let unit : ContentUnit = genUnit.jsfUnit()
		in if not unit.oclIsUndefined() then
				unit.captionClass
			else
				'unhandledUnit'
			endif
/]

[query public controlClass(genUnit : GenDynamicUnit) : String
	= let unit : DynamicUnit = genUnit.jsfUnit().oclAsType(DynamicUnit)
		in if not unit.oclIsUndefined() then
				unit.controlClass
			else
				'unhandledUnit'
			endif
/]

[query public defaultValueFields(genUnit : GenDynamicUnit) : Set(GenUnitField)
	= genUnit.genDisplayFields->select(f | f.hasDefaultValue())
/]

[query public displayLabel(genUnit : GenContentUnit) : String
	= let unit : ContentUnit = genUnit.jsfUnit()
		in if not unit.oclIsUndefined() then
				unit.displayLabel
			else
				'unhandledUnit'
			endif
/]

[query public encryptedFeatures(genUnit : GenDynamicUnit) : Set(GenUnitField)
	= genUnit.genDisplayFields->select(f | f.oclIsKindOf(GenUnitFeature))->select(f | f.isEncrypted())
/]

[query public errorClass(genUnit : GenDynamicUnit) : String
	= let unit : DynamicUnit = genUnit.jsfUnit().oclAsType(DynamicUnit)
		in if not unit.oclIsUndefined() then
				unit.errorClass
			else
				'unhandledUnit'
			endif
/]

[query public fileInputFields(genUnit : GenDynamicUnit) : OrderedSet(GenUnitField)
	= genUnit.genDisplayFields->select(f |
		if f.oclIsKindOf(GenUnitFeature) then
			f.oclAsType(GenUnitFeature).isFileInput()
		else
			false
		endif)
/]

[query public forcedValueFeatures(genUnit : GenDynamicUnit) : OrderedSet(GenUnitField)
	= genUnit.genDisplayFields->select(f | f.hasForcedValue())
/]

[query public hasCaptchaFields(genUnit : GenDynamicUnit) : Boolean
	= genUnit.captchaFields()->notEmpty()
/]

[query public hasClearLabel(genUnit : GenEditUnit) : Boolean
	= if genUnit.oclIsTypeOf(GenCreateUpdateUnit) then
			not genUnit.oclAsType(GenCreateUpdateUnit).jsfUnit.clearLabel.oclIsUndefined()
		else
			false
		endif
/]

[query public hasDefaultValueFields(genUnit : GenDynamicUnit) : Boolean
	= genUnit.defaultValueFields()->notEmpty()
/]

[query public hasEncryptedFeatures(genUnit : GenDynamicUnit) : Boolean
	= genUnit.encryptedFeatures()->notEmpty()
/]

[query public hasForcedValueFeatures(genUnit : GenDynamicUnit) : Boolean
	= genUnit.forcedValueFeatures()->notEmpty()
/]

[query public hasInputAssociations(genUnit : GenDynamicUnit) : Boolean
	= genUnit.inputAssociations()->notEmpty()
/]

[query public hasInputFields(genUnit : GenDynamicUnit) : Boolean
	= genUnit.inputFields()->notEmpty()
/]

[query public hasOmitFieldLabels(genUnit : GenDataUnit) : Boolean
	= if genUnit.oclIsTypeOf(GenDetailsUnit) then
			genUnit.oclAsType(GenDetailsUnit).jsfUnit.omitFieldLabels
		else
			genUnit.oclAsType(GenIndexUnit).jsfUnit.omitColumnLabels
		endif
/]

[query public hasInterfaceFields(genUnit : GenContentUnit) : Boolean
	= if genUnit.oclIsKindOf(GenDynamicUnit) then
			genUnit.oclAsType(GenDynamicUnit).interfaceFields()->notEmpty()
		else
			false
		endif
/]

[query public hasMessagesOnFormHead(genUnit : GenDynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if genUnit.oclIsKindOf(GenEditUnit) then
					genUnit.oclAsType(GenEditUnit).messagePlacementOption
				else if genUnit.oclIsKindOf(GenControlUnit) then
					genUnit.oclAsType(GenControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormHead
				or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
				or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFormFoot(genUnit : GenDynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if genUnit.oclIsKindOf(GenEditUnit) then
					genUnit.oclAsType(GenEditUnit).messagePlacementOption
				else if genUnit.oclIsKindOf(GenControlUnit) then
					genUnit.oclAsType(GenControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::FormFoot
			or placementOption = InputMessagePlacementOptions::FormHeadAndFoot
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasMessagesOnFeature(genUnit : GenDynamicUnit) : Boolean
	= let placementOption : InputMessagePlacementOptions
			= if genUnit.oclIsKindOf(GenEditUnit) then
					genUnit.oclAsType(GenEditUnit).messagePlacementOption
				else if genUnit.oclIsKindOf(GenControlUnit) then
					genUnit.oclAsType(GenControlUnit).messagePlacementOption
				else
					null
				endif endif
		in if placementOption.oclIsUndefined() then
			false
		else
			placementOption = InputMessagePlacementOptions::OnFeature
			or placementOption = InputMessagePlacementOptions::FormAndOnFeature
		endif
/]

[query public hasUnitMethods(genUnit : GenContentUnit) : Boolean
	= if genUnit.oclIsTypeOf(GenCommandUnit) then
			true
		else if genUnit.oclIsKindOf(GenEditUnit) then
			true
		else if genUnit.oclIsKindOf(GenDataUnit) then
			genUnit.oclAsType(GenDataUnit).hasUriActions()
		else if genUnit.oclIsTypeOf(GenActionUnit) then
			true
		else if genUnit.oclIsKindOf(GenAuthenticationUnit) then
			true
		else
			false
		endif endif endif endif endif
/]

[query public hasUriActions(genUnit : GenDynamicUnit) : Boolean
	= genUnit.uriActions()->notEmpty()
/]

[query public headerClass(genUnit : GenDynamicUnit) : String
	= let unit : DynamicUnit = genUnit.jsfUnit().oclAsType(DynamicUnit)
		in if not unit.oclIsUndefined() then
				unit.headerClass
			else
				'unhandledUnit'
			endif
/]

[query public inputAssociations(genUnit : GenDynamicUnit) : Sequence(GenUnitField)
	= if genUnit.oclIsKindOf(GenControlUnit) or genUnit.oclIsKindOf(GenEditUnit) then
			genUnit.inputFields()->select(f | f.oclIsTypeOf(GenUnitAssociation))
		else
			Sequence{}
		endif
/]

[query public inputCollectionAssociations(genUnit : GenDynamicUnit) : Sequence(GenUnitField)
	= if genUnit.oclIsKindOf(GenControlUnit) or genUnit.oclIsKindOf(GenEditUnit) then
			genUnit.inputFields()->select(f | f.oclIsTypeOf(GenUnitAssociation) and not f.isSingleton())
		else
			Sequence{}
		endif
/]

[query public inputFields(genUnit : GenDynamicUnit) : Sequence(GenUnitField)
	= genUnit.genDisplayFields->asSequence()->select(f |
		if f.oclIsKindOf(GenUnitFeature) then
			f.oclAsType(GenUnitFeature).isInput()
		else
			true
		endif)
/]

[query public inputOrEmbeddedFields(genUnit : GenDynamicUnit) : Sequence(GenUnitField)
	= genUnit.genDisplayFields->asSequence()->select(f |
		if f.oclIsKindOf(GenUnitFeature) then
			f.oclAsType(GenUnitFeature).isInputOrEmbedded()
		else
			true
		endif)
/]

[query public interfaceFields(genUnit : GenDynamicUnit) : OrderedSet(GenInterfaceField)
	= genUnit.genDisplayFields->select(f | f.oclIsKindOf(GenInterfaceField))
/]

[query public isAuthenticated(genUnit : GenContentUnit) : Boolean
	= genUnit.pageDisplayedOn().isAuthenticated()
/]

[query public isParameterised(genUnit : GenContentUnit) : Boolean
	= if genUnit.oclIsKindOf(GenDataUnit) then
			genUnit.oclAsType(GenDataUnit).genSelection.oclIsUndefined()
		else
			genUnit.oclIsKindOf(GenEditUnit)
		endif
/]

[query public jsfUnit(genUnit : GenContentUnit) : ContentUnit
	= if genUnit.oclIsTypeOf(GenCreateSitemapUnit) then
			genUnit.oclAsType(GenCreateSitemapUnit).jsfUnit

		else if genUnit.oclIsTypeOf(GenStaticUnit) then
			genUnit.oclAsType(GenStaticUnit).jsfUnit

		else if genUnit.oclIsTypeOf(GenCommandUnit) then
			genUnit.oclAsType(GenCommandUnit).jsfUnit

		else if genUnit.oclIsTypeOf(GenCreateUnit) then
			genUnit.oclAsType(GenCreateUnit).jsfUnit
		else if genUnit.oclIsTypeOf(GenCreateUpdateUnit) then
			genUnit.oclAsType(GenCreateUpdateUnit).jsfUnit
		else if genUnit.oclIsTypeOf(GenUpdateUnit) then
			genUnit.oclAsType(GenUpdateUnit).jsfUnit
		else if genUnit.oclIsTypeOf(GenMapUnit) then
			genUnit.oclAsType(GenMapUnit).jsfUnit

		else if genUnit.oclIsTypeOf(GenDetailsUnit) then
			genUnit.oclAsType(GenDetailsUnit).jsfUnit
		else if genUnit.oclIsKindOf(GenIndexUnit) then
			genUnit.oclAsType(GenIndexUnit).jsfUnit

		else if genUnit.oclIsTypeOf(GenActionUnit) then
			genUnit.oclAsType(GenActionUnit).jsfUnit
		else if genUnit.oclIsTypeOf(GenSearchUnit) then
			genUnit.oclAsType(GenSearchUnit).jsfUnit

		else if genUnit.oclIsTypeOf(GenForgottenPasswordUnit) then
			genUnit.oclAsType(GenForgottenPasswordUnit).jsfUnit
		else if genUnit.oclIsTypeOf(GenLoginUnit) then
			genUnit.oclAsType(GenLoginUnit).jsfUnit
		else if genUnit.oclIsTypeOf(GenRegistrationUnit) then
			genUnit.oclAsType(GenRegistrationUnit).jsfUnit
		else
			null
		endif endif endif endif endif endif endif endif endif endif endif endif endif endif
/]

[query public layoutClass(genUnit : GenContentUnit) : String
	= let unit : ContentUnit = genUnit.jsfUnit().oclAsType(ContentUnit)
		in if not unit.oclIsUndefined() then
				unit.layoutClass
			else
				'unhandledUnit'
			endif
/]

[query public nonFileInputFeatures(genUnit : GenDynamicUnit) : OrderedSet(GenUnitField)
	= genUnit.genDisplayFields->select(f | f.oclIsKindOf(GenUnitFeature))->select(f |
		if f.oclIsKindOf(GenUnitFeature) then
			f.oclAsType(GenUnitFeature).isInput() and not f.oclAsType(GenUnitFeature).isFileInput()
		else
			true
		endif)
/]

[query public omitCaption(genUnit : GenContentUnit) : Boolean
	= let unit : ContentUnit = genUnit.jsfUnit()
		in if not unit.oclIsUndefined() then
				unit.omitCaption
			else
				false
			endif
/]

[query public pageDisplayedOn(genUnit : GenContentUnit) : GenPage
	= if genUnit.genDisplayedOn.oclIsTypeOf(GenPage) then
			genUnit.genDisplayedOn.oclAsType(GenPage)
		else
			genUnit.genDisplayedOn.oclAsType(GenUnitAssociation).genDisplayedOn.pageDisplayedOn()
		endif
/]

[query public rowClasses(genUnit : GenIndexUnit) : Sequence(String)
	= genUnit.jsfUnit.rowClasses.tokenize(' ')
/]

[query public searchFields(genUnit : GenIndexUnit) : Bag(GenUnitField)
	= genUnit->collect(genTargettingSearches.genDisplayFields)
/]

[query public styleClass(genUnit : GenContentUnit) : String
	= let unit : ContentUnit = genUnit.jsfUnit()
		in if not unit.oclIsUndefined() then
				unit.styleClass
			else
				'unhandledUnit'
			endif
/]

[query public submitLabel(genUnit : GenDynamicUnit) : String
	= let unit : ContentUnit = genUnit.jsfUnit()
		in if unit.oclIsUndefined() then
				'unhandledUnit'
			else if unit.oclIsKindOf(EditUnit) then
				unit.oclAsType(EditUnit).confirmLabel
			else if unit.oclIsKindOf(ControlUnit) then
				unit.oclAsType(ControlUnit).submitLabel
			else
				'unexpectedUnit'
			endif endif endif
/]

[query public uriActions(genUnit : GenDynamicUnit) : Sequence(GenInlineAction)
	= genUnit.genDisplayFields->select(f | f.oclIsTypeOf(GenUnitAssociation)).oclAsType(GenUnitAssociation)
			->collect(f | f.genUnits.oclAsType(GenDynamicUnit).uriActions())
		->union(if genUnit.oclIsKindOf(GenIndexUnit) then
				genUnit.oclAsType(GenIndexUnit).genActions->select(a | not a.oclIsTypeOf(GenSelectAction)).oclAsType(GenInlineAction)
			else
				Sequence{}
			endif)
/]


[query public columnName(genField : GenUnitField) : String
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).columnName()
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.name
		else if genField.oclIsTypeOf(GenDateField) then
			genField.oclAsType(GenDateField).jsfField.name
		else
			genField.oclAsType(GenCaptchaField).name
		endif endif endif
/]

[query public conditionalDisplay(genField : GenUnitField) : Boolean
	= if genField.oclIsTypeOf(GenUnitElement) then
			genField.oclAsType(GenUnitElement).jsfFeature.onlyDisplayWhenNotEmpty
		else if genField.oclIsTypeOf(GenUnitAssociation) then
			genField.oclAsType(GenUnitAssociation).jsfFeature.onlyDisplayWhenNotEmpty
		else
			false
		endif endif
/]

[query public displayClass(genField : GenUnitField) : String
	= if not genField.oclIsTypeOf(GenUnitAssociation) or genField.isSingleton() then
			genField.modelPropertyName()
		else
			let genAssociation : GenUnitAssociation = genField.oclAsType(GenUnitAssociation)
			in if genAssociation.genUnits->isEmpty() then
					genField.modelPropertyName()
				else
					genAssociation.genUnits->first().jsfUnit().styleClass
				endif
		endif
/]

[query public displayLabel(genField : GenUnitField) : String
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).displayLabel()
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.displayLabel
		else if genField.oclIsTypeOf(GenDateField) then
			genField.oclAsType(GenDateField).jsfField.displayLabel
		else 
			genField.oclAsType(GenCaptchaField).jsfField.displayLabel
		endif endif endif
/]

[query public modelPropertyName(genField : GenUnitField) : String
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).modelPropertyName()
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.name
		else if genField.oclIsTypeOf(GenDateField) then
			genField.oclAsType(GenDateField).jsfField.name
		else if genField.oclIsTypeOf(GenCaptchaField) then
			genField.oclAsType(GenCaptchaField).name
		else
			'UnhandledFeature'
		endif endif endif endif
/]

[query public hasDefaultValue(genField : GenUnitField) : Boolean
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenIncludedFeature).hasDefaultValue()
		else if genField.oclIsKindOf(GenInterfaceField) then
			not genField.oclAsType(GenInterfaceField).genDefaultValue.oclIsUndefined()
		else
			false
		endif endif
/]

[query public hasForcedValue(genField : GenUnitField) : Boolean
	= if genField.oclIsKindOf(GenIncludedFeature) then
			genField.oclAsType(GenIncludedFeature).hasForcedValue()
		else
			false
		endif
/]

[query public hasSelection(genField : GenUnitField) : Boolean
	= not genField.selection().oclIsUndefined()
/]

[query public inputClass(genField : GenUnitField) : String
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).inputClass()
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.inputClass
		else if genField.oclIsTypeOf(GenDateField) then
			genField.oclAsType(GenDateField).jsfField.inputClass
		else
			'Unhandled'
		endif endif endif
/]

[query public isBooleanDataType(genField : GenUnitField) : Boolean
	= if not genField.oclIsTypeOf(GenUnitElement) then
			false
		else let genIncludedFeature : GenUnitElement = genField.oclAsType(GenUnitElement)
			in if not genIncludedFeature.genServiceFeature.genFeature.oclIsTypeOf(GenSingletonElement) then
					false
				else let genFeature : GenSingletonElement = genIncludedFeature.genServiceFeature.genFeature.oclAsType(GenSingletonElement)
					in genFeature.genDataType.ormDataType.name = 'Boolean'
				endif
		endif
/]

[query public isCaseInsensitive(genField : GenUnitField) : Boolean
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).isCaseInsensitive()
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.caseInsensitive
		else
			false
		endif endif
/]

[query public isDataTypeSingleton(genField : GenUnitField) : Boolean
	= if not genField.oclIsTypeOf(GenUnitElement) then
			false
		else let genIncludedFeature : GenUnitElement = genField.oclAsType(GenUnitElement)
			in if not genIncludedFeature.genServiceFeature.genFeature.oclIsTypeOf(GenSingletonElement) then
					false
				else let genFeature : GenSingletonElement = genIncludedFeature.genServiceFeature.genFeature.oclAsType(GenSingletonElement)
					in genFeature.genDataType.ormDataType.oclIsTypeOf(DataType)
				endif
		endif
/]

[query public isDateSingleton(genField : GenUnitField) : Boolean
	= if genField.oclIsTypeOf(GenUnitElement) then
			let genFeature : GenUnitElement = genField.oclAsType(GenUnitElement)
			in genFeature.genServiceFeature.genFeature.oclIsTypeOf(GenSingletonDate)
		else
			let genFeature : GenUnitAssociation = genField.oclAsType(GenUnitAssociation)
			in if genFeature.genChildFeature.oclIsUndefined() then
					false
				else
					genFeature.genChildFeature.isDateSingletonElement()
				endif
		endif
/]

[query public isEncrypted(genField : GenUnitField) : Boolean
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).isEncrypted()
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.encrypt
		else
			false
		endif endif
/]

[query public isEnumerationTypeSingleton(genField : GenUnitField) : Boolean
	= if not genField.oclIsTypeOf(GenUnitElement) then
			false
		else let genFeature : GenUnitElement = genField.oclAsType(GenUnitElement)
			in genFeature.genServiceFeature.isEnumerationTypeSingletonElement()
		endif
/]

[query public isFileSingleton(genField : GenUnitField) : Boolean
	= if not genField.oclIsTypeOf(GenUnitElement) then
			false
		else let genFeature : GenUnitElement = genField.oclAsType(GenUnitElement)
			in genFeature.genServiceFeature.genFeature.oclIsTypeOf(GenSingletonFile)
		endif
/]

[query public isLocation(genField : GenUnitField) : Boolean
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).isLocation()
		else
			false
		endif
/]

[query public isObfuscated(genField : GenUnitField) : Boolean
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).isObfuscated()
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.obfuscateFormFields
		else
			false
		endif endif
/]

[query public isRequired(genField : GenUnitField) : Boolean
	= if genField.oclIsTypeOf(GenUnitElement) then
			genField.oclAsType(GenUnitElement).jsfFeature.cardinality = Cardinality::Required
		else if genField.oclIsTypeOf(GenUnitAssociation) then
			genField.oclAsType(GenUnitAssociation).jsfFeature.cardinality = Cardinality::Required
		else if genField.oclIsTypeOf(GenDataTypeField) then
			genField.oclAsType(GenDataTypeField).jsfField.cardinality = Cardinality::Required
		else if genField.oclIsTypeOf(GenDateField) then
			genField.oclAsType(GenDateField).jsfField.cardinality = Cardinality::Required
		else
			false
		endif endif endif endif
/]

[query public isSingleton(genField : GenUnitField) : Boolean
	= if genField.oclIsTypeOf(GenUnitElement) then
			genField.oclAsType(GenUnitElement).jsfFeature.cardinality <> Cardinality::Many
		else if genField.oclIsTypeOf(GenUnitAssociation) then
			genField.oclAsType(GenUnitAssociation).jsfFeature.cardinality <> Cardinality::Many
		else
			true
		endif endif
/]

[query public isUnique(genField : GenUnitField) : Boolean
	= if genField.oclIsKindOf(GenUnitFeature) then
			genField.oclAsType(GenUnitFeature).isUnique()
		else
			false
		endif
/]

[query public pageDisplayedOn(genField : GenUnitField) : GenPage
	= genField.genDisplayedOn.pageDisplayedOn()
/]

[comment TODO what if field has a selection?/]
[query public selection(genField : GenUnitField) : GenSelection
	= if not genField.oclIsTypeOf(GenUnitAssociation) then
			null
		else
			let genFeature : GenUnitAssociation = genField.oclAsType(GenUnitAssociation)
			in if genFeature.genUnits->isEmpty() then
					null
				else if genFeature.genUnits->first().oclIsKindOf(GenIndexUnit) then
					genFeature.genUnits->first().oclAsType(GenIndexUnit).genSelection
				else
					null
			endif endif
		endif
/]

[query public styleClass(genField : GenUnitField) : String
	= let className : String = genField.modelPropertyName()
		in className.replaceAll('([A-Z])', '_$1').toLowerCase()
/]


[query public columnName(genFeature : GenUnitFeature) : String
	= let serviceFeature : GenServiceFeature =
			if genFeature.oclIsTypeOf(GenUnitElement) then
				genFeature.oclAsType(GenUnitElement).genServiceFeature
			else if genFeature.oclIsTypeOf(GenUnitAssociation) then
				genFeature.oclAsType(GenUnitAssociation).genServiceFeature
			else
				null
			endif endif
		in if not serviceFeature.oclIsUndefined() then
				serviceFeature.columnName()
			else
				'unhandledFeature'
			endif
/]

[query public displayLabel(genFeature : GenUnitFeature) : String
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).jsfFeature.displayLabel
		else if genFeature.oclIsTypeOf(GenUnitAssociation) then
			genFeature.oclAsType(GenUnitAssociation).jsfFeature.displayLabel
		else
			'unhandledFeature'
		endif endif
/]

[query public inputClass(genFeature : GenUnitFeature) : String
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).jsfFeature.inputClass
		else if genFeature.oclIsTypeOf(GenUnitAssociation) then
			genFeature.oclAsType(GenUnitAssociation).jsfFeature.inputClass
		else
			'unhandledFeature'
		endif endif
/]

[query public isCaseInsensitive(genFeature : GenUnitFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).genServiceFeature.isCaseInsensitive()
		else
			false
		endif
/]

[query public isEncrypted(genFeature : GenUnitFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).genServiceFeature.isEncrypted()
		else
			false
		endif
/]

[query public isFileAttribute(genFeature : GenUnitFeature) : Boolean
	= if not genFeature.oclIsTypeOf(GenUnitElement) then
			false
		else
			genFeature.oclAsType(GenUnitElement).genServiceFeature.genFeature.oclIsTypeOf(GenSingletonFile)
		endif
/]

[query public isFileInput(genFeature : GenUnitFeature) : Boolean
	= genFeature.isInput() and genFeature.isFileAttribute()
/]

[query public isInput(genFeature : GenUnitFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenUnitElement) and genFeature.isSingleton() then
			if genFeature.oclAsType(GenUnitElement).genForcedValue.oclIsUndefined() then
				genFeature.oclAsType(GenUnitElement).genServiceFeature.isInput()
			else
				false
			endif
		else if genFeature.oclIsTypeOf(GenUnitAssociation) and genFeature.isSingleton() then
			if genFeature.oclAsType(GenUnitAssociation).genForcedValue.oclIsUndefined() then
				genFeature.oclAsType(GenUnitAssociation).genServiceFeature.isInput()
			else
				false
			endif
		else if genFeature.oclIsTypeOf(GenUnitAssociation) and not genFeature.isSingleton() then
			if genFeature.oclAsType(GenUnitAssociation).genUnits->isEmpty() then
				genFeature.oclAsType(GenUnitAssociation).genServiceFeature.isInput()
			else
				false
			endif
		else
			false
		endif endif endif
/]

[query public isInputOrEmbedded(genFeature : GenUnitFeature) : Boolean
	= genFeature.isInput() or
		if not genFeature.oclIsTypeOf(GenUnitAssociation) then
			false
		else
			genFeature.oclAsType(GenUnitAssociation).genUnits->notEmpty()
		endif
/]

[query public isLocation(genFeature : GenUnitFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).genServiceFeature.isLocation()
		else
			false
		endif
/]

[query public isObfuscated(genFeature : GenUnitFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).jsfFeature.obfuscateFormFields
		else
			false
		endif
/]

[query public isUnique(genFeature : GenUnitFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).genServiceFeature.isUnique()
		else if genFeature.oclIsTypeOf(GenUnitAssociation) then
			genFeature.oclAsType(GenUnitAssociation).genServiceFeature.isUnique()
		else
			false
		endif endif
/]

[query public isValidated(genFeature : GenUnitFeature) : Boolean
	= if genFeature.oclIsTypeOf(GenUnitElement) then
			genFeature.oclAsType(GenUnitElement).genServiceFeature.isValidated()
		else if genFeature.oclIsTypeOf(GenUnitAssociation) then
			genFeature.oclAsType(GenUnitAssociation).genServiceFeature.isValidated()
		else
			false
		endif endif
/]

[query public modelPropertyName(genFeature : GenUnitFeature) : String
	= let name : String =
			if genFeature.oclIsTypeOf(GenUnitElement) then
				genFeature.oclAsType(GenUnitElement).genServiceFeature.modelPropertyName()
			else if genFeature.oclIsTypeOf(GenUnitAssociation) then
				genFeature.oclAsType(GenUnitAssociation).genServiceFeature.modelPropertyName()
			else
				'unhandledFeature'
			endif endif
		in name
/]

[query public name(genFeature : GenUnitFeature) : String
	= let name : String =
			if genFeature.oclIsTypeOf(GenUnitElement) then
				genFeature.oclAsType(GenUnitElement).genServiceFeature.name
			else if genFeature.oclIsTypeOf(GenUnitAssociation) then
				genFeature.oclAsType(GenUnitAssociation).genServiceFeature.name
			else
				'unhandledFeature'
			endif endif
		in name
/]


[query public isDateSingletonElement(genChild : GenUnitChildFeature) : Boolean
	= if genChild.oclIsTypeOf(GenUnitChildElement) then
			let genFeature : GenUnitChildElement = genChild.oclAsType(GenUnitChildElement)
			in genFeature.genServiceFeature.genFeature.oclIsTypeOf(GenSingletonDate)
		else
			let genFeature : GenUnitChildAssociation = genChild.oclAsType(GenUnitChildAssociation)
			in if genFeature.genChildFeature.oclIsUndefined() then
					false
				else
					genFeature.genChildFeature.isDateSingletonElement()
				endif
		endif
/]


[query public controller(genAction : GenInlineAction) : GenPage
	= if genAction.oclIsTypeOf(GenSelectAction) then
			genAction.oclAsType(GenSelectAction).genTarget.oclAsType(GenDynamicUnit).pageDisplayedOn()
		else
			if genAction.genUsedBy.oclIsKindOf(GenDynamicUnit) then
				genAction.genUsedBy.oclAsType(GenDynamicUnit).pageDisplayedOn()
			else
				null
			endif
		endif
/]

[query public displayLabel(genAction : GenInlineAction) : String
	= genAction.jsfAction.displayLabel
/]


[query public tableColumns(genEntity : GenEntity) : OrderedSet(GenFeature)
	= genEntity.genFeatures->select(f | f.hasColumn())
/]


[query public columnName(genFeature : GenFeature) : String
	= if genFeature.oclIsKindOf(GenSingletonAttribute) then
			genFeature.oclAsType(GenSingletonAttribute).columnName
		else if genFeature.oclIsKindOf(GenCollectionAttribute) then
			genFeature.oclAsType(GenCollectionAttribute).columnName
		else if genFeature.oclIsKindOf(GenSingletonAssociation) then
			genFeature.oclAsType(GenSingletonAssociation).columnName
		else if genFeature.oclIsKindOf(GenCollectionAssociation) then
			if genFeature.oclAsType(GenCollectionAssociation).genOpposite.oclIsTypeOf(GenCollectionAssociation) then
				genFeature.oclAsType(GenCollectionAssociation).pivotColumnName
			else
				genFeature.oclAsType(GenCollectionAssociation).name
			endif
		else
			'unhandledFeature'
		endif endif endif endif
/]

[query public hasColumn(genFeature : GenFeature) : Boolean
	= if genFeature.oclIsKindOf(GenSingletonAttribute) then
			true
		else if genFeature.oclIsTypeOf(GenSingletonAssociation) then
			let genSingletonFeature : GenSingletonAssociation = genFeature.oclAsType(GenSingletonAssociation)
			in if genSingletonFeature.genOpposite.oclIsTypeOf(GenSingletonAssociation) then
					genSingletonFeature.isDependentEnd()
				else
					true
				endif
		else
			false
		endif endif
/]

[query public isDataTypeSingletonElement(genFeature : GenFeature) : Boolean
	= if not genFeature.oclIsKindOf(GenSingletonElement) then
			false
		else let genSingletonFeature : GenSingletonElement = genFeature.oclAsType(GenSingletonElement)
			in genSingletonFeature.genDataType.ormDataType.oclIsTypeOf(DataType)
		endif
/]

[query public isEnumerationTypeSingletonElement(genFeature : GenFeature) : Boolean
	= if not genFeature.oclIsKindOf(GenSingletonElement) then
			false
		else let genSingletonFeature : GenSingletonElement = genFeature.oclAsType(GenSingletonElement)
			in genSingletonFeature.genDataType.ormDataType.oclIsTypeOf(EnumerationType)
		endif
/]

[query public isManyToManyAssociationXX(genFeature : GenAssociation) : Boolean
	= genFeature.oclIsTypeOf(GenCollectionAssociation) and genFeature.genOpposite.oclIsTypeOf(GenCollectionAssociation)
/]

[query public isDependentEnd(genFeature : GenSingletonAssociation) : Boolean
	= if not genFeature.genOpposite.oclIsTypeOf(GenSingletonAssociation) then
			true
		else
			genFeature.ormFeature.sourceEnd and genFeature.ormFeature.required
			or genFeature.ormFeature.sourceEnd and not genFeature.genOpposite.oclAsType(GenSingletonAssociation).ormFeature.required
			or not genFeature.ormFeature.sourceEnd and not genFeature.genOpposite.oclAsType(GenSingletonAssociation).ormFeature.required
		endif
/]


[query public isInput(ormFeature : Feature) : Boolean
	= if ormFeature.inputField.oclIsUndefined() then
			false
		else
			ormFeature.inputField
		endif
/]

[query public name(genFeature : GenFeature) : String
	= if genFeature.oclIsTypeOf(GenSingletonElement) then
			genFeature.oclAsType(GenSingletonElement).name
		else if genFeature.oclIsTypeOf(GenSingletonDate) then
			genFeature.oclAsType(GenSingletonDate).name
		else if genFeature.oclIsTypeOf(GenCollectionElement) then
			genFeature.oclAsType(GenCollectionElement).name
		else if genFeature.oclIsTypeOf(GenCollectionDate) then
			genFeature.oclAsType(GenCollectionDate).name
		else if genFeature.oclIsKindOf(GenSingletonAssociation) then
			genFeature.oclAsType(GenSingletonAssociation).name
		else if genFeature.oclIsKindOf(GenCollectionAssociation) then
			genFeature.oclAsType(GenCollectionAssociation).name
		else
			'unhandledFeature'
		endif endif endif endif endif endif
/]

[query public oppositeColumnName(genFeature : GenAssociation) : String
	= if genFeature.oclIsTypeOf(GenSingletonAssociation) then
			genFeature.oclAsType(GenSingletonAssociation).oppositeColumnName()
		else if genFeature.oclIsTypeOf(GenCollectionAssociation) then
			genFeature.oclAsType(GenCollectionAssociation).oppositeColumnName()
		else
			'Unhandled Association'
		endif endif
/]

[query public oppositeColumnName(genFeature : GenCollectionAssociation) : String
	= genFeature.genOpposite.columnName()
/]

[query public oppositeColumnName(genFeature : GenSingletonAssociation) : String
	= genFeature.genOpposite.columnName()
/]


[query public displayLabel(enumerationLiteral : EnumerationLiteral) : String
	= enumerationLiteral.displayLabel
/]

