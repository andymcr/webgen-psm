/**
 */
package work.andycarpenter.metamodel.security.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import work.andycarpenter.metamodel.security.util.SecurityAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SecurityItemProviderAdapterFactory extends SecurityAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SecurityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.SecurityModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityModelItemProvider securityModelItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.SecurityModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityModelAdapter() {
		if (securityModelItemProvider == null) {
			securityModelItemProvider = new SecurityModelItemProvider(this);
		}

		return securityModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.LocalAuthenticationSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalAuthenticationSystemItemProvider localAuthenticationSystemItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.LocalAuthenticationSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalAuthenticationSystemAdapter() {
		if (localAuthenticationSystemItemProvider == null) {
			localAuthenticationSystemItemProvider = new LocalAuthenticationSystemItemProvider(this);
		}

		return localAuthenticationSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.RegistrationElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegistrationElementItemProvider registrationElementItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.RegistrationElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegistrationElementAdapter() {
		if (registrationElementItemProvider == null) {
			registrationElementItemProvider = new RegistrationElementItemProvider(this);
		}

		return registrationElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.LoginElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoginElementItemProvider loginElementItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.LoginElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoginElementAdapter() {
		if (loginElementItemProvider == null) {
			loginElementItemProvider = new LoginElementItemProvider(this);
		}

		return loginElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.LogoutElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogoutElementItemProvider logoutElementItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.LogoutElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogoutElementAdapter() {
		if (logoutElementItemProvider == null) {
			logoutElementItemProvider = new LogoutElementItemProvider(this);
		}

		return logoutElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.ForgottenPasswordElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForgottenPasswordElementItemProvider forgottenPasswordElementItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.ForgottenPasswordElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForgottenPasswordElementAdapter() {
		if (forgottenPasswordElementItemProvider == null) {
			forgottenPasswordElementItemProvider = new ForgottenPasswordElementItemProvider(this);
		}

		return forgottenPasswordElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.ChangePasswordElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangePasswordElementItemProvider changePasswordElementItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.ChangePasswordElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangePasswordElementAdapter() {
		if (changePasswordElementItemProvider == null) {
			changePasswordElementItemProvider = new ChangePasswordElementItemProvider(this);
		}

		return changePasswordElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.CasAuthentication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CasAuthenticationItemProvider casAuthenticationItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.CasAuthentication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCasAuthenticationAdapter() {
		if (casAuthenticationItemProvider == null) {
			casAuthenticationItemProvider = new CasAuthenticationItemProvider(this);
		}

		return casAuthenticationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link work.andycarpenter.metamodel.security.IsGrantedRole} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsGrantedRoleItemProvider isGrantedRoleItemProvider;

	/**
	 * This creates an adapter for a {@link work.andycarpenter.metamodel.security.IsGrantedRole}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsGrantedRoleAdapter() {
		if (isGrantedRoleItemProvider == null) {
			isGrantedRoleItemProvider = new IsGrantedRoleItemProvider(this);
		}

		return isGrantedRoleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (securityModelItemProvider != null) securityModelItemProvider.dispose();
		if (localAuthenticationSystemItemProvider != null) localAuthenticationSystemItemProvider.dispose();
		if (registrationElementItemProvider != null) registrationElementItemProvider.dispose();
		if (loginElementItemProvider != null) loginElementItemProvider.dispose();
		if (logoutElementItemProvider != null) logoutElementItemProvider.dispose();
		if (forgottenPasswordElementItemProvider != null) forgottenPasswordElementItemProvider.dispose();
		if (changePasswordElementItemProvider != null) changePasswordElementItemProvider.dispose();
		if (casAuthenticationItemProvider != null) casAuthenticationItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (isGrantedRoleItemProvider != null) isGrantedRoleItemProvider.dispose();
	}

}
