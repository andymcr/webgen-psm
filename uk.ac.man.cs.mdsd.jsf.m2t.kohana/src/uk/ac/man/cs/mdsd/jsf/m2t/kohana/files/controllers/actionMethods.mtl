[comment encoding = UTF-8 /]
[module actionMethods(
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::controlMethods/]


[template public generateUnitMethods(unit : DynamicUnit)
	? (unit.oclIsTypeOf(ActionUnit)) post(trim())]
[let actionUnit : ActionUnit = unit.oclAsType(ActionUnit)]
public function action_[actionUnit.actionName()/]()
{
	try
	{
		[unit.generateValuesFromFormToModel()/]
	[if (unit.hasForcedValueFeatures())]
		[unit.generateForcedFeatureValues()/]
	[/if]
	[if (unit.hasCaptchaFields())]
		[unit.generateCaptchaCheck()/]
	[/if]
	[if (unit.hasInterfaceFields())]
		[unit.generateRememberInterfaceFields()/]
		[unit.generateInterfaceFieldValidation()/]
		[unit.generateValidateOnlyControlFields()/]
	[/if]
		$this->[unit.instanceName()/]->check([if (unit.hasInterfaceFields())]$extra_validation[/if]);
	[for (action : UnitSupportAction | actionUnit.supportActions)]
		if (array_key_exists('[action.name/]', $this->request->post()))
		{
			/* [protected (actionUnit.instanceName().concat('.support.').concat(action.name))]
			 */
			/* [/protected]
			 */
		}
	[/for]
	}
[if (unit.hasCaptchaFields())]
		[unit.generateCatchCaptchaException()/]
[/if]
	catch (ORM_Validation_Exception $e)
	{
		$this->[unit.instanceName()/]_field_errors = $e->errors('');
	[if (unit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
		$unreported_field_errors = array_diff_key($this->[unit.instanceName()/]_field_errors, array([for
		(field : UnitField | unit.inputFields())
			separator (', ')]'[field.modelPropertyName()/]' => ''[/for][if (unit.hasInterfaceFields())], '_external' => ''[/if]));
		if (!empty($unreported_field_errors))
			$this->[unit.instanceName()/]_error = print_r($unreported_field_errors, TRUE);
	[/if]
	[if (unit.hasEncryptedFeatures())]
		[unit.generateClearEncryptedFeatures()/]
	[/if]
	}
}
[/let]
[/template]