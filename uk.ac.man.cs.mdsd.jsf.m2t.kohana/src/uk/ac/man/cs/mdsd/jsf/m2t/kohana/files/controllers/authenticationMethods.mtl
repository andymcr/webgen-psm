[comment encoding = UTF-8 /]
[module authenticationMethods(
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::controlMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::editMethods/]


[template protected generateAuthenticationStart(unit : DynamicUnit) post(trim())]
[if (not unit.oclAsType(ControlUnit).cancelDestination.oclIsUndefined())]
[unit.generateHandleCancel()/]
[/if]
if (Auth::instance()->logged_in())
{
	$this->template->page_message = 'You are already logged in';
	$this->redirect();
}
[/template]


[template public generateUnitVariables(unit : ContentUnit)
	? (unit.oclIsKindOf(RegistrationUnit)) post(trim())]
[let authenticationUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
$this->[authenticationUnit.instanceName()/] = ORM::factory('[authenticationUnit.modelName()/]');
[if (authenticationUnit.hasDefaultValueFields())]
[authenticationUnit.generateDefaultUnitValues()/]
[/if]
[/let]
[/template]

[template public generateUnitDisplay(unit : ContentUnit)
	? (unit.oclIsKindOf(AuthenticationUnit) and not unit.oclIsKindOf(EditUnit)) post(trim())]
[let authenticationUnit : DynamicUnit = unit.oclAsType(DynamicUnit)]
$this->[authenticationUnit.templateInstanceName()/]->bind('[authenticationUnit.instanceName()/]', $this->[authenticationUnit.instanceName()/]);
[/let]
[/template]


[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(RegistrationUnit)) post(trim())]
[let authentication : LocalAuthenticationSystem = unit.displayedOn.oclAsType(Page).partOf.authentication.oclAsType(LocalAuthenticationSystem)]
[let registrationUnit : RegistrationUnit = unit.oclAsType(RegistrationUnit)]
public function action_[registrationUnit.actionName()/]() {
	[registrationUnit.generateAuthenticationStart()/]
[if (not registrationUnit.cancelDestination.oclIsUndefined())]
	[registrationUnit.generateHandleCancel()/]
[/if]
	else if ($this->request->method() == HTTP_Request::POST)
	{
		try
		{
[if (registrationUnit.hasCaptchaFields())]
			[registrationUnit.generateCaptchaCheck()/]

[/if]
			$this->[registrationUnit.instanceName()/]->salt = md5(uniqid(rand(), true));
			[registrationUnit.generateValuesFromFormToModel()/]
[if (registrationUnit.hasForcedValueFeatures())]
			[registrationUnit.generateForcedFeatureValues()/]
[/if]
			$this->[registrationUnit.instanceName()/]->activated = [if (authentication.useEmailActivation)]'0'[else]'1'[/if];
[if (authentication.useEmailActivation)]
			$this->[registrationUnit.instanceName()/]->new_email_key = md5(rand().microtime());
[/if]
[if (registrationUnit.hasInterfaceFields())]
			[registrationUnit.generateInterfaceFieldValidation()/]
[/if]
			$this->[registrationUnit.instanceName()/]->save([if (registrationUnit.hasInterfaceFields())]$extra_validation[/if]);
	[if (authentication.useEmailActivation)]
//		$this->[registrationUnit.instanceName()/]->trans_commit();
//		$this->authentication_lib->sendEmail('activate', $this->[registrationUnit.instanceName()/]->email, array(
//			'site_name' => $this->config->item('site_title', 'site'),
//			'user_id' => $this->[registrationUnit.instanceName()/]->id,
//			'username' => $this->[registrationUnit.instanceName()/]->username,
//			'email' => $this->[registrationUnit.instanceName()/]->email,
//			'new_email_key' => $this->[registrationUnit.instanceName()/]->new_email_key,
//			'activation_period' => $this->config->item('email_activation_expire', 'tank_auth')));
//		$this->page_message = 'Activation email sent';
	[else]
		[let authentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
			$user = ORM::factory('[authentication.userService.modelName()/]');
			$user->[authentication.userAuthenticationKey.columnName()/] = $this->[registrationUnit.instanceName()/]->[authentication.loginUnit.loginIdField.modelPropertyName()/];
			[for (userFeature : ServiceFeature | authentication.userService.features->select(f | f.isRequired())->select(f | f <> authentication.userAuthenticationKey))]
			$user->[userFeature.columnName()/] = '';
			[/for]
			$user->validation_required(FALSE)->save();
			[if (authentication.sendWelcomeEmail)]
//			$this->authentication_lib->sendEmail('welcome', $this->[registrationUnit.instanceName()/]->email, array(
//				'site_name' => $this->config->item('site_title', 'site'),
//				'username' => $this->[registrationUnit.instanceName()/]->username,
//				'email' => $this->[registrationUnit.instanceName()/]->email));
			[/if]
		[/let]
		[if (not registrationUnit.confirmDestination.oclIsUndefined())]
			$this->redirect(Route::get('[registrationUnit.confirmDestination.controllerName()/]')->uri());
		[else]
			$this->[registrationUnit.instanceName()/]->clear();
			$this->page_message = 'Registration completed';
		[/if]
	[/if]
		}
[if (registrationUnit.hasCaptchaFields())]
		[registrationUnit.generateCatchCaptchaException()/]
[/if]
		catch (ORM_Validation_Exception $e)
		{
			$this->[registrationUnit.instanceName()/]_field_errors = $e->errors('');
	[if (registrationUnit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
			$unreported_field_errors = array_diff_key($this->[registrationUnit.instanceName()/]_field_errors, array([for
	(field : UnitField | registrationUnit.inputFields())
		separator (', ')]'[field.modelPropertyName()/]' => ''[/for][if (registrationUnit.hasInterfaceFields())], '_external' => ''[/if]));
			if (!empty($unreported_field_errors))
				$this->[registrationUnit.instanceName()/]_error = print_r($unreported_field_errors, TRUE);
	[/if]
[if (registrationUnit.hasEncryptedFeatures())]
			[registrationUnit.generateClearEncryptedFeatures()/]
[/if]
[if (registrationUnit.hasInterfaceFields())]
			[registrationUnit.generateRememberInterfaceFields()/]
[/if]
		}
	}
}
[/let]
[/let]
[/template]

[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(LoginUnit)) post(trim())]
[let loginUnit : LoginUnit = unit.oclAsType(LoginUnit)]
[let localAuthentication : LocalAuthenticationSystem = loginUnit.authenticationSystem]
public function action_[loginUnit.actionName()/]()
{
	[loginUnit.generateAuthenticationStart()/]
	else if ($this->request->method() == HTTP_Request::POST)
	{
		$login_id = $this->request->post('[loginUnit.loginIdField.modelPropertyName()/]');
		$password = $this->request->post('[loginUnit.passwordField.modelPropertyName()/]');
[if (not localAuthentication.autoLoginService.oclIsUndefined())]
		$remember_me = $this->request->post('[loginUnit.rememberMeField.modelPropertyName()/]');
[/if]
		$authentication = Auth::instance()->login($login_id, $password, [if (localAuthentication.autoLoginService.oclIsUndefined())]FALSE[else]isset($remember_me)[/if]);
		if ($authentication)
		{
			$referrer = Session::instance()->get('login_referrer');
			if (!empty($referrer))
			{
				Session::instance()->delete('login_referrer');
				$this->redirect($referrer);
			}
			else
				$this->redirect();
		}
		else
		{
			$this->[loginUnit.instanceName()/]_error = Auth::instance()->message;
			[loginUnit.generateValuesFromFormToModel()/]
[if (loginUnit.hasEncryptedFeatures())]
			[loginUnit.generateClearEncryptedFeatures()/]
[/if]
[if (loginUnit.hasInterfaceFields())]
			[loginUnit.generateRememberInterfaceFields()/]
[/if]
		}
	}
}

public function action_logout()
{
		Auth::instance()->logout(FALSE);
}

[/let]
[/let]
[/template]

[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(ForgottenPasswordUnit)) post(trim())]
[let forgottenUnit : ForgottenPasswordUnit = unit.oclAsType(ForgottenPasswordUnit)]
public function action_[forgottenUnit.actionName()/]() {
	// based on code from tank_auth by Ilya Konyukhov (http://konyukhov.com/soft/tank_auth/)
	[forgottenUnit.generateAuthenticationStart()/]
	else {
		$this->[forgottenUnit.instanceName()/]->where('[forgottenUnit.loginIdField.modelPropertyName()/]', '=', $this->request->post('[forgottenUnit.loginIdField.modelPropertyName()/]'))->find();
		if ($this->[forgottenUnit.instanceName()/]->loaded())
		{
		}
	$this->template->page_message = 'Email sent';
	}
}
[/let]
[/template]
