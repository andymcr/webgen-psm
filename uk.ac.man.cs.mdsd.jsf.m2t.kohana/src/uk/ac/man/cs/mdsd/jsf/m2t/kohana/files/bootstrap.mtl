[comment encoding = UTF-8 /]
[module bootstrap(
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::web::m2t::core::config::files/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]


[template public generateBootstrap(jsfModel : JsfModel)]
[file (jsfModel.applicationDirectory().concat('/')
		.concat('bootstrap')
		.concat(jsfModel.executableExtension()), false)]
<?php defined('SYSPATH') or die('No direct script access.');

// -- Environment setup --------------------------------------------------------

// Load the core Kohana class
require SYSPATH.'classes/Kohana/Core'.EXT;

if (is_file(APPPATH.'classes/Kohana'.EXT))
{
	// Application extends the core
	require APPPATH.'classes/Kohana'.EXT;
}
else
{
	// Load empty core extension
	require SYSPATH.'classes/Kohana'.EXT;
}

/**
 * Set the default time zone.
 *
 * @link http://kohanaframework.org/guide/using.configuration
 * @link http://www.php.net/manual/timezones
 */
date_default_timezone_set('Europe/London');

/**
 * Set the default locale.
 *
 * @link http://kohanaframework.org/guide/using.configuration
 * @link http://www.php.net/manual/function.setlocale
 */
setlocale(LC_ALL, 'en_US.utf-8');

/**
 * Enable the Kohana auto-loader.
 *
 * @link http://kohanaframework.org/guide/using.autoloading
 * @link http://www.php.net/manual/function.spl-autoload-register
 */
spl_autoload_register(array('Kohana', 'auto_load'));

/**
 * Optionally, you can enable a compatibility auto-loader for use with
 * older modules that have not been updated for PSR-0.
 *
 * It is recommended to not enable this unless absolutely necessary.
 */
//spl_autoload_register(array('Kohana', 'auto_load_lowercase'));

/**
 * Enable the Kohana auto-loader for unserialization.
 *
 * @link http://www.php.net/manual/function.spl-autoload-call
 * @link http://www.php.net/manual/var.configuration#unserialize-callback-func
 */
ini_set('unserialize_callback_func', 'spl_autoload_call');

// -- Configuration and initialization -----------------------------------------

/**
 * Set the default language
 */
I18n::lang('en-us');

/**
 * Set Kohana::$environment if a 'KOHANA_ENV' environment variable has been supplied.
 *
 * Note: If you supply an invalid environment name, a PHP warning will be thrown
 * saying "Couldn't find constant Kohana::<INVALID_ENV_NAME>"
 */
if (isset($_SERVER['['/]'KOHANA_ENV'[']'/]))
{
	Kohana::$environment = constant('Kohana::'.strtoupper($_SERVER['['/]'KOHANA_ENV'[']'/]));
}

/**
 * Initialize Kohana, setting the default options.
 *
 * The following options are available:
 *
 * - string   base_url    path, and optionally domain, of your application   NULL
 * - string   index_file  name of your index file, usually "index.php"       index.php
 * - string   charset     internal character set used for input and output   utf-8
 * - string   cache_dir   set the internal cache directory                   APPPATH/cache
 * - integer  cache_life  lifetime, in seconds, of items cached              60
 * - boolean  errors      enable or disable error handling                   TRUE
 * - boolean  profile     enable or disable internal profiling               TRUE
 * - boolean  caching     enable or disable internal caching                 FALSE
 * - boolean  expose      set the X-Powered-By header                        FALSE
 */
Kohana::init(array(
[if (not jsfModel.baseURL.oclIsUndefined())]
	[if (jsfModel.baseURL <> '')]
	'base_url'   => '/[jsfModel.baseURL/]',
	[/if]
[/if]
[if (jsfModel.rewriteURLs)]
	'index_file'   => FALSE,
[/if]
));

/**
 * Attach the file write to logging. Multiple writers are supported.
 */
Kohana::$log->attach(new Log_File(APPPATH.'logs'));

/**
 * Attach a file reader to config. Multiple readers are supported.
 */
Kohana::$config->attach(new Config_File);

/**
 * Enable modules. Modules are referenced by a relative or absolute path.
 */
Kohana::modules(array(
	'auth'       => MODPATH.'auth',       // Basic authentication
	// 'cache'      => MODPATH.'cache',      // Caching with multiple backends
	// 'codebench'  => MODPATH.'codebench',  // Benchmarking tool
	'database'   => MODPATH.'database',   // Database access
	// 'image'      => MODPATH.'image',      // Image manipulation
	// 'minion'     => MODPATH.'minion',     // CLI Tasks
	'orm'        => MODPATH.'orm',
	'pagination' => MODPATH.'pagination',
	// 'unittest'   => MODPATH.'unittest',   // Unit testing
	// 'userguide'  => MODPATH.'userguide',  // User guide and API documentation
// if (genModel.hasCreateSitemapUnits())]
//	'[sitemapModuleName()/]' => MODPATH.'[sitemapModuleName()/]',
// /if]
	));

/**
 * Set the routes. Each route must have a minimum of a name, a URI and a set of
 * defaults for the URI.
 */
Route::set('default', '')
	->defaults(array(
		'controller' => '[jsfModel.homePage().controllerName()/]',
		'action'  => 'index',
	));
[for (page : Page | jsfModel.pages)]
Route::set('[page.controllerName()/]', '[page.controllerName()/][if (page.hasParameterisedUnits() or page.hasControlUnits() or page.hasCommandUnits() or page.hasAuthenticationUnit() or page.hasUriActions() or page.hasSupportActions())]
(/<action>[if (page.hasFormUnits() or page.hasUriActions())](/<param>)[/if])[/if]',
	array(
		'controller' => '[page.controllerName()/]',
	[if (page.hasParameterisedUnits() or page.hasControlUnits() or page.hasCommandUnits() or page.hasAuthenticationUnit() or page.hasUriActions())]
		'action' => '[for (unit : DynamicUnit | page.parameterisedUnits()) separator('|')]
[unit.actionName()/][if (unit.oclIsKindOf(EditUnit) and unit.hasInputAssociations())]
|[for (field : UnitField | unit.inputAssociations()) separator('|')]
[field.optionsName()/][/for][/if][/for][if (page.hasControlUnits())]
[if (page.hasParameterisedUnits())]|[/if][for (unit : DynamicUnit | page.controlUnits()) separator('|')]
[unit.actionName()/][/for][/if][if (page.hasCommandUnits())]
|[for (unit : CommandUnit | page.commandUnits()) separator('|')]
[for (command : Command | unit.commands) separator('|')]
[command.actionName()/][/for][/for][/if]
[for (unit : AuthenticationUnit | page.authenticationUnits()->select(u | not u.oclIsTypeOf(RegistrationUnit))) separator('|')]
[unit.oclAsType(DynamicUnit).actionName()/][if (unit.oclIsTypeOf(LoginUnit))]|logout[/if][/for]
[if (page.hasUriActions())]
|[for (action : InlineAction | page.uriActions()) separator('|')]
[action.parameterName()/][/for][/if][if (page.hasSupportActions())]
|support[/if]',
		[if (page.hasFormUnits() or page.hasUriActions())]
		'param' => '[if (page.hasFormUnits())]
submit[if (page.hasUriActions())]|[/if][/if]
[if (page.hasUriActions())]\d+[/if]',
		[/if]
	[/if]
	))->defaults(array(
		'controller'  => '[page.controllerName()/]',
		'action'  => 'index'
	));
[/for]

/**
 * Set the magic salt to add to a cookie
 */
Cookie::$salt = 'kjslkajdldlkdssslsdswe';
[/file]
[/template]
