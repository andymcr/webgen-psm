[comment encoding = UTF-8 /]
[module indexMethods(
	'http://www.cs.man.ac.uk/mdsd/2010/GenJsf',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::jsf::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::commonMethods/]


[template public generateUnitVariables(genUnit : GenContentUnit)
	? (genUnit.oclIsKindOf(GenIndexUnit)) post(trim())]
[let genIndexUnit : GenIndexUnit = genUnit.oclAsType(GenIndexUnit)]
[/let]
[/template]

[template public generateUnitDisplay(genUnit : GenContentUnit)
	? (genUnit.oclIsKindOf(GenIndexUnit)) post(trim())]
[let genIndexUnit : GenIndexUnit = genUnit.oclAsType(GenIndexUnit)]
$this->[genUnit.templateInstanceName()/]->bind('[genUnit.instanceName()/]', $this->[genUnit.instanceName()/]);
[if (not genIndexUnit.genSelection.oclIsUndefined())]
$this->[genUnit.instanceName()/] = ORM::factory('[genUnit.modelName()/]')->[genIndexUnit.genSelection.instanceName()/]([if (genIndexUnit.jsfUnit.defaultPaginationSize) > 0]
TRUE, max($this->request->query('[genUnit.parameterName()/]'), 1), [genIndexUnit.jsfUnit.defaultPaginationSize/][/if]);
[else]
$this->[genUnit.instanceName()/] = ORM::factory('[genUnit.modelName()/]')->[if (genIndexUnit.jsfUnit.defaultPaginationSize) > 0]
paginated(max($this->request->query('[genUnit.parameterName()/]'), 1), [genIndexUnit.jsfUnit.defaultPaginationSize/])[else]
find_all()[/if];
[/if]
[if (genIndexUnit.jsfUnit.defaultPaginationSize) > 0]
$[genUnit.instanceName()/] = ORM::factory('[genUnit.modelName()/]')->[if (not genIndexUnit.genSelection.oclIsUndefined())]
[genIndexUnit.genSelection.countName()/]()[else]
count_all()[/if];
$[genUnit.instanceName()/]_pagination = Pagination::factory(array(
	'group' => '[genUnit.uniqueName()/]',
	'total_items' => $[genUnit.instanceName()/]
));
$this->[genUnit.templateInstanceName()/]->bind('pagination', $[genUnit.instanceName()/]_pagination);
[/if]
[/let]
[/template]

[template public generateUnitMethods(genUnit : GenDynamicUnit)
	? (genUnit.oclIsKindOf(GenIndexUnit)) post(trim())]
[let genIndexUnit : GenIndexUnit = genUnit.oclAsType(GenIndexUnit)]
[for (genAction : GenInlineAction | genUnit.uriActions())]
[genAction.generateActionMethod('$this->'.concat(genUnit.instanceName()).concat('_error'))/]

[/for]
[if (genUnit.pageDisplayedOn().genPartOf.jsfModel.ajaxTechnology = AjaxTechnologies::jQuery
		and (genIndexUnit.jsfUnit.defaultPaginationSize) > 0)]
public function page()
{
}
[/if]
[/let]
[/template]