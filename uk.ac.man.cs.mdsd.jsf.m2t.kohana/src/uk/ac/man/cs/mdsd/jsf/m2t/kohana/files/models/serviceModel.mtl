[comment encoding = UTF-8 /]
[module serviceModel(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::criteria/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]

[template public generateModel(service : Service, authentication : Authentication)]
[file(service.modelFilename(), false)]
<?php defined('SYSPATH') OR die('No Direct Script Access');

class [service.modelClassName()/] extends Model_ExtendedORM
{
[if (service.hasExplicitTableName())]
[if (not service.view)]
	protected $_table_name = '[service.tableName()/]';
[else]
	protected $_table_name = '[service.viewName/]';
[/if]

[/if]
[if (service.keyName() <> 'id')]
	protected $_primary_key = '[service.keyName()/]';

[/if]
[if (service.hasDependentSingletonAssociations())]
	protected $_belongs_to = array(
	[for (feature : ServiceAssociation | service.dependentSingletonAssociations())
			separator (',')]
		'[feature.modelPropertyName()/]' => array(
			'model' => '[feature.oppositeService.modelName/]',
			'foreign_key' => '[feature.columnName()/]'
		)
	[/for]
	);

[/if]
[if (service.hasIndependentSingletonAssociations())]
	protected $_has_one = array(
	[for (feature : ServiceAssociation | service.independentSingletonAssociations())
			separator (',')]
		'[feature.modelPropertyName()/]' => array(
			'model' => '[feature.oppositeService.modelName/]',
			'foreign_key' => '[feature.columnName()/]'
		)
	[/for]
	);

[/if]
[if (service.hasCollectionAssociations())]
	protected $_has_many = array(
	[for (feature : ServiceAssociation | service.collectionAssociations())
			separator (',')]
		'[feature.modelPropertyName()/]' => array(
			'model' => '[feature.oppositeService.modelName/]',
		[if (feature.isManyToManyAssociation())]
			[if (feature.oclIsTypeOf(ServiceEntityAssociation))]
			'through' => '[feature.oclAsType(ServiceEntityAssociation).feature.pivotTableName/]',
			'far_key' => '[feature.columnName()/]',
			[/if]
		[/if]
			'foreign_key' => '[feature.oppositeColumnName()/]'
		)
	[/for]
	);

[/if]
[if (not service.view and service.entities->size() > 1)]
	[for (entity : Entity | service.entities->subOrderedSet(2, service.entities->size()))]
	private $_component_[entity.instanceName()/];

	[/for]
[/if]
[if (not service.view and service.entities->size() > 1 or service.hasDefaultValueFeatures())]
	public function __construct($id = NULL)
	{
	[let localAuthentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
		[if (service <> localAuthentication.authenticationService)]
			[for (feature : ServiceEntityElement | service.defaultValueFeatures())]
		$this->[feature.columnName()/] = [feature.defaultValue.generateCriteria()/];
			[/for]
		[/if]
	[/let]
		parent::__construct($id);
	[if (not service.view and service.entities->size() > 1)]
		[for (entity : Entity | service.entities->subOrderedSet(2, service.entities->size()))]
		$this->_component_[entity.instanceName()/] = ORM::factory('[entity.modelName()/]');
		[/for]
	[/if]
	}

[/if]
	public function displayLabel()
	{
[if (service.hasDisplayFeatures())]
		return [for (feature : ServiceEntityFeature | service.displayFeatures())
			separator(' . \' \' . ')]
[if (feature.oclIsKindOf(ServiceEntityElement))]
$this->[feature.columnName()/][else]
$this->[feature.modelPropertyName()/]->displayLabel()[/if][/for];
[else]
		return $this;
[/if]
	}

[for (label : ModelLabel | service.displayLabels)]
	public function [label.name/]()
	{
		return sprintf('[label.format/]', [for (feature : ServiceFeature | label.features) separator(', ')]
$this->[feature.modelPropertyName()/][if (feature.oclIsTypeOf(ServiceEntityAssociation))]
->displayLabel()[/if][/for]);
	}

[/for]
[if (not service.view and service.hasAttributesOrSingletons())]
	public function filters()
	{
		return array(
[for (feature : ServiceFeature | service.attributesAndSingletons())]
			'[feature.columnName()/]' => array(
	[if (feature.hasForcedValue())]
	[let genEntityFeature : ServiceEntityFeature = feature.oclAsType(ServiceEntityFeature)]
				array(function($value) {
					return [genEntityFeature.forcedValue.generateCriteria()/];
				})
	[/let]
	[elseif (feature.oclIsTypeOf(ServiceEntityAssociation))]
				array(function($value) {
					return empty($value) ? NULL : $value;
				})
	[else]
				array('trim'),
		[if (feature.isCaseInsensitive())]
				array('strtolower'),
		[/if]
		[if (feature.isEncrypted())]
				array(array(Auth::instance(), 'hash_password_and_salt'), array(':value', ':model')),
		[/if]
		[if (feature.oclIsTypeOf(ServiceEntityElement))]
			[if (feature.oclAsType(ServiceEntityElement).feature.oclIsTypeOf(SingletonDate))]
				array('date'),
				array(function($value) {
					return empty($value) ? NULL : $value;
				})
			[/if]
		[/if]
	[/if]
			),
[/for]
		);
	}

[/if]
[if (service.hasValidatedFeatures())]
[let userService : Service
	= if authentication.oclIsUndefined() then
			null
		else if not authentication.oclIsTypeOf(LocalAuthenticationSystem) then
			null
		else
			authentication.oclAsType(LocalAuthenticationSystem).userService
	endif endif]
	[if (service = userService)]
	protected $_validation_required = TRUE;

	public function validation_required($required = TRUE)
	{
		if ($required === NULL)
			return $this->_validation_required;

 		$this->_validation_required = (bool)$required;
		return $this;
	}

	[/if]
	[if (service.accessedBy->select(u | u.oclIsTypeOf(ActionUnit))->notEmpty())]
	protected $_control_fields = array();

	public function control_fields($control_fields)
	{
		$this->_control_fields = $control_fields;
	}

	[/if]
	public function rules()
	{
	[if (service = userService)]
		if ($this->validation_required(NULL)) 
			return array(
		[for (feature : ServiceEntityFeature | service.validatedFeatures())]
				'[feature.columnName()/]' => array(
			[if (feature.isRequired())]
					array('not_empty'),
			[/if]
				),
		[/for]
			);
		else
			return array();
	[else]
		[if (service.accessedBy->select(u | u.oclIsTypeOf(ActionUnit))->isEmpty())]
		return array(
			[for (feature : ServiceEntityFeature | service.validatedFeatures())]
			'[feature.columnName()/]' => array(
				[if (feature.isRequired())]
				array('not_empty'),
				[/if]
			),
			[/for]
		);
		[else]
		$rules = array(
			[for (feature : ServiceEntityFeature | service.validatedFeatures())]
			'[feature.columnName()/]' => array(
				[if (feature.isRequired())]
				array('not_empty'),
				[/if]
			),
			[/for]
		);
		return empty($this->_control_fields) ? $rules : array_intersect_key($rules, $this->_control_fields);
		[/if]
	[/if]
	}

	public function labels()
	{
		return array(
	[for (feature : ServiceEntityFeature | service.validatedFeatures())]
			'[feature.columnName()/]' => '[feature.displayLabel()/]',
	[/for]
		);
	}

[/let]
[/if]
[if (service.hasInputCollectionAssociations())]
	[for (association : ServiceEntityAssociation | service.inputCollectionAssociations())]
	protected $_[association.modelPropertyName()/]_changes = array();
	[/for]

	public function values(array $values, array $expected = NULL)
	{
		parent::values($values, array_diff($expected, array([for
(feature : ServiceEntityFeature | service.inputCollectionAssociations())
separator (', ')]'[feature.modelPropertyName()/]'[/for])));
[for (association : ServiceEntityAssociation | service.inputCollectionAssociations())]

		if (in_array('[association.modelPropertyName()/]', $expected))
		{
			$current = array();
			foreach ($this->[association.modelPropertyName()/]_as_array() AS $value)
				$current['['/][']'/] = $value->id;
			if (array_key_exists('[association.modelPropertyName()/]', $values))
				foreach ($values['['/]'[association.modelPropertyName()/]'[']'/] AS $selected)
				{
					$key = array_search($selected, $current);
					if ($key !== FALSE)
						unset($current['['/]$key[']'/]);
					else
						$this->_[association.modelPropertyName()/]_changes['['/][']'/] = array(
							'op' => 'add',
							'value' => $selected
						);
				}
			foreach ($current AS $removed)
				$this->_[association.modelPropertyName()/]_changes['['/][']'/] = array(
					'op' => 'remove',
					'value' => $removed
				);
		}
[/for]
	}

[/if]
[if (service.hasInputCollectionAssociations())]
[for (association : ServiceEntityAssociation | service.inputCollectionAssociations())]
	public function [association.modelPropertyName()/]_as_array()
	{
		if (!$this->loaded())
			return array();

		$value_array = array();
		foreach ($this->[association.modelPropertyName()/]->find_all() as $value)
			$value_array['['/][']'/] = $value;
		return $value_array;
	}

[/for]
[/if]
[for (feature : ServiceEntityFeature | service.resourceAttributes())]
[let resource : SingletonResource = feature.oclAsType(ServiceEntityElement).feature.oclAsType(SingletonResource)]
	private function _save_[feature.modelPropertyName()/]()
	{
		$validation = Validation::factory($_FILES);
		$validation
			->rules('[feature.modelPropertyName()/]', array(
[if (feature.isRequired())]
				array('not_empty'),
				array('Upload::not_empty'),
[/if]
				array('Upload::valid'),
				array('Upload::size', array(':value', [resource.maximumUploadSize/])),
[if (resource.validUploadExtensions->notEmpty())]
				array('Upload::type', array(':value', array([for (extension : String | resource.validUploadExtensions) separator(', ')]'[extension/]'[/for]))),
[/if]
			));
		if ($validation->check() === FALSE)
			throw new ORM_Validation_Exception($this->errors_filename(), $validation);

		if ($_FILES['['/]'[feature.modelPropertyName()/]'[']'/]['['/]'error'[']'/] === UPLOAD_ERR_NO_FILE)
			return;

		if (!empty($this->[resource.columnName()/])) 
			unlink($this->[resource.columnName()/]);
		$filename = str_replace(' ', '_', pathinfo($_FILES['['/]'[feature.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_FILENAME));
		$extension = pathinfo($_FILES['['/]'[feature.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_EXTENSION);
[if (resource.uploadsWithinWebsite)]
		$filepath = Upload::save($_FILES['['/]'[feature.modelPropertyName()/]'[']'/], $filename . '.' . $extension, DOCROOT . '[resource.relativeUploadDirectory/]');
		$this->[feature.columnName()/] = '[resource.relativeUploadDirectory/]/' . $filename . '.' . $extension;
[else]
		$filepath = Upload::save($_FILES['['/]'[feature.modelPropertyName()/]'[']'/], $filename . '.' . $extension, 'c:\websites\files');
[/if]
	}

[/let]
[/for]
[if (service.hasInputCollectionAssociations() or service.hasResourceAttributes())]
	public function save(Validation $validation = NULL)
	{
[if (service.hasResourceAttributes())]
		if (!empty($_FILES)) {
	[for (feature : ServiceEntityFeature | service.resourceAttributes())]
			$this->_save_[feature.modelPropertyName()/]();
	[/for]
		}
[/if]
		parent::save($validation);
[if (service.hasInputCollectionAssociations())]
	[for (association : ServiceEntityAssociation | service.inputCollectionAssociations())]

		foreach ($this->_[association.modelPropertyName()/]_changes AS $change)
		[if (association.isManyToManyAssociation())]
			if ($change['['/]'op'[']'/] == 'add')
				$this->add('[association.modelPropertyName()/]', $change['['/]'value'[']'/]);
			else
				$this->remove('[association.modelPropertyName()/]', $change['['/]'value'[']'/]);
		[else]
		{
			$opposite = ORM::factory('[association.oppositeService.modelName/]', $change['['/]'value'[']'/]);
			if (!$opposite->loaded())
				Log::instance()->add(Log::DEBUG, 'add :x', array(':x'=>$change['['/]'value'[']'/]));
			else
			{
				if ($change['['/]'op'[']'/] == 'add')
					$opposite->[association.oppositeColumnName()/] = $this->id;
				else
					$opposite->[association.oppositeColumnName()/] = NULL;
				$opposite->save();
			}
		}
		[/if]
	[/for]
[/if]
	}

[/if]
[for (selection : Selection | service.selections)]
	public function [selection.instanceName()/]([if (selection.limit <= 0)]$paging = TRUE, $page = 1, $pageSize = 10[/if])
	{
	[for (association : ServiceAssociation | selection.joins)]
		$this->join('')->on([if (association.isDependentEnd())]
'[association.columnName()/]'[else]'id'[/if], '=', [if (association.isDependentEnd())]
'b'[else]'id'[/if]);
	[/for]
	[if (not selection.filter.oclIsUndefined())]
		[selection.filter.generateCriteria()/]
	[/if]
	[for (order : Order | selection.ordering)]
		$this->order_by('[order.path.generateOrderPath()/]', '[if (order.oclIsTypeOf(Asc))]asc[else]desc[/if]');
	[/for]
[if (selection.limit <= 0)]
		if ($paging)
			return $this->limit($pageSize)->offset(($page - 1) * $pageSize)->find_all();
		else
			return $this->find_all();
[else]
		$this->limit([selection.limit/]);
		return $this->[if (selection.limit = 1)]find()[else]find_all()[/if];
[/if]
	}

	[if (selection.limit <> 1)]
	public function [selection.countName()/]()
	{
		[if (not selection.filter.oclIsUndefined())]
		[selection.filter.generateCriteria()/]
		[/if]
		return $this->count_all();
	}

	[/if]
[/for]
	public function paginated($page = 1, $pageSize = 10)
	{
		return $this->limit($pageSize)->offset(($page - 1) * $pageSize)->find_all();
	}

[if (if authentication.oclIsUndefined() then false else authentication.oclIsTypeOf(LocalAuthenticationSystem) endif)]
[let localAuthentication : LocalAuthenticationSystem = authentication.oclAsType(LocalAuthenticationSystem)]
	[if (service = localAuthentication.authenticationService)]
	public function record_last_login()
	{
		$this->last_ip = Request::$client_ip;
		$this->last_login = date('Y-m-d H:i:s');
		$this->update();
	}

	[/if]
	[if (service = localAuthentication.userService)]
	public static function authenticated_user($authentication)
	{
		$user = ORM::factory('[service.modelName/]');
		$user->where('[localAuthentication.userAuthenticationKey.columnName()/]', '=', $authentication->email);
		return $user->find();
	}

// this is something to do with registring
	public function authentication_save()
	{
		[for (feature : ServiceFeature | service.features->select(f | f.isRequired()))]
		if (!isset($this->[feature.modelPropertyName()/])) {
			$this->[feature.modelPropertyName()/] = '';
		}
		[/for]

		return $this->save();
	}

	[/if]
	[if (if localAuthentication.loginAttemptService.oclIsUndefined() then false else service = localAuthentication.loginAttemptService endif)]
	public static function record_attempt($login_id)
	{
		try
		{
			$login_attempt = ORM::factory('[service.modelName/]');
			$login_attempt->login_id = $login_id;
			$login_attempt->ip_address = Request::$client_ip;
			$login_attempt->time = date('Y-m-d H:i:s');
			$login_attempt->save();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem recording login attempt: :exception', array(
				'exception' => $e->getMessage()
			));
		}
	}

	public static function attempts_exceeded($login_id, $maximum_attempts, $expiry_period)
	{
		$login_attempt = ORM::factory('[service.modelName/]');
		$login_attempt->where_open();
		$login_attempt->where('login_id', '=', $login_id);
		$login_attempt->or_where('ip_address', '=', Request::$client_ip);
		$login_attempt->where_close();
		if ($expiry_period > 0) {
			$login_attempt->where(new Database_Expression('UNIX_TIMESTAMP(time)'), '>', time() - $expiry_period);
		}
		return $login_attempt->count_all() >= $maximum_attempts;
	}

	public static function clear_attempts($login_id, $expiry_period)
	{
		try
		{
			$login_attempt = ORM::factory('[service.modelName/]');
			$login_attempt->where_open();
			$login_attempt->where('login_id', '=', $login_id);
			$login_attempt->where('ip_address', '=', Request::$client_ip);
			$login_attempt->where_close();
			if ($expiry_period > 0)
			{
				$login_attempt->or_where(new Database_Expression('UNIX_TIMESTAMP(time)'), '<', time() - $expiry_period);
			}
			foreach ($login_attempt->find_all() AS $attempt)
			{
				$attempt->delete();
			}
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem clearing login attempts: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	[/if]
	[if (if localAuthentication.autoLoginService.oclIsUndefined() then false else service = localAuthentication.autoLoginService endif)]
	public static function create_token($key, $authentication, $user_agent)
	{
		try
		{
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->key = $key;
			$autologin->user_agent = $user_agent;
			$autologin->last_ip_address = Request::$client_ip;
			$autologin->last_login = date('Y-m-d H:i:s');
			$autologin->authentication_id = $authentication->[localAuthentication.authenticationService.keyName()/];
			$autologin->save();

			return $autologin;
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem saving autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			if ($e instanceof ORM_Validation_Exception)
				Log::instance()->add(Log::ERROR, 'Validation errors :errors', array(
					':errors' => print_r($e->errors(''), TRUE)
				));
			return ORM::factory('[service.modelName/]');
		}
	}

	public static function load_token($cookie, $user_agent, $lifetime)
	{
		try
		{
			$data = unserialize($cookie);
			if (!array_key_exists('user_id', $data) OR !array_key_exists('key', $data))
				return FALSE;
	
			$login_id = $data['['/]'user_id'[']'/];
			$key = $data['['/]'key'[']'/];
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->where('key', '=', $key)
				->where('user_agent', '=', $user_agent)
				// checking time means that reducing lifetime has immediate effect
				->where(new Database_Expression('UNIX_TIMESTAMP(autologin.last_login)'), '>', time() - $lifetime);
			$autologin->join('[localAuthentication.authenticationService.tableName()/]')
				->on('authentication_id', '=', '[localAuthentication.authenticationService.tableName()/].[localAuthentication.authenticationService.keyName()/]')
				->where('[localAuthentication.authenticationService.tableName()/].[localAuthentication.loginUnit.loginIdField.modelPropertyName()/]', '=', $login_id);
			return $autologin->find();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem loading autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	public function record_last_login()
	{
		try
		{
			$this->last_ip_address = Request::$client_ip;
			$this->last_login = date('Y-m-d H:i:s');
			$this->update();
			}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem recording autologin: :exception', array(
				':exception' => $e->getMessage()
			));
		}
}

	public static function delete_user($login_id)
	{
		try
		{
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->join('[localAuthentication.authenticationService.tableName()/]')
				->on('authentication_id', '=', '[localAuthentication.authenticationService.tableName()/].[localAuthentication.authenticationService.keyName()/]')
				->where('[localAuthentication.authenticationService.tableName()/].[localAuthentication.loginUnit.loginIdField.modelPropertyName()/]', '=', $login_id);
			foreach ($autologin->find_all() AS $token)
				$token->delete();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem deleting user\'s autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	public static function delete_expired($lifetime)
	{
		try
		{
			$autologin = ORM::factory('[service.modelName/]');
			$autologin->where(new Database_Expression('UNIX_TIMESTAMP(last_login)'), '<', time() - $lifetime);
			foreach ($autologin->find_all() AS $token)
				$token->delete();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem deleting expired autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	[/if]
[/let]
[/if]
}
[/file]
[/template]
