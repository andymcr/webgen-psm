[comment encoding = UTF-8 /]
[module serviceModel(
	'http://www.cs.man.ac.uk/mdsd/2013/GenCriteria',
	'http://www.cs.man.ac.uk/mdsd/2010/GenJsf',
	'http://www.cs.man.ac.uk/mdsd/2010/GenOrm',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::jsf::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::criteria/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]

[template public generateModel(genService : GenService, genAuthentication : GenAuthentication)]
[file(genService.modelFilename(), false)]
<?php defined('SYSPATH') OR die('No Direct Script Access');

class [genService.modelClassName()/] extends Model_ExtendedORM
{
[if (genService.hasExplicitTableName())]
[if (not genService.jsfService.view)]
	protected $_table_name = '[genService.tableName()/]';
[else]
	protected $_table_name = '[genService.viewName/]';
[/if]

[/if]
[if (genService.keyName() <> 'id')]
	protected $_primary_key = '[genService.keyName()/]';

[/if]
[if (genService.hasDependentSingletonAssociations())]
	protected $_belongs_to = array(
	[for (genFeature : GenServiceAssociation | genService.dependentSingletonAssociations())
			separator (',')]
		'[genFeature.modelPropertyName()/]' => array(
			'model' => '[genFeature.modelName()/]',
			'foreign_key' => '[genFeature.columnName()/]'
		)
	[/for]
	);

[/if]
[if (genService.hasIndependentSingletonAssociations())]
	protected $_has_one = array(
	[for (genFeature : GenServiceAssociation | genService.independentSingletonAssociations())
			separator (',')]
		'[genFeature.modelPropertyName()/]' => array(
			'model' => '[genFeature.modelName()/]',
			'foreign_key' => '[genFeature.columnName()/]'
		)
	[/for]
	);

[/if]
[if (genService.hasCollectionAssociations())]
	protected $_has_many = array(
	[for (genFeature : GenServiceAssociation | genService.collectionAssociations())
			separator (',')]
		'[genFeature.modelPropertyName()/]' => array(
			'model' => '[genFeature.modelName()/]',
		[if (genFeature.isManyToManyAssociation())]
			'through' => '[genFeature.pivotTableName()/]',
			'far_key' => '[genFeature.pivotColumnName()/]',
		[/if]
			'foreign_key' => '[genFeature.oppositeColumnName()/]'
		)
	[/for]
	);

[/if]
[if (not genService.jsfService.view and genService.genEntities->size() > 1)]
	[for (genEntity : GenEntity | genService.genEntities->subOrderedSet(2, genService.genEntities->size()))]
	private $_component_[genEntity.instanceName()/];

	[/for]
[/if]
[if (not genService.jsfService.view and genService.genEntities->size() > 1 or genService.hasDefaultValueFeatures())]
	public function __construct($id = NULL)
	{
	[let genLocalAuthentication : GenLocalAuthenticationSystem = genAuthentication.oclAsType(GenLocalAuthenticationSystem)]
		[if (genService <> genLocalAuthentication.genAuthenticationService)]
			[for (genFeature : GenServiceEntityElement | genService.defaultValueFeatures())]
		$this->[genFeature.columnName()/] = [genFeature.genDefaultValue.generateCriteria()/];
			[/for]
		[/if]
	[/let]
		parent::__construct($id);
	[if (not genService.jsfService.view and genService.genEntities->size() > 1)]
		[for (genEntity : GenEntity | genService.genEntities->subOrderedSet(2, genService.genEntities->size()))]
		$this->_component_[genEntity.instanceName()/] = ORM::factory('[genEntity.modelName()/]');
		[/for]
	[/if]
	}

[/if]
	public function displayLabel()
	{
[if (genService.hasDisplayFeatures())]
		return [for (genFeature : GenServiceEntityFeature | genService.displayFeatures())
			separator(' . \' \' . ')]
[if (genFeature.oclIsKindOf(GenServiceEntityElement))]
$this->[genFeature.columnName()/][else]
$this->[genFeature.modelPropertyName()/]->displayLabel()[/if][/for];
[else]
		return $this;
[/if]
	}

[for (genLabel : GenModelLabel | genService.genDisplayLabels)]
	public function [genLabel.jsfLabel.name/]()
	{
		return sprintf('[genLabel.jsfLabel.format/]', [for (genFeature : GenServiceFeature | genLabel.genFeatures) separator(', ')]
$this->[genFeature.modelPropertyName()/][if (genFeature.oclIsTypeOf(GenServiceEntityAssociation))]
->displayLabel()[/if][/for]);
	}

[/for]
[if (not genService.jsfService.view and genService.hasAttributesOrSingletons())]
	public function filters()
	{
		return array(
[for (genFeature : GenServiceFeature | genService.attributesAndSingletons())]
			'[genFeature.columnName()/]' => array(
	[if (genFeature.hasForcedValue())]
	[let genEntityFeature : GenServiceEntityFeature = genFeature.oclAsType(GenServiceEntityFeature)]
				array(function($value) {
					return [genEntityFeature.genForcedValue.generateCriteria()/];
				})
	[/let]
	[elseif (genFeature.oclIsTypeOf(GenServiceEntityAssociation))]
				array(function($value) {
					return empty($value) ? NULL : $value;
				})
	[else]
				array('trim'),
		[if (genFeature.isCaseInsensitive())]
				array('strtolower'),
		[/if]
		[if (genFeature.isEncrypted())]
				array(array(Auth::instance(), 'hash_password_and_salt'), array(':value', ':model')),
		[/if]
		[if (genFeature.oclIsTypeOf(GenServiceEntityElement))]
			[if (genFeature.oclAsType(GenServiceEntityElement).genFeature.oclIsTypeOf(GenSingletonDate))]
				array('date'),
				array(function($value) {
					return empty($value) ? NULL : $value;
				})
			[/if]
		[/if]
	[/if]
			),
[/for]
		);
	}

[/if]
[if (genService.hasValidatedFeatures())]
[let genUserService : GenService
	= if genAuthentication.oclIsUndefined() then
			null
		else if not genAuthentication.oclIsTypeOf(GenLocalAuthenticationSystem) then
			null
		else
			genAuthentication.oclAsType(GenLocalAuthenticationSystem).genUserService
	endif endif]
	[if (genService = genUserService)]
	protected $_validation_required = TRUE;

	public function validation_required($required = TRUE)
	{
		if ($required === NULL)
			return $this->_validation_required;

 		$this->_validation_required = (bool)$required;
		return $this;
	}

	[/if]
	[if (genService.genAccessedBy->select(u | u.oclIsTypeOf(GenActionUnit))->notEmpty())]
	protected $_control_fields = array();

	public function control_fields($control_fields)
	{
		$this->_control_fields = $control_fields;
	}

	[/if]
	public function rules()
	{
	[if (genService = genUserService)]
		if ($this->validation_required(NULL)) 
			return array(
		[for (genFeature : GenServiceEntityFeature | genService.validatedFeatures())]
				'[genFeature.columnName()/]' => array(
			[if (genFeature.isRequired())]
					array('not_empty'),
			[/if]
				),
		[/for]
			);
		else
			return array();
	[else]
		[if (genService.genAccessedBy->select(u | u.oclIsTypeOf(GenActionUnit))->isEmpty())]
		return array(
			[for (genFeature : GenServiceEntityFeature | genService.validatedFeatures())]
			'[genFeature.columnName()/]' => array(
				[if (genFeature.isRequired())]
				array('not_empty'),
				[/if]
			),
			[/for]
		);
		[else]
		$rules = array(
			[for (genFeature : GenServiceEntityFeature | genService.validatedFeatures())]
			'[genFeature.columnName()/]' => array(
				[if (genFeature.isRequired())]
				array('not_empty'),
				[/if]
			),
			[/for]
		);
		return empty($this->_control_fields) ? $rules : array_intersect_key($rules, $this->_control_fields);
		[/if]
	[/if]
	}

	public function labels()
	{
		return array(
	[for (genFeature : GenServiceEntityFeature | genService.validatedFeatures())]
			'[genFeature.columnName()/]' => '[genFeature.displayLabel()/]',
	[/for]
		);
	}

[/let]
[/if]
[if (genService.hasInputCollectionAssociations())]
	[for (genAssociation : GenServiceEntityAssociation | genService.inputCollectionAssociations())]
	protected $_[genAssociation.modelPropertyName()/]_changes = array();
	[/for]

	public function values(array $values, array $expected = NULL)
	{
		parent::values($values, array_diff($expected, array([for
(genFeature : GenServiceEntityFeature | genService.inputCollectionAssociations())
separator (', ')]'[genFeature.columnName()/]'[/for])));
[for (genAssociation : GenServiceEntityAssociation | genService.inputCollectionAssociations())]

		if (in_array('[genAssociation.columnName()/]', $expected))
		{
			$current = array();
			foreach ($this->[genAssociation.modelPropertyName()/]_as_array() AS $value)
				$current['['/][']'/] = $value->id;
			if (array_key_exists('[genAssociation.columnName()/]', $values))
				foreach ($values['['/]'[genAssociation.columnName()/]'[']'/] AS $selected)
				{
					$key = array_search($selected, $current);
					if ($key !== FALSE)
						unset($current['['/]$key[']'/]);
					else
						$this->_[genAssociation.modelPropertyName()/]_changes['['/][']'/] = array(
							'op' => 'add',
							'value' => $selected
						);
				}
			foreach ($current AS $removed)
				$this->_[genAssociation.modelPropertyName()/]_changes['['/][']'/] = array(
					'op' => 'remove',
					'value' => $removed
				);
		}
[/for]
	}

[/if]
[if (genService.hasInputCollectionAssociations())]
[for (genAssociation : GenServiceEntityAssociation | genService.inputCollectionAssociations())]
	public function [genAssociation.modelPropertyName()/]_as_array()
	{
		if (!$this->loaded())
			return array();

		$value_array = array();
		foreach ($this->[genAssociation.modelPropertyName()/]->find_all() as $value)
			$value_array['['/][']'/] = $value;
		return $value_array;
	}

[/for]
[/if]
[for (genFeature : GenServiceEntityFeature | genService.resourceAttributes())]
[let genResource : GenSingletonResource = genFeature.oclAsType(GenServiceEntityElement).genFeature.oclAsType(GenSingletonResource)]
[let ormFeature : SingletonResource
		= if genResource.oclIsTypeOf(SingletonFile) then
				genResource.oclAsType(GenSingletonFile).ormFeature
			else
				genResource.oclAsType(GenSingletonImage).ormFeature
			endif] 
	private function _save_[genFeature.modelPropertyName()/]()
	{
		$validation = Validation::factory($_FILES);
		$validation
			->rules('[genFeature.modelPropertyName()/]', array(
[if (genFeature.isRequired())]
				array('not_empty'),
				array('Upload::not_empty'),
[/if]
				array('Upload::valid'),
				array('Upload::size', array(':value', [ormFeature.maximumUploadSize/])),
[if (ormFeature.validUploadExtensions->notEmpty())]
				array('Upload::type', array(':value', array([for (extension : String | ormFeature.validUploadExtensions) separator(', ')]'[extension/]'[/for]))),
[/if]
			));
		if ($validation->check() === FALSE)
			throw new ORM_Validation_Exception($this->errors_filename(), $validation);

		if ($_FILES['['/]'[genFeature.modelPropertyName()/]'[']'/]['['/]'error'[']'/] === UPLOAD_ERR_NO_FILE)
			return;

		if (!empty($this->[genResource.columnName()/])) 
			$filename = str_replace(' ', '_', pathinfo($this->[genResource.columnName()/], PATHINFO_FILENAME));
		else
			$filename = str_replace(' ', '_', pathinfo($_FILES['['/]'[genFeature.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_FILENAME));
		$extension = pathinfo($_FILES['['/]'[genFeature.modelPropertyName()/]'[']'/]['['/]'name'[']'/], PATHINFO_EXTENSION);
[if (ormFeature.uploadsWithinWebsite)]
		$filepath = Upload::save($_FILES['['/]'[genFeature.modelPropertyName()/]'[']'/], $filename . '.' . $extension, DOCROOT . '[ormFeature.relativeUploadDirectory/]');
		$this->[genFeature.columnName()/] = '[ormFeature.relativeUploadDirectory/]/' . $filename . '.' . $extension;
[else]
		$filepath = Upload::save($_FILES['['/]'[genFeature.modelPropertyName()/]'[']'/], $filename . '.' . $extension, 'c:\websites\files');
[/if]
	}

[/let]
[/let]
[/for]
[if (genService.hasInputCollectionAssociations() or genService.hasResourceAttributes())]
	public function save(Validation $validation = NULL)
	{
[for (genFeature : GenServiceEntityFeature | genService.resourceAttributes())]
		$this->_save_[genFeature.modelPropertyName()/]();
[/for]
		parent::save($validation);
[if (genService.hasInputCollectionAssociations())]
	[for (genAssociation : GenServiceEntityAssociation | genService.inputCollectionAssociations())]

		foreach ($this->_[genAssociation.modelPropertyName()/]_changes AS $change)
		[if (genAssociation.isManyToManyAssociation())]
			if ($change['['/]'op'[']'/] == 'add')
				$this->add('[genAssociation.modelPropertyName()/]', $change['['/]'value'[']'/]);
			else
				$this->remove('[genAssociation.modelPropertyName()/]', $change['['/]'value'[']'/]);
		[else]
		{
			$opposite = ORM::factory('[genAssociation.modelName()/]', $change['['/]'value'[']'/]);
			if (!$opposite->loaded())
				Log::instance()->add(Log::DEBUG, 'add :x', array(':x'=>$change['['/]'value'[']'/]));
			else
			{
				if ($change['['/]'op'[']'/] == 'add')
					$opposite->[genAssociation.oppositeColumnName()/] = $this->id;
				else
					$opposite->[genAssociation.oppositeColumnName()/] = NULL;
				$opposite->save();
			}
		}
		[/if]
	[/for]
[/if]
	}

[/if]
[for (genSelection : GenSelection | genService.genSelections)]
	public function [genSelection.instanceName()/]([if (genSelection.jsfSelection.limit <= 0)]$paging = TRUE, $page = 1, $pageSize = 10[/if])
	{
	[if (not genSelection.genFilter.oclIsUndefined())]
		[genSelection.genFilter.generateCriteria()/]
	[/if]
	[for (genOrder : GenOrder | genSelection.genOrdering)]
		$this->order_by('[genOrder.genPath.generateOrderPath()/]', '[if (genOrder.criteriaOrder.oclIsTypeOf(Asc))]asc[else]desc[/if]');
	[/for]
[if (genSelection.jsfSelection.limit <= 0)]
		if ($paging)
			return $this->limit($pageSize)->offset(($page - 1) * $pageSize)->find_all();
		else
			return $this->find_all();
[else]
		$this->limit([genSelection.jsfSelection.limit/]);
		return $this->[if (genSelection.jsfSelection.limit = 1)]find()[else]find_all()[/if];
[/if]
	}

	[if (genSelection.jsfSelection.limit <> 1)]
	public function [genSelection.countName()/]()
	{
		[if (not genSelection.genFilter.oclIsUndefined())]
		[genSelection.genFilter.generateCriteria()/]
		[/if]
		return $this->count_all();
	}

	[/if]
[/for]
	public function paginated($page = 1, $pageSize = 10)
	{
		return $this->limit($pageSize)->offset(($page - 1) * $pageSize)->find_all();
	}

[if (if genAuthentication.oclIsUndefined() then false else genAuthentication.oclIsTypeOf(GenLocalAuthenticationSystem) endif)]
[let genLocalAuthentication : GenLocalAuthenticationSystem = genAuthentication.oclAsType(GenLocalAuthenticationSystem)]
	[if (genService = genLocalAuthentication.genAuthenticationService)]
	public function record_last_login()
	{
		$this->last_ip = Request::$client_ip;
		$this->last_login = date('Y-m-d H:i:s');
		$this->update();
	}

	[/if]
	[if (genService = genLocalAuthentication.genUserService)]
	public static function authenticated_user($authentication)
	{
		$user = ORM::factory('[genService.modelName()/]');
		$user->where('[genLocalAuthentication.genUserAuthenticationKey.columnName()/]', '=', $authentication->email);
		return $user->find();
	}

// this is something to do with registring
	public function authentication_save()
	{
		[for (genFeature : GenServiceFeature | genService.genFeatures->select(f | f.isRequired()))]
		if (!isset($this->[genFeature.modelPropertyName()/])) {
			$this->[genFeature.modelPropertyName()/] = '';
		}
		[/for]

		return $this->save();
	}

	[/if]
	[if (if genLocalAuthentication.genLoginAttemptService.oclIsUndefined() then false else genService = genLocalAuthentication.genLoginAttemptService endif)]
	public static function record_attempt($login_id)
	{
		try
		{
			$login_attempt = ORM::factory('[genService.modelName()/]');
			$login_attempt->login_id = $login_id;
			$login_attempt->ip_address = Request::$client_ip;
			$login_attempt->time = date('Y-m-d H:i:s');
			$login_attempt->save();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem recording login attempt: :exception', array(
				'exception' => $e->getMessage()
			));
		}
	}

	public static function attempts_exceeded($login_id, $maximum_attempts, $expiry_period)
	{
		$login_attempt = ORM::factory('[genService.modelName()/]');
		$login_attempt->where_open();
		$login_attempt->where('login_id', '=', $login_id);
		$login_attempt->or_where('ip_address', '=', Request::$client_ip);
		$login_attempt->where_close();
		if ($expiry_period > 0) {
			$login_attempt->where(new Database_Expression('UNIX_TIMESTAMP(time)'), '>', time() - $expiry_period);
		}
		return $login_attempt->count_all() >= $maximum_attempts;
	}

	public static function clear_attempts($login_id, $expiry_period)
	{
		try
		{
			$login_attempt = ORM::factory('[genService.modelName()/]');
			$login_attempt->where_open();
			$login_attempt->where('login_id', '=', $login_id);
			$login_attempt->where('ip_address', '=', Request::$client_ip);
			$login_attempt->where_close();
			if ($expiry_period > 0)
			{
				$login_attempt->or_where(new Database_Expression('UNIX_TIMESTAMP(time)'), '<', time() - $expiry_period);
			}
			foreach ($login_attempt->find_all() AS $attempt)
			{
				$attempt->delete();
			}
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem clearing login attempts: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	[/if]
	[if (if genLocalAuthentication.genAutoLoginService.oclIsUndefined() then false else genService = genLocalAuthentication.genAutoLoginService endif)]
	public static function create_token($key, $authentication, $user_agent)
	{
		try
		{
			$autologin = ORM::factory('[genService.modelName()/]');
			$autologin->key = $key;
			$autologin->user_agent = $user_agent;
			$autologin->last_ip_address = Request::$client_ip;
			$autologin->last_login = date('Y-m-d H:i:s');
			$autologin->authentication_id = $authentication->[genLocalAuthentication.genAuthenticationService.keyName()/];
			$autologin->save();

			return $autologin;
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem saving autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			if ($e instanceof ORM_Validation_Exception)
				Log::instance()->add(Log::ERROR, 'Validation errors :errors', array(
					':errors' => print_r($e->errors(''), TRUE)
				));
			return ORM::factory('[genService.modelName()/]');
		}
	}

	public static function load_token($cookie, $user_agent, $lifetime)
	{
		try
		{
			$data = unserialize($cookie);
			if (!array_key_exists('user_id', $data) OR !array_key_exists('key', $data))
				return FALSE;
	
			$login_id = $data['['/]'user_id'[']'/];
			$key = $data['['/]'key'[']'/];
			$autologin = ORM::factory('[genService.modelName()/]');
			$autologin->where('key', '=', $key)
				->where('user_agent', '=', $user_agent)
				// checking time means that reducing lifetime has immediate effect
				->where(new Database_Expression('UNIX_TIMESTAMP(autologin.last_login)'), '>', time() - $lifetime);
			$autologin->join('[genLocalAuthentication.genAuthenticationService.tableName()/]')
				->on('authentication_id', '=', '[genLocalAuthentication.genAuthenticationService.tableName()/].[genLocalAuthentication.genAuthenticationService.keyName()/]')
				->where('[genLocalAuthentication.genAuthenticationService.tableName()/].[genLocalAuthentication.genLoginUnit.genLoginIdField.modelPropertyName()/]', '=', $login_id);
			return $autologin->find();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem loading autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	public function record_last_login()
	{
		try
		{
			$this->last_ip_address = Request::$client_ip;
			$this->last_login = date('Y-m-d H:i:s');
			$this->update();
			}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem recording autologin: :exception', array(
				':exception' => $e->getMessage()
			));
		}
}

	public static function delete_user($login_id)
	{
		try
		{
			$autologin = ORM::factory('[genService.modelName()/]');
			$autologin->join('[genLocalAuthentication.genAuthenticationService.tableName()/]')
				->on('authentication_id', '=', '[genLocalAuthentication.genAuthenticationService.tableName()/].[genLocalAuthentication.genAuthenticationService.keyName()/]')
				->where('[genLocalAuthentication.genAuthenticationService.tableName()/].[genLocalAuthentication.genLoginUnit.genLoginIdField.modelPropertyName()/]', '=', $login_id);
			foreach ($autologin->find_all() AS $token)
				$token->delete();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem deleting user\'s autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	public static function delete_expired($lifetime)
	{
		try
		{
			$autologin = ORM::factory('[genService.modelName()/]');
			$autologin->where(new Database_Expression('UNIX_TIMESTAMP(last_login)'), '<', time() - $lifetime);
			foreach ($autologin->find_all() AS $token)
				$token->delete();
		}
		catch (Kohana_Exception $e)
		{
			Log::instance()->add(Log::ERROR, 'Problem deleting expired autologin token: :exception', array(
				':exception' => $e->getMessage()
			));
			return FALSE;
		}
	}

	[/if]
[/let]
[/if]
}
[/file]
[/template]
