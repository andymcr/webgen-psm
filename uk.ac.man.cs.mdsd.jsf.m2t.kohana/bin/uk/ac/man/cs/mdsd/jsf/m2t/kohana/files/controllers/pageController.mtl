[comment encoding = UTF-8 /]
[module pageController(
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::fileInformation/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::authenticationMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::createSitemapMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::actionMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::commandMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::controlMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::detailsMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::editMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::indexMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::searchMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::staticMethods/]


[template public generateController(page : Page)]
[file(page.controllerFilename(), false)]
<?php defined('SYSPATH') OR die('No Direct Script Access');

class [page.controllerClassName()/] extends [page.baseControllerClassName()/]
{

	public function before()
	{
[if (page.isAuthenticated())]
		[page.generateLoggedInCheck()/]

[/if]
		parent::before();

[if (page.hasParameterisedUnits())]
		$this->query_parameters = $this->request->query();

[/if]
		$this->template->title = '[page.displayLabel()/]';
		$this->template->id = '[page.instanceName()/]';
[if (not page.styleClass.oclIsUndefined())]
		$this->template->style_class = '[page.styleClass/]';
[/if]
[if (page.hasMapUnits())]
		$this->template->scripts['['/][']'/] = 'https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places';
[/if]
[if (page.hasCaptchaFields())]
		$this->template->scripts['['/][']'/] = 'https://www.google.com/recaptcha/api.js';
[/if]

[if (page.partOf.staticUnitsEditable)]
	[for (unit : ContentUnit | page.units)]
		[unit.generateUnitVariables()/]
	[/for]
[else]
	[for (unit : DynamicUnit | page.dynamicUnits()->select(u | not u.oclIsKindOf(IndexUnit)))]
		[unit.generateUnitVariables()/]
	[/for]
[/if]
	}

	public function after()
	{
		if ($this->auto_render === TRUE)
		{
[if (not page.sideMenu.oclIsUndefined())]
			$this->template->sidebar = View::factory('menu/[page.sideMenu.instanceName()/]');
	[if (page.sideMenu.oclIsTypeOf(DynamicMenu))]
	[let dynamicMenu : DynamicMenu = page.sideMenu.oclAsType(DynamicMenu)]
			$this->template->sidebar->[page.sideMenu.instanceName()/] = ORM::factory('[dynamicMenu.service.modelName/]')->[dynamicMenu.selection.instanceName()/]();
	[/let]
	[/if]
[/if]
[for (unit : ContentUnit | page.units)]
			$this->[unit.templateInstanceName()/] = View::factory('[page.controllerName()/]/[unit.instanceName()/]');
			$this->template->unitViews['['/][']'/] = $this->[unit.templateInstanceName()/];
	[if (page.hasParameterisedUnits())]
			$this->[unit.templateInstanceName()/]->bind('query_parameters', $this->query_parameters);
	[/if]
	[if (not unit.oclIsTypeOf(StaticUnit))]
			if (!empty($this->[unit.instanceName()/]_error))
				$this->[unit.templateInstanceName()/]->bind('[unit.instanceName()/]_error', $this->[unit.instanceName()/]_error);
	[/if]
[/for]
[if (page.partOf.staticUnitsEditable)]
	[for (unit : ContentUnit | page.units)]

			[unit.generateUnitDisplay()/]
	[/for]
[else]
	[for (unit : DynamicUnit | page.dynamicUnits())]

			[unit.generateUnitDisplay()/]
	[/for]
[/if]
		}

		parent::after();
	}

	public function action_index()
	{
	}

[for (unit : ContentUnit | page.units)]
	[if (unit.hasUnitMethods())]
	[unit.generateUnitMethods()/]

	[/if]
[/for]
[if (page.hasSupportActions())]
	[if (page.hasDataSupportActions())]
	public function action_support()
	{
	[for (action : UnitSupportAction | page.dataSupportActions())]
		if ($this->request->post('[action.name/]'))
		{
			/* [protected ('support.'.concat(action.name))]
			 */
			/* [/protected]
			 */
		}
	[/for]
	}

	[/if]
	/* [protected (page.instanceName().concat('.support.'))]
	 */
	/* [/protected]
	 */
[/if]
}
[/file]
[/template]
