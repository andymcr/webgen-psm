[comment encoding = UTF-8 /]
[module commonMethods(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping',
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::criteria/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]


[template public generateLoggedInCheck(page : Page)
	? (not page.partOf.authentication.oclIsUndefined())
	post(trim())]
// Log::instance()->add(Log::DEBUG, '[page.name/] setting use of ssl ');
// use_ssl();
[if (page.partOf.authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[let localAuthentication : LocalAuthenticationSystem = page.partOf.authentication.oclAsType(LocalAuthenticationSystem)]
if (!Auth::instance()->logged_in())
{
	Session::instance()->set('login_referrer', $this->request->uri());
	$this->redirect(Route::get('[if (page.partOf.authentication.oclIsTypeOf(CasAuthentication))]
TBC[elseif (page.partOf.authentication.oclIsTypeOf(LocalAuthenticationSystem))]
[page.partOf.authentication.oclAsType(LocalAuthenticationSystem).loginUnit.controllerName()/][else]
TBC[/if]')->uri());
}
[/let]
[elseif (page.partOf.authentication.oclIsTypeOf(CasAuthentication))]
[let casAuthentication : CasAuthentication = page.partOf.authentication.oclAsType(CasAuthentication)]
[/let]
[/if]
[/template]


[template public generateValuesFromFormToModel(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->values($this->request->post(), array([for
	(field : UnitField | unit.nonResourceInputFeatures())
	separator (', ')][if (field.isLocation())]'[field.modelPropertyName()/]_latitude', '[field.modelPropertyName()/]_longitude'[else]'[field.modelPropertyName()/]'[/if][/for]));
[/template]

[template public generateDefaultUnitValues(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.defaultValueFields())]
[if (field.oclIsTypeOf(UnitElement))]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(IncludedElement).defaultValue.generateCriteria()/];
[else]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = [field.oclAsType(InterfaceField).defaultValue.generateCriteria()/];
[/if]
[/for]
[/template]


[template public generateForcedFeatureValues(unit : DynamicUnit) post(trim())]
[for (feature : UnitField | unit.forcedValueFeatures())]
[let value : Expression = feature.oclAsType(UnitFeature).forcedValue]
$this->[unit.instanceName()/]->[feature.modelPropertyName()/] = [value.generateCriteria()/];
[/let]
[/for]
[/template]

[template public generateCaptchaCheck(unit : DynamicUnit) post(trim())]
require_once(Kohana::find_file('vendor/recaptcha', 'recaptchalib'));
$reCaptcha = new ReCaptcha('[unit.pageDisplayedOn().partOf.captchaSecretKey/]');
$resp = $reCaptcha->verifyResponse(
	$_SERVER['['/]"REMOTE_ADDR"[']'/], 
	$this->request->post('g-recaptcha-response') 
	); 
if ($resp == NULL || !$resp->success)
	throw new Captcha_Exception($resp->errorCodes);
[/template]

[template public generateCatchCaptchaException(unit : DynamicUnit) post(trim())]
catch (Captcha_Exception $e)
{
	$this->[unit.instanceName()/]_field_errors = ['['/][']'/];
[for (field : UnitField | unit.captchaFields())]
	$this->[unit.instanceName()/]_field_errors['['/]'[field.modelPropertyName()/]'[']'/] = $e->message();
[/for]
[if (unit.hasEncryptedFeatures())]
	[unit.generateClearEncryptedFeatures()/]
[/if]
[if (unit.hasInterfaceFields())]
	[unit.generateRememberInterfaceFields()/]
[/if]
}
[/template]

[template public generateInterfaceFieldValidation(unit : DynamicUnit) post(trim())]
$extra_validation = Validation::factory($_POST);
[for (field : InterfaceField | unit.interfaceFields())]
	[if (field.isRequired())]
$extra_validation->rule('[field.modelPropertyName()/]', 'not_empty');
	[/if]
	[if (field.oclIsTypeOf(DateField))]
$extra_validation->rule('[field.modelPropertyName()/]', 'date');
	[/if]
	[if (not field.mustMatch.oclIsUndefined())]
$extra_validation->rule('[field.modelPropertyName()/]', 'matches', array(':validation', ':field', '[field.mustMatch.modelPropertyName()/]'));
	[/if]
[/for]
[/template]


[template public generateClearEncryptedFeatures(unit : DynamicUnit) post(trim())]
[for (field : UnitField | unit.encryptedFeatures())]
$this->[unit.instanceName()/]->[field.modelPropertyName()/] = '';
[/for]
[/template]

[template public generateRememberInterfaceFields(unit : DynamicUnit) post(trim())]
$this->[unit.instanceName()/]->unit_fields($this->request->post(), array([for
	(field : UnitField | unit.interfaceFields())
	separator (', ')]'[field.modelPropertyName()/]'[/for]));
[/template]


[template public generateActionMethod(action : InlineAction, errorVariable : String)
	? (action.oclIsTypeOf(DeleteAction)) post(trim())]
[let deleteAction : DeleteAction = action.oclAsType(DeleteAction)]
public function action_[deleteAction.actionName()/]()
{
	$[deleteAction.instanceName()/] = ORM::factory('[deleteAction.modelName()/]', $this->request->param('param'));
	if ($[deleteAction.instanceName()/]->loaded())
	{
		$[deleteAction.instanceName()/]->delete();
[if (deleteAction.destination.oclIsUndefined())]
		[deleteAction.generateRemoveParameter(action.parameterName())/]
[else]
		$this->redirect(Route::get('[deleteAction.destination.controllerName()/]')->uri());
[/if]
	}
	else
		[errorVariable/] = 'Invalid [deleteAction.modelName()/] identifier';
}
[/let]
[/template]

[template public generateActionMethod(action : InlineAction, errorVariable : String)
	? (action.oclIsTypeOf(FeatureSupportAction)) post(trim())]
[let supportAction : FeatureSupportAction = action.oclAsType(FeatureSupportAction)]
public function action_[action.actionName()/]()
{
	$[supportAction.instanceName()/] = ORM::factory('[supportAction.modelName()/]', $this->request->param('param'));
	if (!$[supportAction.instanceName()/]->loaded())
		[errorVariable/] = 'Invalid [supportAction.modelName()/] identifier';
	else
	{
		/* [protected ('support.'.concat(supportAction.actionName()))]
		 */
		/* [/protected]
		 */
	}
}
[/let]
[/template]


[template public generateRemoveParameter(eObject : EObject, parameterName : String) post(trim())]
unset($this->query_parameters['['/]'[parameterName/]'[']'/]);
[/template]
