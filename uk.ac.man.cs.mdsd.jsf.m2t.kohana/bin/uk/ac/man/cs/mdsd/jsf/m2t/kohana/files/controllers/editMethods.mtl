[comment encoding = UTF-8 /]
[module editMethods(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::criteria/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::common::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::commonMethods/]
[import uk::ac::man::cs::mdsd::jsf::m2t::kohana::files::controllers::controlMethods/]


[template public generateUnitVariables(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
$this->[editUnit.instanceName()/] = ORM::factory('[editUnit.modelName()/]');
[if (editUnit.hasDefaultValueFields())]
[editUnit.generateDefaultUnitValues()/]
[/if]
[if (editUnit.oclIsTypeOf(CreateUpdateUnit) or editUnit.oclIsTypeOf(UpdateUnit))]
$[editUnit.instanceName()/] = $this->request->query('[unit.parameterName()/]');
if (!empty($[editUnit.instanceName()/]))
{
	$this->[editUnit.instanceName()/]->where('[editUnit.service.keyName()/]', '=', $[editUnit.instanceName()/])->find();
	if (!$this->[editUnit.instanceName()/]->loaded())
		$this->[editUnit.instanceName()/]_error = 'Invalid [editUnit.modelName()/] identifier';
}
[/if]
[/let]
[/template]

[template public generateUnitDisplay(unit : ContentUnit)
	? (unit.oclIsKindOf(EditUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
$this->[editUnit.templateInstanceName()/]->bind('[editUnit.instanceName()/]', $this->[editUnit.instanceName()/]);
if (isset($this->[editUnit.instanceName()/]_field_errors))
	$this->[editUnit.templateInstanceName()/]->bind('[editUnit.instanceName()/]_field_errors', $this->[editUnit.instanceName()/]_field_errors);
[if (unit.pageDisplayedOn().partOf.ajaxTechnology = AjaxTechnologies::None)]
	[for (field : UnitField | editUnit.inputAssociations())]
	[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
$[association.optionsName()/] = array([if (association.isSingleton())]'' => __('Please select')[/if]);
foreach (ORM::factory('[association.modelName()/]')->[if (association.selection.oclIsUndefined())]
find_all()[else]
[association.selection.instanceName()/](FALSE)[/if] AS $option)
	$[association.optionsName()/]['['/]$option->id[']'/] = $option->[if (association.dynamicLabel.oclIsUndefined())]
displayLabel()[else]
[association.dynamicLabel.name/]()[/if];
$this->[editUnit.templateInstanceName()/]->bind('[association.optionsName()/]', $[association.optionsName()/]);
	[/let]
	[/for]
[/if]
[/let]
[/template]


[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsTypeOf(CreateUnit)) post(trim())]
[let createUnit : CreateUnit = unit.oclAsType(CreateUnit)]
[if (createUnit.hasInterfaceFields())]
		[createUnit.generateUnitRules()/]
[/if]
public function action_[createUnit.actionName()/]()
{
[if (not createUnit.cancelDestination.oclIsUndefined())]
	[createUnit.generateHandleCancel()/]

[/if]
	[createUnit.oclAsType(CreateUnit).generateSaveCode()/]
}

[if (unit.pageDisplayedOn().partOf.ajaxTechnology <> AjaxTechnologies::None)]
[unit.generateJsMethods()/]

[/if]
[/let]
[/template]

[template public generateUnitMethods(unit : ContentUnit)
	? (unit.oclIsKindOf(CreateUpdateUnit) or unit.oclIsKindOf(UpdateUnit) or unit.oclIsKindOf(MapUnit)) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[if (editUnit.hasInterfaceFields())]
		[editUnit.generateUnitRules()/]
[/if]
public function action_[editUnit.actionName()/]()
{
[if (not editUnit.cancelDestination.oclIsUndefined())]
	[editUnit.generateHandleCancel()/]

[/if]
[if (editUnit.oclIsTypeOf(CreateUpdateUnit))]
[let createUpdateUnit : CreateUpdateUnit = editUnit.oclAsType(CreateUpdateUnit)]
	[if (not createUpdateUnit.clearLabel.oclIsUndefined())]
	if ($this->request->post('clear'))
	{
		$this->[createUpdateUnit.instanceName()/]->clear();
// default unit values?
		[editUnit.generateRemoveParameter(createUpdateUnit.parameterName())/]
		return;
	}

	[/if]
[/let]
[/if]
	$submit = $this->request->param('param');
	if (isset($submit))
	{
		[editUnit.generateSaveCode()/]
	}
	else
	{
//		$this->[editUnit.instanceName()/]->validate();
	}
}

[if (unit.pageDisplayedOn().partOf.ajaxTechnology <> AjaxTechnologies::None)]
[unit.generateJsMethods()/]

[/if]
[for (action : InlineAction | editUnit.uriActions())]
[action.generateActionMethod('$this->'.concat(editUnit.instanceName()).concat('_error'))/]

[/for]
[/let]
[/template]

[template private generateJsMethods(unit : ContentUnit) post(trim())]
[let editUnit : EditUnit = unit.oclAsType(EditUnit)]
[for (field : UnitField | editUnit.inputAssociations())]
[let association : UnitAssociation = field.oclAsType(UnitAssociation)]
public function action_[association.optionsName()/]()
{
	$options = array();
	foreach (ORM::factory('[association.modelName()/]')->[if (association.selection.oclIsUndefined())]
find_all()[else]
[association.selection.instanceName()/](FALSE)[/if] AS $option)
		$options['['/][']'/] = array(
			'id' => $option->id,
			'label' => $option->[if (association.dynamicLabel.oclIsUndefined())]
displayLabel()[else]
[association.dynamicLabel.name/]()[/if],
		);

	$this->auto_render = FALSE;
	$this->response->headers('Content-Type','application/json');
	$this->response->body(json_encode($options));
}

[/let]
[/for]
[for (action : InlineAction | editUnit.uriActions())]
[action.generateActionMethod('$this->'.concat(editUnit.instanceName()).concat('_error'))/]

[/for]
[/let]
[/template]

[template public generateUnitRules(unit : DynamicUnit) post(trim())]
	private function unit_rules
	{
[for (field : InterfaceField | unit.interfaceFields())]
$this->[unit.instanceName()/]->validation['['/]'[field.modelPropertyName()/]'[']'/] = array(
		'label' => '[field.displayLabel()/]',
		'rules' => array([if (field.isRequired())]
'required', [/if]'trim'[if (field.isCaseInsensitive())]
, 'strtolower'[/if][if (field.isEncrypted())]
, 'encrypt'[/if][if (not field.mustMatch.oclIsUndefined())]
, 'matches' => '[field.mustMatch.modelPropertyName()/]'[/if])
	);
[/for]
	}

[/template]



[template private generateSaveCode(unit : EditUnit) post(trim())]
try
{
	[unit.generateValuesFromFormToModel()/]
[if (unit.hasForcedValueFeatures())]
	[unit.generateForcedFeatureValues()/]
[/if]
[if (unit.hasCaptchaFields())]
	[unit.generateCaptchaCheck()/]
[/if]
[if (unit.hasInterfaceFields())]
		[unit.generateInterfaceFieldValidation()/]
[/if]
	$this->[unit.instanceName()/]->save([if (unit.hasInterfaceFields())]$extra_validation[/if]);
[if (not unit.oclAsType(EditUnit).confirmDestination.oclIsUndefined())]
	$this->redirect(Route::get('[unit.oclAsType(EditUnit).confirmDestination.controllerName()/]')->uri());
[else]
	[if (unit.oclIsTypeOf(CreateUnit) or unit.hasClearLabel())]
	$this->[unit.instanceName()/]->clear();
		[if (unit.hasInterfaceFields())]
	[unit.generateClearInterfaceFields()/]
		[/if]
	[unit.generateRemoveParameter(unit.parameterName())/]
	[/if]
[/if]
}
[if (unit.hasCaptchaFields())]
		[unit.generateCatchCaptchaException()/]
[/if]
catch (ORM_Validation_Exception $e)
{
	$this->[unit.instanceName()/]_field_errors = $e->errors('');
[if (unit.displayedOn.oclAsType(Page).partOf.developmentVersion)]
	$unreported_field_errors = array_diff_key($this->[unit.instanceName()/]_field_errors, array([for
	(field : UnitField | unit.inputFields())
		separator (', ')]'[field.modelPropertyName()/]' => ''[/for][if (unit.hasInterfaceFields())], '_external' => ''[/if]));
	if (!empty($unreported_field_errors))
		$this->[unit.instanceName()/]_error = print_r($unreported_field_errors, TRUE);
[/if]
[if (unit.hasEncryptedFeatures())]
	[unit.generateClearEncryptedFeatures()/]
[/if]
}
[/template]

[template public generateClearInterfaceFields(unit : DynamicUnit) post(trim())]
[for (field : InterfaceField | unit.interfaceFields())]
unset($this->[unit.instanceName()/]->[field.modelPropertyName()/]);
[/for]
[/template]