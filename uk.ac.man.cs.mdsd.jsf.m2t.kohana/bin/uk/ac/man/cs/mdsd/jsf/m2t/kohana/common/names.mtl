[comment encoding = UTF-8 /]
[module names(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]


[query public baseControllerClassName(eObject : EObject) : String
	= 'Controller_Template_Base'
/]

[query public modelClassName(service : Service) : String
	= 'Model_'.concat(service.modelName)
/]


[query public controllerName(page : Page) : String
	= page.name
/]

[query public controllerClassName(page : Page) : String
	= 'Controller_'.concat(page.controllerName())
/]

[query public instanceName(page : Page) : String
	= page.name.toLowerFirst()
/]


[query public instanceName(menu : Menu) : String
	= menu.name.toLowerFirst()
/]


[query public actionName(unit : ContentUnit) : String
	= unit.instanceName()
/]

[query public controllerName(unit : DynamicUnit) : String
	= unit.pageDisplayedOn().controllerName()
/]

[query public instanceName(unit : ContentUnit) : String
	= unit.name.toLowerFirst()
/]

[query public modelName(unit : ContentUnit) : String
	= if unit.oclIsTypeOf(StaticUnit) then
			if unit.oclAsType(StaticUnit).service.oclIsUndefined() then
				'None'
			else
				unit.oclAsType(StaticUnit).service.modelName
			endif
		else
			unit.oclAsType(DynamicUnit).service.modelName
		endif
/]


[query public parameterName(unit : ContentUnit) : String
	= unit.instanceName()
/]

[query public templateInstanceName(unit : ContentUnit) : String
	= unit.instanceName().concat('_template')
/]

[query public uniqueName(unit : ContentUnit) : String
	= let key : String
			= if unit.displayedOn.oclIsTypeOf(Page) then
				unit.displayedOn.oclAsType(Page).instanceName()
			else
				unit.displayedOn.oclAsType(UnitAssociation).displayedOn.uniqueName()
			endif
		in key.concat('_').concat(unit.instanceName())
/]


[query public optionsName(field : UnitField) : String
	= field.uniqueName().concat('_options')
/]

[query public uniqueName(field : UnitField) : String
	= field.displayedOn.instanceName().concat('_').concat(field.modelPropertyName())
/]


[query public actionName(command : Command) : String
	= command.instanceName()
/]

[query public instanceName(command : Command) : String
	= command.name.toLowerFirst()
/]


[query public actionName(action : InlineAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).instanceName()
				.concat(action.name.toUpperFirst())
		else
			let association : UnitAssociation
					= action.usedBy.oclAsType(UnitAssociation)
				in association.displayedOn.instanceName()
				.concat(association.name.toUpperFirst())
				.concat(action.name.toUpperFirst())
		endif
/]

[query public instanceName(action : InlineAction) : String
	= action.name.toLowerFirst()
/]

[query public modelName(action : DeleteAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).modelName()
		else
			action.usedBy.oclAsType(UnitAssociation).serviceFeature.oppositeService.modelName
		endif
/]

[query public modelName(action : FeatureSupportAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).service.modelName
		else
			action.usedBy.oclAsType(UnitAssociation).serviceFeature.oppositeService.modelName
		endif
/]

[query public modelName(action : SelectAction) : String
	= let unit : DynamicUnit
		= if action.usedBy.oclIsKindOf(DynamicUnit) then
				action.usedBy.oclAsType(DynamicUnit)
			else
				action.usedBy.oclAsType(UnitAssociation).displayedOn
			endif
		in unit.service.modelName/]

[query public parameterName(action : InlineAction) : String
	= action.actionName()
/]


[query public countName(selection : Selection) : String
	= selection.instanceName().concat('_count')
/]

[query public instanceName(selection : Selection) : String
	= selection.name.toLowerFirst()
/]


[query public instanceName(entity : Entity) : String
	= entity.name.toLowerFirst()
/]

[query public modelName(entity : Entity) : String
	= entity.name
/]


[query public modelName(feature : Association) : String
	= feature.opposite.parentEntity.modelName()
/]


[query public modelClassName(enumerationType : EnumerationType) : String
	= 'Model_'.concat(enumerationType.modelName())
/]

[query public modelName(enumerationType : EnumerationType) : String
	= enumerationType.name
/]

[query public name(enumerationLiteral : EnumerationLiteral) : String
	= enumerationLiteral.name.toUpper()
/]

