@Ecore(
	nsURI="http://andycarpenter.work/metamodel/expression",
	nsPrefix="expression"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.expression.edit/src",
	editPluginID="work.andycarpenter.metamodel.expression.edit",
	extensibleProviderFactory="true"
)
package work.andycarpenter.metamodel.expression

enum BooleanOperator {
	And
	Or = 1
}

enum ComparisionOperator {
	GreaterThan
	LessThan = 1
}

interface Expression {
	String[] suffixes
}

interface Literal extends Expression {
}

interface Variable extends Expression {
}

class FunctionCall extends Expression {
	String[1] name
	contains Expression[*] actuals
}


abstract class Predicate extends Expression {
	boolean negated = "false"
}

class PredicateBooleanVariable extends Predicate {
	contains Variable feature
}

class PredicateBooleanOperator extends Predicate {
	contains Predicate[+] expressions
	BooleanOperator[1] operator = "And"
}

class PredicateEqualityOperator extends Predicate {
	contains Expression[1] left
	contains Expression[1] right
}

class PredicateComparisonOperator extends Predicate {
	contains Expression[1] left
	ComparisionOperator[1] operator
	contains Expression[1] right
}

class PredicateInOperator extends Predicate {
	contains Expression[1] left
	contains Expression[1] right
}

class PredicateIsOperator extends Predicate {
	contains Expression[1] left
	contains Expression[1] right
}

class PredicateLikeOperator extends Predicate {
	contains Expression[1] left
	contains Expression[1] right
}

class PredicateIsEmpty extends Predicate {
	contains Variable feature
}

class PredicateIsNull extends Predicate {
	contains Variable feature
}