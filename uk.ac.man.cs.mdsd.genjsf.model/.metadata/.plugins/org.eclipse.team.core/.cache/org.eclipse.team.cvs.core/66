-- @atlcompiler emftvm 
--
-- @path Website=/uk.ac.man.cs.mdsd.webgen.model/model/website.ecore
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path JSF=/uk.ac.man.cs.mdsd.jsf.model/model/Jsf.ecore

module PassExplicitInterface;
create jsf : JSF from website : Website, orm : ORM;

uses WebsiteHelpers;


helper context Website!Page def: pageSideMenu() : Website!Menu
	= if not self.sideMenu.oclIsUndefined() then
			self.sideMenu
		else if self.parentPage.oclIsUndefined() then
			thisModule.findWebsiteProperties().sideMenu
		else
			self.parentPage.targetPage.pageSideMenu()
		endif endif;


helper context Website!Service def: feature(name : String) : Website!ServiceFeature
	= self.features->any(f | f.name = name);

helper context Website!ServiceEntityFeature def: isWebsiteSingletonFeature() : Boolean
	= if self.partOf.encapsulates->includes(self.feature.parentEntity) then
			self.feature.cardinality <> #Many
		else
			if self.feature.oclIsTypeOf(Website!AssociationWithoutContainment) then
				self.feature.targetCardinality <> #Many
			else
				true
			endif
		endif;

helper context Website!ServiceEntityFeature def: cardinality(localRequired : Boolean) : Boolean
		= if self.partOf.encapsulates->includes(self.feature.parentEntity) then
			if self.feature.cardinality = #Optional then
				if self.required then
					#Required
				else
					if localRequired then
						#Required
					else
						#Optional
					endif
				endif
			else if self.feature.cardinality = #Required then
				#Required
			else 
				#Many
			endif endif
		else
			if self.feature.oclIsTypeOf(Website!AssociationWithContainment) then
				#Required
			else
				if self.feature.targetCardinality = #Optional then
					if localRequired then
						#Required
					else
						#Optional
					endif
				else if self.feature.targetCardinality = #Required then
					#Required
				else 
					#Many
				endif endif
			endif
		endif;

helper context Website!ServiceEntityFeature def: entityFeature() : ORM!Feature
	= if self.partOf.encapsulates->includes(self.feature.parentEntity) then
			thisModule.findOrmEntity(self.feature.parentEntity.name).getOrmFeature(self.feature.name)
		else
			thisModule.findOrmEntity(self.feature.targetEntity.name).getOrmFeature(self.feature.targetFeatureName())
		endif;

helper context Website!ServiceEntityFeature def: entityFeatureLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else let feature : Website!Feature = self.entityFeature()
			in if not feature.displayLabel.oclIsUndefined() and feature.displayLabel <> '' then
				feature.displayLabel
			else
				feature.name.createLabel()
			endif
		endif;

helper context Website!ServiceEntityElement def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			self.feature.placeholder()
		endif;

helper context Website!ServiceEntityElement def: validationPattern() : String
	= if not self.validationPattern.oclIsUndefined() and self.validationPattern <> '' then
			self.validationPattern
		else
			self.feature.validationPattern()
		endif;

helper context Website!ServiceViewAssociation def: isWebsiteSingletonFeature() : Boolean
	= self.feature.cardinality <> #Many;

	
helper context Website!UnitFeature def: isWebsiteSingletonFeature() : Boolean
	= let entities : OrderedSet(Website!Entity)
		= if self.displayedOn.source.oclIsTypeOf(Website!Entity) then
				OrderedSet{self.displayedOn.source}
			else
				self.displayedOn.source.encapsulates
			endif
		in if entities->includes(self.feature.parentEntity) then
				self.feature.cardinality <> #Many
			else
				if self.feature.oclIsTypeOf(Website!AssociationWithoutContainment) then
					self.feature.targetCardinality <> #Many
				else
					true
				endif
			endif;

helper context Website!UnitFeature def: unitFeature() : ORM!Feature
	= let parentEntities : Sequence(Website!Entity)
		= if self.displayedOn.source.oclIsTypeOf(Website!Service) then
				self.displayedOn.source.encapsulates
			else
				Sequence{self.displayedOn.source}
			endif
		in if parentEntities->includes(self.feature.parentEntity) then
				thisModule.findOrmEntity(self.feature.parentEntity.name).getOrmFeature(self.feature.name)
			else
				thisModule.findOrmEntity(self.feature.targetEntity.name).getOrmFeature(self.feature.targetFeatureName())
			endif;

helper context Website!UnitElement def: unitElementLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else let  featureLabel : String
			= let feature : Website!Feature = self.feature
				in if not feature.displayLabel.oclIsUndefined() and feature.displayLabel <> '' then
						feature.displayLabel
					else
						feature.name.createLabel()
					endif
			in if not self.serviceFeature.oclIsUndefined() then
					if not self.serviceFeature.displayLabel.oclIsUndefined() and self.serviceFeature.displayLabel <> '' then
						self.serviceFeature.displayLabel
					else
						featureLabel
					endif
				else
					featureLabel
				endif
		endif;

helper context Website!UnitAssociation def: unitAssociationLabel() : String
	= if not self.displayLabel.oclIsUndefined() and  self.displayLabel <> '' then
			self.displayLabel
		else let  featureLabel : String
			= let feature : Website!Feature = self.unitFeature()
				in if not feature.displayLabel.oclIsUndefined() and feature.displayLabel <> '' then
						feature.displayLabel
					else
						feature.name.createLabel()
					endif
			in if not self.serviceFeature.oclIsUndefined() then
					if not self.serviceFeature.displayLabel.oclIsUndefined() and self.serviceFeature.displayLabel <> '' then
						self.serviceFeature.displayLabel
					else
						featureLabel
					endif
				else
					featureLabel
				endif
		endif;

helper context Website!ServiceEntityFeature def: serviceDateFormat() : String
	= if not self.feature.oclIsTypeOf(Website!DateAttribute) then
			OclUndefined
		else
			if not self.dateFormat.oclIsUndefined() and self.dateFormat <> '' then
				self.dateFormat
			else if not self.feature.format.oclIsUndefined() and self.feature.format <> '' then
				self.feature.format
			else
				if self.feature.details = #DateOnly then
					thisModule.findWebsiteProperties().defaultDateFormat
				else if self.feature.details = #TimeOnly then
					thisModule.findWebsiteProperties().defaultTimeFormat
				else
					thisModule.findWebsiteProperties().defaultDateTimeFormat
				endif endif
			endif endif
		endif;

helper context Website!IncludedFeature def: unitDateFormat() : String
	= if not self.dateFormat.oclIsUndefined() and self.dateFormat <> '' then
			self.dateFormat
		else
			self.serviceFeature.serviceDateFormat()
		endif;

helper context Website!IncludedFeature def: jsfHeaderClass() : String
	= if not self.headerClass.oclIsUndefined() and self.headerClass <> '' then
			self.headerClass
		else
			self.feature.headerClass
		endif;

helper context Website!IncludedFeature def: jsfInputClass() : String
	= if not self.inputClass.oclIsUndefined() and self.inputClass <> '' then
			self.inputClass
		else
			self.feature.inputClass
		endif;

helper context Website!IncludedFeature def: jsfDisplayClass() : String
	= if not self.displayClass.oclIsUndefined() and self.displayClass <> '' then
			self.displayClass
		else
			self.feature.displayClass
		endif;

helper context Website!IncludedFeature def: jsfFooterClass() : String
	= if not self.footerClass.oclIsUndefined() and self.footerClass <> '' then
			self.footerClass
		else
			self.feature.footerClass
		endif;

helper context Website!Attribute def: placeholder() : String
	= if not self.placeholder.oclIsUndefined() and self.placeholder <> '' then
			self.placeholder
		else
			if self.oclIsTypeOf(Website!DataTypeAttribute) then
				self.dataType.placeholder
			else
				OclUndefined
			endif
		endif;

helper context Website!Attribute def: validationPattern() : String
	= if not self.validationPattern.oclIsUndefined() and self.validationPattern <> '' then
			self.validationPattern
		else
			if self.oclIsTypeOf(Website!DataTypeAttribute) then
				self.dataType.validationPattern
			else
				OclUndefined
			endif
		endif;


rule JsfModel {
	from website : Website!WebGenModel, orm : ORM!OrmModel
	to jsf : JSF!JsfModel (
		properties <- jsfProperties,
		persistence <- orm,
		services <- website.services,
		pages <- website.pages,
		menus <- website.menus
	),
	jsfProperties : JSF!JsfProperties (
		siteName <- website.websiteProperties.projectName,
		siteTitle <- website.websiteProperties.siteTitle,
		webmasterEmail <- website.websiteProperties.webmasterEmail,
		copyrightText <-
			if not website.websiteProperties.copyrightText.oclIsUndefined() and website.websiteProperties.copyrightText <> '' then
				website.websiteProperties.copyrightText
			else
				'&copy; '.concat(website.websiteProperties.siteTitle).concat(' <?php echo date("Y"); ?>')
			endif,
		metaDescription <- website.websiteProperties.metaDescription,
		frameworkTechnology <- website.websiteProperties.frameworkTechnology,
		topNavigationId <- website.websiteProperties.topNavigationId,
		sideMenu <- website.websiteProperties.sideMenu,
		staticUnitsEditable <- website.websiteProperties.staticUnitsEditable
	)
}


abstract rule NamedElement {
	from website : Website!NamedElement
	to jsf : JSF!NamedElement (
		name <- website.name
	)
}

-- @extends NamedElement
abstract rule NamedDisplayElement {
	from website : Website!NamedDisplayElement
	to jsf : JSF!NamedDisplayElement (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}


abstract rule IncludedFeature {
	from website : Website!IncludedFeature
	to jsf : JSF!IncludedFeature (
		forcedValue <- website.forcedValue,
		footer <- website.footer,
-- TBC xClass or targetXClass?
		headerClass <- website.jsfHeaderClass(),
		inputClass <- website.jsfInputClass(),
		displayClass <- website.jsfDisplayClass(),
		footerClass <- website.jsfFooterClass()
	)
}

-- @extends IncludedFeature
abstract rule IncludedElement {
	from website : Website!IncludedElement
	to jsf : JSF!IncludedElement (
		obfuscateFormFields <- website.obfuscateFormFields,
		defaultValue <- website.defaultValue
	)
}

-- @extends IncludedFeature
abstract rule IncludedAssociation {
	from website : Website!IncludedAssociation
	to jsf : JSF!IncludedAssociation (
	)
}


-- @extends NamedElement
rule Service {
	from website : Website!Service
	to jsf : JSF!Service (
		modelName <-
			if not website.modelName.oclIsUndefined() then
				website.modelName
			else
				website.encapsulates->first().name
			endif,
		view <- website.view,
		entities <-
			website.encapsulates
				->collect(e | thisModule.findOrmEntity(e.name)),
		daosUsed <-
			let entities : Sequence(ORM!Entity)
				= website.encapsulates
					->collect(e | thisModule.findOrmEntity(e.name))
			in entities
				->union(entities
					->collect(e | e.features)->flatten()
					->select(f | f.oclIsKindOf(ORM!Association))
					->select(f | f.sourceEnd or f.bidirectional)
					->collect(f | f.opposite.parentEntity)),
		displayLabels <- website.displayLabels,
		selections <- website.selections,
		features <- website.features
	)
} 

-- @extends NamedElement
rule ModelLabel {
	from website : Website!ModelLabel
	to jsf : JSF!ModelLabel (
		format <- website.format,
		features <- website.features
	)
}

-- @extends NamedElement
rule Selection {
	from website : Website!Selection
	to jsf : JSF!Selection (
		filter <- website.filter,
		ordering <- website.ordering,
		limit <- website.limit
	)
}

abstract rule ServiceFeature {
	from website : Website!ServiceFeature
	to jsf : JSF!ServiceFeature (
		cardinality <-
			if website.oclIsKindOf(Website!ServiceEntityFeature) then
				website.cardinality(website.required)
			else
				#Required
			endif,
		dateFormat <-
			if website.oclIsKindOf(Website!ServiceEntityFeature) then
				website.serviceDateFormat()
			else
				OclUndefined
			endif
	)
}

-- @extends IncludedFeature, ServiceFeature
abstract rule ServiceEntityFeature {
	from website : Website!ServiceEntityFeature
	to jsf : JSF!ServiceEntityFeature (
	)
}

-- @extends ServiceEntityFeature, IncludedElement
rule ServiceEntityElement {
	from website : Website!ServiceEntityElement
	to jsf : JSF!ServiceEntityElement (
		name <-
			if not website.alias.oclIsUndefined() then
				website.alias
			else
				website.entityFeature().name
			endif,
		displayLabel <- website.entityFeatureLabel(),
		feature <- website.entityFeature(),
		caseInsensitive <- website.caseInsensitive,
		encrypt <- website.encrypt,
		placeholder <- website.placeholder(),
		validationPattern <- website.validationPattern()
	)
}

-- @extends ServiceFeature
abstract rule ServiceAssociation {
	from website : Website!ServiceAssociation
	to jsf : JSF!ServiceAssociation (
	)
}

-- @extends ServiceEntityFeature, ServiceAssociation, IncludedAssociation
rule ServiceEntityAssociation {
	from website : Website!ServiceEntityAssociation
	to jsf : JSF!ServiceEntityAssociation (
		name <-
			if not website.alias.oclIsUndefined() and website.alias <> '' then
				website.alias
			else
				website.entityFeature().name
			endif,
		feature <- website.entityFeature(),
		displayLabel <-	website.entityFeatureLabel(),
		forcedValue <- website.forcedValue
--		opposite <- 
--			if website.feature.targetEntiity.servedBy->empty() then
--				OclUndefined
--			else
--				website.feature.targetEntiity.servedBy->first().feature(website.feature.targetFeatureName)
--			endif
	)
}

-- @extends NamedElement, ServiceAssociation
rule ServiceViewAssociation {
	from website : Website!ServiceViewAssociation
	to jsf : JSF!ServiceViewAssociation (
		targetFeature <- website.targetFeature
	)
}

-- @extends NamedDisplayElement, UnitContainer
rule Page {
	from website : Website!Page
	to jsf : JSF!Page (
		authenticated <- website.authenticated,
		parentPage <-
			if website.parentPage.oclIsUndefined() then
				OclUndefined
			else
				website.parentPage.targetPage
			endif,
		topMenuOption <-
			if website.topMenuOption = #NeverInclude then
				#NeverInclude
			else if website.topMenuOption = #AlwaysInclude then
				#AlwaysInclude
			else
				#IncludeWhenAuthenticated
			endif endif,
		topMenuRank <- website.topMenuRank,
		navigationLabel <-
			if not website.navigationLabel.oclIsUndefined() and website.navigationLabel <> '' then
				website.navigationLabel
			else
				website.name.createLabel()
			endif,
		sideMenu <- website.pageSideMenu(),
		styleClass <- website.styleClass
	)
}


-- @extends NamedDisplayElement
abstract rule Menu {
	from website : Website!Menu
	to jsf : JSF!Menu (
		entries <- website.entries,
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

abstract rule MenuEntry {
	from website : Website!MenuEntry
	to jsf : JSF!MenuEntry (
	)
}

-- @extends Menu
rule StaticMenu {
	from website : Website!StaticMenu
	to jsf : JSF!StaticMenu (
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule FixedPageMenuEntry {
	from website : Website!FixedPageMenuEntry
	to jsf : JSF!FixedPageMenuEntry (
		destination <- website.destination
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule FixedActionMenuEntry {
	from website : Website!FixedActionMenuEntry
	to jsf : JSF!FixedActionMenuEntry (
		destination <- website.destination
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule FixedCommandMenuEntry {
	from website : Website!FixedCommandMenuEntry
	to jsf : JSF!FixedCommandMenuEntry (
		destination <- website.destination
	)
}

-- @extends MenuEntry, NamedDisplayElement
rule EditStaticTextMenuEntry {
	from website : Website!EditStaticTextMenuEntry
	to jsf : JSF!EditStaticTextMenuEntry (
	)
}

-- @extends Menu
rule DynamicMenu {
	from website : Website!DynamicMenu
	to jsf : JSF!DynamicMenu (
		service <- website.service,
		selection <- website.selection,
		dynamicTitle <- website.dynamicTitle
	)
}

-- @extends MenuEntry
abstract rule MenuIncludedFeature {
	from website : Website!MenuIncludedFeature
	to jsf : JSF!MenuIncludedFeature (
		displayLabel <-
			if not website.displayLabel.oclIsUndefined() and website.displayLabel <> '' then
				website.displayLabel
			else
				website.name.createLabel()
			endif
	)
}

-- @extends MenuIncludedFeature
rule MenuIncludedElement {
	from website : Website!MenuIncludedElement
	to jsf : JSF!MenuIncludedElement (
	)
}

abstract rule UnitContainer {
	from website : Website!UnitContainer
	to jsf : JSF!UnitContainer (
		units <- website.units
	)
}

-- @extends NamedDisplayElement
abstract rule ContentUnit {
	from website : Website!ContentUnit
	to jsf : JSF!ContentUnit (
		purposeSummary <- website.purposeSummary,
		omitCaption <-
			if not website.omitCaption.oclIsUndefined() then
				website.omitCaption
			else
				false
			endif,
		captionClass <- website.captionClass.replaceAll(',', ' '),
		styleClass <- website.styleClass.replaceAll(',', ' '),
		layoutClass <- website.layoutClass.replaceAll(',', ' ')
	)
}

-- @extends ContentUnit
rule StaticUnit {
	from website : Website!StaticUnit
	to jsf : JSF!StaticUnit (
		content <- website.content
	)
}

-- @extends ContentUnit
rule CommandUnit {
	from website : Website!CommandUnit
	to jsf : JSF!CommandUnit (
		commands <- website.commands
	)
}

-- @extends NamedElement
abstract rule Command {
	from website : Website!Command
	to jsf : JSF!Command (
	)
}

-- @extends Command
rule UserCommand {
	from website : Website!UserCommand
	to jsf : JSF!UserCommand (
	)
}

-- @extends ContentUnit
rule CreateSitemapUnit {
	from website : Website!CreateSitemapUnit
	to jsf : JSF!CreateSitemapUnit (
		deployedURL <- website.deployedURL,
		filename <- website.filename
	)
}

-- @extends ContentUnit
abstract rule DynamicUnit {
	from website : Website!DynamicUnit
	to jsf : JSF!DynamicUnit (
		service <-
			if website.source.oclIsTypeOf(Website!Service) then
				website.source
			else
				OclUndefined
			endif,
		displayFields <- website.displayFields,
		supportActions <- website.supportActions,
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		controlClass <- website.controlClass,
		footerClass <- website.footerClass,
		errorClass <- website.errorClass
	)
}

abstract rule UnitField {
	from website : Website!UnitField
	to jsf : JSF!UnitField (
		cardinality <-
			if website.oclIsKindOf(Website!UnitFeature) then
				website.serviceFeature.cardinality(website.required)
			else
				if website.required then
					#Required
				else
					#Optional
				endif
			endif,
		dateFormat <- website.unitDateFormat()
	)
}

-- @extends UnitField, IncludedFeature, InlineActionContainer
abstract rule UnitFeature {
	from website : Website!UnitFeature
	to jsf : JSF!UnitFeature (
		name <- website.name,
		onlyDisplayWhenNotEmpty <- website.onlyDisplayWhenNotEmpty,
		displayOption <-
			if website.collectionDisplayOption = #LineDirection then
				#LineDirection
			else
				#PageDirection
			endif,
		maximumDisplaySize <- website.maximumDisplaySize,
		autofocus <- website.autofocus
	)
}

-- @extends UnitFeature, IncludedElement
rule UnitElement {
	from website : Website!UnitElement
	to jsf : JSF!UnitElement (
		serviceFeature <- website.serviceFeature,
		displayLabel <- website.unitElementLabel(),
		placeholder <-
			if not website.placeholder.oclIsUndefined() and website.placeholder <> '' then
				website.placeholder
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.placeholder()
			else
				website.feature.placeholder()
			endif endif,
		validationPattern <-
			if not website.validationPattern.oclIsUndefined() and website.validationPattern <> '' then
				website.validationPattern
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.validationPattern()
			else
				website.feature.validationPattern()
			endif endif
	)
}

-- @extends UnitFeature, IncludedAssociation, UnitContainer
rule UnitAssociation {
	from website : Website!UnitAssociation
	to jsf : JSF!UnitAssociation (
		serviceFeature <- website.serviceFeature,
		name <-
			let parentEntities : Sequence(Website!Entiity)
				= if website.displayedOn.source.oclIsTypeOf(Website!Entity) then
						Sequence{website.displayedOn.source}
					else
						website.displayedOn.source.encapsulates
					endif
			in if parentEntities->contains(website.feature.parentEntity) then
				website.name
			else
				website.feature.targetFeatureName()
			endif,
		displayLabel <- website.unitAssociationLabel(),
		childFeature <- website.childFeature,
		selection <-
			if not website.selection.oclIsUndefined() then
				website.selection
			else if not website.serviceFeature.oclIsUndefined() then
				website.serviceFeature.selection
			else
				OclUndefined
			endif endif,
		dynamicLabel <- 
			if not website.dynamicLabel.oclIsUndefined() then
				website.dynamicLabel
			else
				if website.serviceFeature.oclIsUndefined() then
					OclUndefined
				else if website.serviceFeature.oclIsTypeOf(Website!ServiceEntityAssociation) then
					website.serviceFeature.dynamicLabel
				else
					OclUndefined
				endif endif
			endif,
		maximumDisplaySize <- website.maximumDisplaySize,
		displayOption <-
			if website.collectionDisplayOption = #LineDirection then
				#LineDirection
			else
				#PageDirection
			endif
	)
}

abstract rule UnitChildFeature {
	from website : Website!UnitChildFeature
	to jsf : JSF!UnitChildFeature (
	)
}

-- @extends UnitChildFeature
rule UnitChildElement {
	from website : Website!UnitChildElement
	to jsf : JSF!UnitChildElement (
		serviceFeature <- website.serviceFeature
	)
}

-- @extends UnitChildFeature
rule UnitChildAssociation {
	from website : Website!UnitChildAssociation
	to jsf : JSF!UnitChildAssociation (
		serviceFeature <- website.serviceFeature,
		childFeature <- website.childFeature
	)
}

-- @extends UnitField, NamedDisplayElement
abstract rule InterfaceField {
	from website : Website!InterfaceField
	to jsf : JSF!InterfaceField (
		cardinality <-
			if website.required.oclIsUndefined() then
				#Optional
			else
				if website.required then
					#Required
				else
					#Optional
				endif
			endif,
		defaultValue <- website.defaultValue,
		mustMatch <- website.mustMatch,
		inputClass <- website.inputClass
	)
}

-- @extends InterfaceField
rule DataTypeField {
	from website : Website!DataTypeField
	to jsf : JSF!DataTypeField (
		dataType <- thisModule.findOrmDataType(website.dataType.name),
		obfuscateFormFields <- website.obfuscateFormFields,
		encrypt <- website.encrypt
	)
}

-- @extends InterfaceField
rule DateField {
	from website : Website!DateField
	to jsf : JSF!DateField (
		details <- website.details,
		format <- website.format
	)
}

-- @extends NamedDisplayElement
rule UnitSupportAction {
	from website : Website!UnitSupportAction
	to jsf : JSF!UnitSupportAction (
		confirmMessage <- website.confirmMessage
	)
}


-- @extends DynamicUnit
abstract rule EditUnit {
	from website : Website!EditUnit
	to jsf : JSF!EditUnit (
		confirmDestination <- website.confirmDestination,
		confirmLabel <-
			if not website.confirmLabel.oclIsUndefined() and website.confirmLabel <> '' then
				website.confirmLabel
			else
				if  website.oclIsTypeOf(Website!CreateUnit) then
					'Create'
				else if  website.oclIsTypeOf(Website!CreateUpdateUnit) then
					'Save'
				else if  website.oclIsTypeOf(Website!UpdateUnit) then
					'Update'
				else if  website.oclIsTypeOf(Website!MapUnit) then
					'Save'
				else
					'Edit'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <-
			if not website.cancelLabel.oclIsUndefined() and website.cancelLabel <> '' then
				website.confirmLabel
			else
				'Cancel'
			endif
	)
}

-- @extends EditUnit
rule CreateUnit {
	from website : Website!CreateUnit
	to jsf : JSF!CreateUnit (
	)
}

-- @extends EditUnit
rule CreateUpdateUnit {
	from website : Website!CreateUpdateUnit
	to jsf : JSF!CreateUpdateUnit (
		clearLabel <- website.clearLabel
	)
}

-- @extends EditUnit
rule MapUnit {
	from website : Website!MapUnit
	to jsf : JSF!MapUnit (
		readOnly <- website.readOnly,
		defaultZoomLevel <- website.defaultZoomLevel,
		location <- website.location,
		placeName <- website.placeName
	)
}

-- @extends EditUnit
rule UpdateUnit {
	from website : Website!UpdateUnit
	to jsf : JSF!UpdateUnit (
	)
}

-- @extends DynamicUnit
abstract rule DataUnit {
	from website : Website!DataUnit
	to jsf : JSF!DataUnit (
		selection <- website.selection,
		dynamicTitle <-
			if website.dynamicTitle.oclIsUndefined() then
				website.dynamicTitle
			else if website.dynamicTitle.oclIsKindOf(Website!Attribute) then
				if website.source.oclIsTypeOf(Website!Service) then
					website.source.features->select(f | f.name = website.dynamicTitle.name)->first()
				else
					OclUndefined
				endif
			else
				website.dynamicTitle
			endif endif
	)
}

-- @extends DataUnit
rule DetailsUnit {
	from website : Website!DetailsUnit
	to jsf : JSF!DetailsUnit (
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends DataUnit, InlineActionContainer
abstract rule IndexUnit {
	from website : Website!IndexUnit
	to jsf : JSF!IndexUnit (
		omitColumnLabels <- website.omitColumnLabels,
		defaultPaginationSize <- website.defaultPaginationSize,
		nextPageLabel <- website.nextPageLabel,
		previousPageLabel <- website.previousPageLabel,
		useFirstLastPageLinks <- website.useFirstLastPageLinks,
		firstPageLabel <- website.firstPageLabel,
		lastPageLabel <- website.lastPageLabel,
		rowClasses <- website.rowClasses.replaceAll(',', ' ')
	)
}

-- @extends IndexUnit
rule IndexGridUnit {
	from website : Website!IndexUnit (website.displayOption = #Grid)
	to jsf : JSF!IndexGridUnit (
	)
}

-- @extends IndexUnit
rule IndexPageDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #PageDirection)
	to jsf : JSF!IndexPageDirectionUnit (
	)
}

-- @extends IndexUnit
rule IndexLineDirectionUnit {
	from website : Website!IndexUnit (website.displayOption = #LineDirection)
	to jsf : JSF!IndexLineDirectionUnit (
	)
}

-- @extends DynamicUnit
abstract rule ControlUnit {
	from website : Website!ControlUnit
	to jsf : JSF!ControlUnit (
		submitLabel <-
			if not website.submitLabel.oclIsUndefined() and website.submitLabel <> '' then
				website.submitLabel
			else
				if  website.oclIsKindOf(Website!SearchUnit) then
					'Search'
				else if  website.oclIsKindOf(Website!RegistrationUnit) then
					'Register'
				else if  website.oclIsKindOf(Website!LoginUnit) then
					'Login'
				else if  website.oclIsKindOf(Website!ForgottenPasswordUnit) then
					'Forgotton Password'
				else
					'Control'
				endif endif endif endif
			endif,
		cancelDestination <- website.cancelDestination,
		cancelLabel <- website.cancelLabel
	)
}

-- @extends ControlUnit
rule SearchUnit {
	from website : Website!SearchUnit
	to jsf : JSF!SearchUnit (
		resultsDestination <- website.resultsDestination
	)
}

-- @extends ControlUnit
rule ActionUnit {
	from website : Website!ActionUnit
	to jsf : JSF!ActionUnit (
		omitFieldLabels <- website.omitFieldLabels
	)
}

-- @extends EditUnit
rule RegistrationUnit {
	from website : Website!RegistrationUnit
	to jsf : JSF!RegistrationUnit (
	)
}

-- @extends ControlUnit
rule LoginUnit {
	from website : Website!LoginUnit
	to jsf : JSF!LoginUnit (
		loginIdField <- website.loginIdField,
		passwordField <- website.passwordField,
		rememberMeField <- website.rememberMeField
	)
}

-- @extends ControlUnit
rule ForgottenPasswordUnit {
	from website : Website!ForgottenPasswordUnit
	to jsf : JSF!ForgottenPasswordUnit (
		loginIdField <- website.loginIdField
	)
}


abstract rule InlineActionContainer {
	from website : Website!InlineActionContainer
	to jsf : JSF!InlineActionContainer (
		actions <- website.actions
	)
}

-- @extends NamedDisplayElement
abstract rule InlineAction {
	from website : Website!InlineAction
	to jsf : JSF!InlineAction (
		header <- website.header,
		footer <- website.footer,
		headerClass <- website.headerClass,
		footerClass <- website.footerClass
	)
}

-- @extends InlineAction
rule SelectAction {
	from website : Website!SelectAction
	to jsf : JSF!SelectAction (
		target <- website.target
	)
}

-- @extends InlineAction
rule DeleteAction {
	from website : Website!DeleteAction 
	to jsf : JSF!DeleteAction (
		destination <- website.destination,
		confirmMessage <- 
			if not website.confirmMessage.oclIsUndefined() then
				website.confirmMessage
			else if not website.displayLabel.oclIsUndefined() then
				website.displayLabel.concat('?')
			else
				website.name.createLabel().concat('?')
			endif endif
	)
}


abstract rule Literal {
	from website : Website!Literal
	to jsf : JSF!Literal (
	)
}

-- @extends Literal
rule NullLiteral {
	from website : Website!NullLiteral
	to jsf : JSF!NullLiteral (
	)
}

-- @extends Literal
rule IntegerLiteral {
	from website : Website!IntegerLiteral
	to jsf : JSF!IntegerLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule StringLiteral {
	from website : Website!StringLiteral
	to jsf : JSF!StringLiteral (
		value <- website.value
	)
}

-- @extends Literal
rule CurrentTime {
	from website : Website!CurrentTime
	to jsf : JSF!CurrentTime (
	)
}

rule Function {
	from website : Website!Function
	to jsf : JSF!Function (
		name <- website.name
	)
}

rule ModelReference {
	from website : Website!ModelReference
	to jsf : JSF!ModelReference (
		unit <- website.unit
	)
}

rule FeatureReference {
	from website : Website!FeatureReference
	to jsf : JSF!FeatureReference (
		field <- website.field
	)
}

rule CurrentUserReference {
	from website : Website!CurrentUserReference
	to jsf : JSF!CurrentUserReference (
	)
}

abstract rule Predicate {
	from website : Website!Predicate
	to jsf : JSF!Predicate (
		negated <- website.negated
	)
}

-- @extends Predicate
rule PredicateBooleanOperator {
	from website : Website!PredicateBooleanOperator
	to jsf : JSF!PredicateBooleanOperator (
		expressions <- website.expressions,
		operator <- website.operator
	)
}

-- @extends Predicate
rule PredicateEqualityOperator {
	from website : Website!PredicateEqualityOperator
	to jsf : JSF!PredicateEqualityOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateComparisonOperator {
	from website : Website!PredicateComparisonOperator
	to jsf : JSF!PredicateComparisonOperator (
		left <- website.left,
		operator <- website.operator,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateIsOperator {
	from website : Website!PredicateIsOperator
	to jsf : JSF!PredicateIsOperator (
		left <- website.left,
		right <- website.right
	)
}

-- @extends Predicate
rule PredicateLikeOperator {
	from website : Website!PredicateLikeOperator
	to jsf : JSF!PredicateLikeOperator (
		left <- website.left,
		right <- website.right
	)
}

abstract rule Order {
	from website : Website!Order
	to jsf : JSF!Order (
		path <- website.path
	)
}

-- @extends Order
rule Asc {
	from website : Website!Asc
	to jsf : JSF!Asc (
	)
}

-- @extends Order
rule Desc {
	from website : Website!Desc
	to jsf : JSF!Desc (
	)
}
