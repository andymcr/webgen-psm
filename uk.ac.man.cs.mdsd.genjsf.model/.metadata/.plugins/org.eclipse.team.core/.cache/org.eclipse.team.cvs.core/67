-- @atlcompiler emftvm 
--
-- @path ORM=/uk.ac.man.cs.mdsd.orm.model/model/orm.ecore
-- @path JSF=/uk.ac.man.cs.mdsd.jsf.model/model/Jsf.ecore
-- @path GEN=/uk.ac.man.cs.mdsd.genjsf.model/model/GenJsf.ecore

module PassConfig;
create gen : GEN from orm : ORM, jsf : JSF;

uses WebsiteHelpers;
uses ConfigCriteria;


helper def: findOrmModel() : ORM!OrmModel
	=  ORM!OrmModel.allInstancesFrom('orm')->first();

helper def: findJsfProperties() : JSF!JsfProperties
	=  JSF!JsfModel.allInstancesFrom('jsf')->first().properties;


helper context ORM!SingletonAssociation def: isDependentEnd() : Boolean
	= if not self.opposite.oclIsTypeOf(GEN!GenSingletonAssociation) then
			true
		else
			self.sourceEnd and self.required
			or self.sourceEnd and not self.opposite.required
			or not self.sourceEnd and not self.opposite.required
		endif;


helper context String def: createName() : String
	= if self.trim().replaceAll('[A-Z]', '') = '' then
			self.trim()
		else
			self.trim().lowercaseFirst().replaceAll('([A-Z])', '_$1')
		endif;

helper context String def: createElementColumnName() : String
	= let ormModel : ORM!OrmModel = thisModule.findOrmModel()
		in if ormModel.databaseTechnology = #Oracle then
				self.createName().toUpper()
			else
				self.createName().toLower()
			endif;

helper context String def: createAssociationFeatureName() : String
	= let properties : JSF!JsfProperties = thisModule.findJsfProperties()
		in if properties.frameworkTechnology = #Kohana then
				self.createName().toLower()
			else
				self.createName()
			endif;

helper context String def: createAssociationColumnName() : String
	= let name : String
			= let properties : JSF!JsfProperties = thisModule.findJsfProperties()
				in if properties.frameworkTechnology = #Kohana then
						self.createName().concat('_id')
					else
						self.createName()
					endif
		in let ormModel : ORM!OrmModel = thisModule.findOrmModel()
			in if ormModel.databaseTechnology = #Oracle then
					name.toUpper()
				else
					name.toLower()
				endif;

helper context String def: createTableName() : String
	= let ormModel : ORM!OrmModel = thisModule.findOrmModel()
		in if ormModel.databaseTechnology = #Oracle then
				self.toUpper()
			else
				self.toLower()
			endif;


rule Website {
	from orm : ORM!OrmModel, jsf : JSF!JsfModel
	to gen : GEN!GenJsfModel (
		genCollectionTypes <- orm.collectionTypes,
		genDataTypes <- orm.dataTypes,
		genEntities <- orm.entities,
		genAuthentication <- jsf.properties.authentication,
		genServices <- jsf.services,
		genPages <- jsf.pages,
		genMenus <- jsf.menus,
		baseURL <- jsf.properties.siteName,
--		basePackage <- orm.persistenceProperties.projectName,
		databaseName <-
			if orm.databaseTechnology = #Oracle then
				''
			else
				jsf.properties.siteName
			endif,
		databaseUsername <- 'webgen',
		databasePassword <- 'genweb',
		databasePrefix <- ''
	)
	do {
		gen.refSetValue('ormModel', orm);
		gen.refSetValue('jsfModel', jsf);
	}
}


abstract rule Authentication {
	from jsf : JSF!Authentication
	to gen : GEN!GenAuthentication (
	)
}

rule LocalAutheticationSystem extends Authentication {
	from jsf : JSF!LocalAuthenticationSystem
	to gen : GEN!GenLocalAuthenticationSystem (
		genUserService <- jsf.userService,
		genUserAuthenticationKey <- jsf.userAuthenticationKey,
		genLoginAttemptService <- jsf.loginAttemptService,
		genAutoLoginService <- jsf.autoLoginService,
		genAuthenticationService <- jsf.authenticationService,
		genRegistrationUnit <- jsf.registrationUnit,
		genLoginUnit <- jsf.loginUnit,
		genForgottenPasswordUnit <- jsf.forgottenPasswordUnit
	)
	do {
		gen.refSetValue('jsfAuthentication', jsf);
	}
}

rule CasAuthentication extends Authentication {
	from jsf : JSF!CasAuthentication
	to gen : GEN!GenCasAuthentication (
	)
	do {
		gen.refSetValue('jsfAuthentication', jsf);
	}
}


abstract rule NamedElement {
	from orm : ORM!NamedElement
	to gen : GEN!NamedElement (
		name <- orm.name
	)
}

abstract rule JsfNamedElement {
	from jsf : JSF!NamedElement
	to gen : GEN!NamedElement (
		name <- jsf.name
	)
}

-- @extends NamedElement
rule CollectionType {
	from orm : ORM!CollectionType
	to gen : GEN!GenCollectionType (
	)
	do {
		gen.refSetValue('ormCollectionType', orm);
	}
}

-- @extends NamedElement
abstract rule Classifier {
	from orm : ORM!Classifier
	to gen : GEN!GenClassifier (
	)
}

-- @extends Classifier
rule DataType {
	from orm : ORM!DataType (orm.oclIsTypeOf(ORM!DataType))
	to gen : GEN!GenDataType (
		javaType <-
			if orm.name = 'Integer' then
				'int'
			else
				orm.name
			endif,
		javaDefaultValue <-
			if orm.name = 'Integer' then
				'0'
			else
				'null'
			endif,
		persistenceType <-
			if orm.name = 'Email' then
				'string'
			else if orm.name = 'textblock' then
				'textarea'
			else
				orm.name.toLower()
			endif endif
	)
	do {
		gen.refSetValue('ormDataType', orm);
	}
}

-- @extends Classifier
rule EnumerationType {
	from orm : ORM!EnumerationType
	to gen : GEN!GenDataType (
		javaType <- orm.name,
		javaDefaultValue <- 'null',
		persistenceType <- 'integer'
	)
	do {
		gen.refSetValue('ormDataType', orm);
	}
}

-- @extends Classifier
rule Entity {
	from orm : ORM!Entity
	to gen : GEN!GenEntity (
		defaultTableName <- orm.name.createTableName(),
		tableName <- orm.name.createTableName(),
		keyName <- 'id',
		genFeatures <- orm.features
	)
	do {
		gen.refSetValue('ormEntity', orm);
	}
}

-- @extends NamedElement
abstract rule Feature {
	from orm : ORM!Feature
	to gen : GEN!GenFeature (
	)
}

-- @extends Feature
abstract rule Attribute {
	from orm : ORM!Attribute
	to gen : GEN!GenAttribute (
	)
}

-- @extends Attribute
abstract rule SingletonAttribute {
	from orm : ORM!SingletonAttribute
	to gen : GEN!GenSingletonAttribute (
		genDefaultValue <- orm.defaultValue,
		columnName <- orm.name.createElementColumnName()
	)
}

-- @extends Attribute
abstract rule CollectionAttribute {
	from orm : ORM!CollectionAttribute
	to gen : GEN!GenCollectionAttribute (
	)
}

-- @extends SingletonAttribute
rule SingletonElement {
	from orm : ORM!SingletonElement
	to gen : GEN!GenSingletonElement (
		genDataType <- orm.dataType
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}

-- @extends CollectionAttribute
rule CollectionElement {
	from orm : ORM!CollectionElement
	to gen : GEN!GenCollectionElement (
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}

-- @extends SingletonAttribute
rule SingletonDate {
	from orm : ORM!SingletonDate
	to gen : GEN!GenSingletonDate (
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}

-- @extends CollectionAttribute
rule CollectionDate {
	from orm : ORM!CollectionDate
	to gen : GEN!GenCollectionDate (
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}

-- @extends SingletonAttribute
rule SingletonFile {
	from orm : ORM!SingletonFile
	to gen : GEN!GenSingletonFile (
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}

-- @extends SingletonAttribute
rule SingletonLocation {
	from orm : ORM!SingletonLocation
	to gen : GEN!GenSingletonLocation (
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}

-- @extends Feature
abstract rule Association {
	from orm : ORM!Association
	to gen : GEN!GenAssociation (
	)
}

-- @extends Association
rule SingletonAssociation {
	from orm : ORM!SingletonAssociation
	to gen : GEN!GenSingletonAssociation (
		genOpposite <- orm.opposite,
		featureName <- orm.name.createAssociationFeatureName(),
		columnName <-
			if orm.associationRelationship = #ManyToOne or orm.isDependentEnd() then
				orm.name.createAssociationColumnName()
			else
				''
			endif
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}

-- @extends Association
rule CollectionAssociation {
	from orm : ORM!CollectionAssociation
	to gen : GEN!GenCollectionAssociation (
		genOpposite <- orm.opposite,
		featureName <- orm.name.createAssociationFeatureName(),
		pivotColumnName <-
			if orm.associationRelationship <> #ManyToMany then
				''
			else
				orm.name.createAssociationColumnName()
			endif,
		pivotTableName <-
			if orm.associationRelationship <> #ManyToMany then
				''
			else
				orm.parentEntity.name.createTableName()
				.concat('_')
				.concat(orm.opposite.parentEntity.name.createTableName())
			endif
	)
	do {
		gen.refSetValue('ormFeature', orm);
	}
}


abstract rule IncludedFeature {
	from jsf : JSF!IncludedFeature
	to gen : GEN!GenIncludedFeature (
		genForcedValue <- jsf.forcedValue
	)
}

-- @extends IncludedFeature
abstract rule IncludedElement {
	from jsf : JSF!IncludedElement
	to gen : GEN!GenIncludedElement (
		genDefaultValue <- jsf.defaultValue
	)
}

-- @extends IncludedFeature
abstract rule IncludedAssociation {
	from jsf : JSF!IncludedAssociation
	to gen : GEN!GenIncludedAssociation (
		genForcedValue <- jsf.forcedValue
	)
}


-- @extends JsfNamedElement
rule Service {
	from jsf : JSF!Service
	to gen : GEN!GenService (
		genEntities <- jsf.entities,
		genDisplayLabels <- jsf.displayLabels,
		genSelections <- jsf.selections,
		genFeatures <- jsf.features,
		defaultViewName <- jsf.modelName.createTableName(),
		viewName <- jsf.modelName.createTableName()
	)
	do {
		gen.refSetValue('jsfService', jsf);
	}
}

-- @extends JsfNamedElement
rule ModelLabel {
	from jsf : JSF!ModelLabel
	to gen : GEN!GenModelLabel (
		genFeatures <- jsf.features
	)
	do {
		gen.refSetValue('jsfLabel', jsf);
	}
}

-- @extends JsfNamedElement
rule Selection {
	from jsf : JSF!Selection
	to gen : GEN!GenSelection (
		genFilter <- jsf.filter,
		genOrdering <- jsf.ordering
	)
	do {
		gen.refSetValue('jsfSelection', jsf);
	}
}

-- @extends JsfNamedElement
abstract rule ServiceFeature {
	from jsf : JSF!ServiceFeature
	to gen : GEN!GenServiceFeature (
	)
}

-- @extends ServiceFeature, IncludedFeature
abstract rule ServiceEntityFeature {
	from jsf : JSF!ServiceEntityFeature
	to gen : GEN!GenServiceEntityFeature (
	)
}

-- @extends ServiceEntityFeature, IncludedElement
rule ServiceEntityElement {
	from jsf : JSF!ServiceEntityElement
	to gen : GEN!GenServiceEntityElement (
		genFeature <- jsf.feature
	)
	do {
		gen.refSetValue('jsfFeature', jsf);
	}
}

-- @extends ServiceFeature
abstract rule ServiceAssociation {
	from jsf : JSF!ServiceAssociation
	to gen : GEN!GenServiceAssociation (
	)
}

-- @extends ServiceEntityFeature, ServiceAssociation, IncludedAssociation
rule ServiceEntityAssociation {
	from jsf : JSF!ServiceEntityAssociation
	to gen : GEN!GenServiceEntityAssociation (
		genFeature <- jsf.feature,
		genForcedValue <- jsf.forcedValue
	)
	do {
		gen.refSetValue('jsfFeature', jsf);
	}
}

-- @extends ServiceFeature, ServiceAssociation
rule ServiceViewAssociation {
	from jsf : JSF!ServiceViewAssociation
	to gen : GEN!GenServiceViewAssociation (
		genTargetFeature <- jsf.targetFeature
	)
	do {
		gen.refSetValue('jsfTargetFeature', jsf);
	}
}


-- @extends JsfNamedElement, UnitContainer
rule Page {
	from jsf : JSF!Page
	to gen : GEN!GenPage (
		genChildPages <- jsf.childPages,
		genSideMenu <- jsf.sideMenu,
		genUnits <- jsf.units
	)
	do {
		gen.refSetValue('jsfPage', jsf);
	}
}


-- @extends JsfNamedElement
abstract rule Menu {
	from jsf : JSF!Menu
	to gen : GEN!GenMenu (
		genEntries <- jsf.entries
	)
}

-- @extends JsfNamedElement
abstract rule MenuEntry {
	from jsf : JSF!MenuEntry
	to gen : GEN!GenMenuEntry (
	)
}

-- @extends Menu
rule StaticMenu {
	from jsf : JSF!StaticMenu
	to gen : GEN!GenStaticMenu (
	)
	do {
		gen.refSetValue('jsfMenu', jsf);
	}
}

-- @extends Menu
rule DynamicMenu {
	from jsf : JSF!DynamicMenu
	to gen : GEN!GenDynamicMenu (
		genService <- jsf.service,
		genSelection <- jsf.selection,
		genDynamicTitle <- jsf.dynamicTitle
	)
	do {
		gen.refSetValue('jsfMenu', jsf);
	}
}

-- @extends MenuEntry
rule FixedPageMenuEntry {
	from jsf : JSF!FixedPageMenuEntry
	to gen : GEN!GenFixedPageMenuEntry (
		genDestination <- jsf.destination
	)
	do {
		gen.refSetValue('jsfMenuEntry', jsf);
	}
}

-- @extends MenuEntry
rule FixedActionMenuEntry {
	from jsf : JSF!FixedActionMenuEntry
	to gen : GEN!GenFixedActionMenuEntry (
		genDestination <- jsf.destination
	)
	do {
		gen.refSetValue('jsfMenuEntry', jsf);
	}
}

-- @extends MenuEntry
rule FixedCommandMenuEntry {
	from jsf : JSF!FixedCommandMenuEntry
	to gen : GEN!GenFixedCommandMenuEntry (
		genDestination <- jsf.destination
	)
	do {
		gen.refSetValue('jsfMenuEntry', jsf);
	}
}

-- @extends MenuEntry
rule EditStaticTextMenuEntry {
	from jsf : JSF!EditStaticTextMenuEntry
	to gen : GEN!GenEditStaticTextMenuEntry (
	)
	do {
		gen.refSetValue('jsfMenuEntry', jsf);
	}
}

-- @extends MenuEntry
abstract rule MenuIncludedFeature {
	from jsf : JSF!MenuIncludedFeature
	to gen : GEN!GenMenuIncludedFeature (
	)
}

-- @extends MenuIncludedFeature
rule MenuIncludedElement {
	from jsf : JSF!MenuIncludedElement
	to gen : GEN!GenMenuIncludedElement (
	)
	do {
		gen.refSetValue('jsfMenuEntry', jsf);
	}
}

abstract rule UnitContainer {
	from jsf : JSF!UnitContainer
	to gen : GEN!GenUnitContainer (
		genUnits <- jsf.units
	)
}

-- @extends JsfNamedElement
abstract rule ContentUnit {
	from jsf : JSF!ContentUnit
	to gen : GEN!GenContentUnit (
	)
}

-- @extends ContentUnit
rule StaticUnit {
	from jsf : JSF!StaticUnit
	to gen : GEN!GenStaticUnit (
		genService <- jsf.service
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

-- @extends ContentUnit
rule CommandUnit {
	from jsf : JSF!CommandUnit
	to gen : GEN!GenCommandUnit (
		genCommands <- jsf.commands
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

-- @extends JsfNamedElement
abstract rule Command {
	from jsf : JSF!Command
	to gen : GEN!GenCommand (
	)
}

-- @extends Command
rule UserCommand {
	from jsf : JSF!UserCommand
	to gen : GEN!GenUserCommand (
	)
	do {
		gen.refSetValue('jsfCommand', jsf);
	}
}

-- @extends ContentUnit
rule CreateSitemapUnit {
	from jsf : JSF!CreateSitemapUnit
	to gen : GEN!GenCreateSitemapUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

-- @extends ContentUnit
abstract rule DynamicUnit {
	from jsf : JSF!DynamicUnit
	to gen : GEN!GenDynamicUnit (
		genService <- jsf.service,
		genDisplayFields <- jsf.displayFields,
		genSupportActions <- jsf.supportActions
	)
}

-- @extends JsfNamedElement
abstract rule UnitField {
	from jsf : JSF!UnitField
	to gen : GEN!GenUnitField (
	)
}

-- @extends UnitField, IncludedFeature, InlineActionContainer
abstract rule UnitFeature {
	from jsf : JSF!UnitFeature
	to gen : GEN!GenUnitFeature (
	)
}

-- @extends UnitFeature, IncludedElement
rule UnitElement {
	from jsf : JSF!UnitElement
	to gen : GEN!GenUnitElement (
		genServiceFeature <- jsf.serviceFeature
	)
	do {
		gen.refSetValue('jsfFeature', jsf);
	}
}

-- @extends UnitFeature, IncludedAssociation, UnitContainer
rule UnitAssociation {
	from jsf : JSF!UnitAssociation
	to gen : GEN!GenUnitAssociation (
		genServiceFeature <- jsf.serviceFeature,
		genChildFeature <- jsf.childFeature,
		genSelection <- jsf.selection,
		genDynamicLabel <- jsf.dynamicLabel,
		selectOneOfOption <- #Menu,
		selectManyOption <- #List
	)
	do {
		gen.refSetValue('jsfFeature', jsf);
	}
}

abstract rule UnitChildFeature {
	from jsf : JSF!UnitChildFeature
	to gen : GEN!GenUnitChildFeature (
	)
}

-- @extends UnitChildFeature
rule UnitChildElement {
	from jsf : JSF!UnitChildElement
	to gen : GEN!GenUnitChildElement (
		genServiceFeature <- jsf.serviceFeature
	)
	do {
		gen.refSetValue('jsfChildFeature', jsf);
	}
}

-- @extends UnitChildFeature
rule UnitChildAssociation {
	from jsf : JSF!UnitChildAssociation
	to gen : GEN!GenUnitChildAssociation (
		genServiceFeature <- jsf.serviceFeature,
		genChildFeature <- jsf.childFeature
	)
	do {
		gen.refSetValue('jsfChildFeature', jsf);
	}
}

-- @extends UnitField
abstract rule InterfaceField {
	from jsf : JSF!InterfaceField
	to gen : GEN!GenInterfaceField (
		genDefaultValue <- jsf.defaultValue,
		genMustMatch <- jsf.mustMatch
	)
}

-- @extends InterfaceField
rule DataTypeField {
	from jsf : JSF!DataTypeField
	to gen : GEN!GenDataTypeField (
		genDataType <- jsf.dataType
	)
	do {
		gen.refSetValue('jsfField', jsf);
	}
}

-- @extends InterfaceField
rule DateField {
	from jsf : JSF!DateField
	to gen : GEN!GenDateField (
	)
	do {
		gen.refSetValue('jsfField', jsf);
	}
}

-- @extends UnitField
rule CaptchaField {
	from jsf : JSF!CaptchaField
	to gen : GEN!GenCaptchaField (
	)
	do {
		gen.refSetValue('jsfField', jsf);
	}
}


-- @extends JsfNamedElement
rule UnitSupportAction {
	from jsf : JSF!UnitSupportAction
	to gen : GEN!GenUnitSupportAction (
	)
	do {
		gen.refSetValue('jsfAction', jsf);
	}
}


abstract rule EditUnit extends DynamicUnit {
	from jsf : JSF!EditUnit
	to gen : GEN!GenEditUnit (
		genConfirmDestination <- jsf.confirmDestination,
		genCancelDestination <- jsf.cancelDestination,
		messagePlacementOption <- #OnFeature,
		formMessageDisplayOption <- #Description
	)
}

rule CreateUnit extends EditUnit {
	from jsf : JSF!CreateUnit
	to gen : GEN!GenCreateUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

rule CreateUpdateUnit extends EditUnit {
	from jsf : JSF!CreateUpdateUnit
	to gen : GEN!GenCreateUpdateUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

rule MapUnit extends EditUnit {
	from jsf : JSF!MapUnit
	to gen : GEN!GenMapUnit (
		genLocation <- jsf.location,
		genPlaceName <- jsf.placeName
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

rule UpdateUnit extends EditUnit {
	from jsf : JSF!UpdateUnit
	to gen : GEN!GenUpdateUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

abstract rule DataUnit extends DynamicUnit {
	from jsf : JSF!DataUnit
	to gen : GEN!GenDataUnit (
		genSelection <- jsf.selection,
		genDynamicTitle <- jsf.dynamicTitle
	)
}

rule DetailsUnit extends DataUnit {
	from jsf : JSF!DetailsUnit
	to gen : GEN!GenDetailsUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

-- @extends DataUnit, InlineActionContainer
abstract rule IndexUnit {
	from jsf : JSF!IndexUnit
	to gen : GEN!GenIndexUnit (
	)
}

-- @extends IndexUnit
rule IndexGridUnit {
	from jsf : JSF!IndexGridUnit
	to gen : GEN!GenIndexGridUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

-- @extends IndexUnit
rule IndexPageDirectionUnit {
	from jsf : JSF!IndexPageDirectionUnit
	to gen : GEN!GenIndexPageDirectionUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

-- @extends IndexUnit
rule IndexLineDirectionUnit {
	from jsf : JSF!IndexLineDirectionUnit
	to gen : GEN!GenIndexLineDirectionUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

abstract rule ControlUnit extends DynamicUnit {
	from jsf : JSF!ControlUnit
	to gen : GEN!GenControlUnit (
		genCancelDestination <- jsf.cancelDestination,
		messagePlacementOption <- #OnFeature
	)
}

rule SearchUnit extends ControlUnit {
	from jsf : JSF!SearchUnit
	to gen : GEN!GenSearchUnit (
		genResultDestination <- jsf.resultsDestination
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

rule ActionUnit extends ControlUnit {
	from jsf : JSF!ActionUnit
	to gen : GEN!GenActionUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

rule RegistrationUnit extends EditUnit {
	from jsf : JSF!RegistrationUnit
	to gen : GEN!GenRegistrationUnit (
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

rule LoginUnit extends ControlUnit {
	from jsf : JSF!LoginUnit
	to gen : GEN!GenLoginUnit (
		genLoginIdField <- jsf.loginIdField,
		genPasswordField <- jsf.passwordField,
		genRememberMeField <- jsf.rememberMeField
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}

rule ForgottenPasswordUnit extends ControlUnit {
	from jsf : JSF!ForgottenPasswordUnit
	to gen : GEN!GenForgottenPasswordUnit (
		genLoginIdField <- jsf.loginIdField
	)
	do {
		gen.refSetValue('jsfUnit', jsf);
	}
}


abstract rule InlineActionContainer {
	from jsf : JSF!InlineActionContainer
	to gen : GEN!GenInlineActionContainer (
		genActions <- jsf.actions
	)
}

-- @extends JsfNamedElement
abstract rule InlineAction {
	from jsf : JSF!InlineAction
	to gen : GEN!GenInlineAction (
	)
}

rule SelectAction extends InlineAction {
	from jsf : JSF!SelectAction
	to gen : GEN!GenSelectAction (
		genTarget <- jsf.target
	)
	do {
		gen.refSetValue('jsfAction', jsf);
	}
}

rule DeleteAction extends InlineAction {
	from jsf : JSF!DeleteAction
	to gen : GEN!GenDeleteAction (
		genDestination <- jsf.destination
	)
	do {
		gen.refSetValue('jsfAction', jsf);
	}
}