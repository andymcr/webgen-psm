@Ecore(
	nsURI="http://andycarpenter.work/metamodel/base",
	nsPrefix="base"
)
@Ecore(
	validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL",
	invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL"
)
@GenModel(
	editDirectory="/work.andycarpenter.metamodel.base.edit/src",
	editPluginID="work.andycarpenter.metamodel.base.edit",
	childCreationExtenders="true",
	complianceLevel="17.0"
)
package work.andycarpenter.metamodel.base

import work.andycarpenter.metamodel.expression.Expression
import work.andycarpenter.metamodel.expression.Literal
import work.andycarpenter.metamodel.expression.Operand
import work.andycarpenter.metamodel.expression.Variable

annotation "http://www.eclipse.org/emf/2002/Ecore/OCL" as OCL


class BaseModel {
	contains Literal[] literals
	contains DataType[] dataTypes
}


class NullLiteral extends Literal {
}

class BooleanLiteral extends Literal {
    @GenModel(propertyCategory="Model")
	Boolean[1] value
}

class IntegerLiteral extends Literal {
    @GenModel(propertyCategory="Model")
	int[1] value
}

class StringLiteral extends Literal {
    @GenModel(propertyCategory="Model")
	String[1] value
}

class TimeLiteral extends Literal {
    @GenModel(propertyCategory="Model")
	String[1] value
}


class CurrentTime extends Variable {
}

class CurrentUser extends Variable {
}


abstract class NamedElement {
    @GenModel(propertyCategory="Model")
	String[1] name
}

abstract class NamedDisplayElement extends NamedElement {
    @GenModel(propertyCategory="Interface")
	String displayLabel
}


interface ConstantContainer {
	contains Constant[] constants opposite definedBy
}

class Constant extends NamedElement {
	refers ConstantContainer definedBy opposite constants
	contains Expression value
}

class ConstantReference extends Variable { 
    @GenModel(propertyCategory="Model")
	refers Constant[1] value 
} 
 

abstract class Classifier extends NamedDisplayElement {
	@OCL(derivation="if self.oclIsKindOf(DataType) then self.oclAsType(DataType).isBooleanDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isBooleanClassifier
	@OCL(derivation="if self.oclIsKindOf(DataType) then self.oclAsType(DataType).isEmailDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isEmailClassifier
	@OCL(derivation="self.oclIsTypeOf(EnumerationType)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isEnumerationClassifier
	@OCL(derivation="if self.oclIsKindOf(DataType) then self.oclAsType(DataType).isIntegerDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isIntegerClassifier
	@OCL(derivation="if self.oclIsKindOf(DataType) then self.oclAsType(DataType).isStringDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isStringClassifier
	@OCL(derivation="if self.oclIsKindOf(DataType) then self.oclAsType(DataType).isTextareaDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isTextareaClassifier
	@OCL(derivation="if self.oclIsKindOf(DataType) then self.oclAsType(DataType).isUrlDataType else false endif")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isUrlClassifier
}

class DataType extends Classifier {
	String persistentType
	String ormType
	String wafType
	String interfaceType
	String validationPattern = ''
	@OCL(derivation="name = 'Boolean'")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isBooleanDataType
	@OCL(derivation="name = 'Email'")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isEmailDataType
	@OCL(derivation="self.oclIsTypeOf(EnumerationType)")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isEnumerationType
	@OCL(derivation="name = 'Float'")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isFloatDataType
	@OCL(derivation="name = 'Integer'")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isIntegerDataType
	@OCL(derivation="name = 'String'")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isStringDataType
	@OCL(derivation="name = 'Textarea'")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isTextareaDataType
	@OCL(derivation="name = 'URL'")
    @GenModel(propertyCategory="Debug")
	derived readonly unsettable transient volatile boolean isUrlDataType
}

class EnumerationType extends DataType {
	contains EnumerationLiteral[] enumerations
}

class EnumerationLiteral extends NamedDisplayElement {
}


interface FormalParameterList {
	contains FormalParameter[] parameters
}

class FormalParameter extends NamedElement {
    @GenModel(propertyCategory="Model")
	refers Classifier[1] dataType
	String defaultValue
	String placeholder = ''
	String description = ''
}

class Callable extends FormalParameterList, Operand {
	contains Expression[1] expression
}

class ReduceFunction extends Operand {
	contains Variable[1] value
	contains Callable[1] callback
	contains Expression initial
}

class SizeFunction extends Operand {
	contains Variable[1] value
}