@Ecore(
	nsURI="http://cs.manchester.ac.uk/mdsd/Service",
	nsPrefix="service"
)
@GenModel(
	editDirectory="/uk.ac.man.cs.mdsd.service.edit/src",
	editPluginID="uk.ac.man.cs.mdsd.service.edit",
	childCreationExtenders="true",
	editorDirectory="/uk.ac.man.cs.mdsd.service.editor/src")
package uk.ac.man.cs.mdsd.service

import uk.ac.man.cs.mdsd.expression.Expression
import uk.ac.man.cs.mdsd.expression.Predicate
import uk.ac.man.cs.mdsd.expression.Variable
import uk.ac.man.cs.mdsd.orm.Association
import uk.ac.man.cs.mdsd.orm.DataType
import uk.ac.man.cs.mdsd.orm.EntityAssociation
import uk.ac.man.cs.mdsd.orm.EntityOrView
import uk.ac.man.cs.mdsd.orm.Feature
import uk.ac.man.cs.mdsd.orm.NamedDisplayElement
import uk.ac.man.cs.mdsd.orm.NamedElement
import uk.ac.man.cs.mdsd.orm.OrmModel


interface FormalParameterList {
	contains FormalParameter[] parameters
}

class FormalParameter extends NamedElement {
	refers DataType dataType
	String defaultValue
	String placeholder
	String description
}

class ServiceModel {
	refers OrmModel[1] persistence
	contains Service[] services opposite partOf
}

class Service extends NamedElement {
	refers ServiceModel[1] partOf opposite services
	contains Constant[] constants opposite definedBy
	refers EntityOrView[1] serves
	contains Selection[] selections opposite partOf
	refers Selection findAll
	refers Selection findOne
	contains BusinessOperation[] operations opposite partOf
	refers Service[] uses
}


class Constant extends NamedElement {
	container Service[1] definedBy opposite constants
	contains Expression value
}

class Selection extends NamedElement, FormalParameterList {
	container Service partOf opposite selections
	boolean distinct
	refers Feature[] fields
	refers Association[] joins
	contains Predicate condition
	contains Filter[] filters opposite selection
	contains Order[] ordering
	int limit = "0"
	boolean selected
	refers EntityAssociation selectVia
	String methodName
}

class Filter extends NamedDisplayElement, FormalParameterList {
	refers Selection selection opposite filters
	contains Predicate condition
	String methodName
}
abstract class Order {
	@GenModel(propertyCategory="")
	contains Variable[1] path
}

class Asc extends Order {
}

class Desc extends Order {
}


class ConstantReference extends Variable { 
	refers Constant[1] value 
} 
 
class FeatureReference extends Variable { 
	refers Feature[1] feature 
} 
 
class ParameterReference extends Variable { 
	refers FormalParameter[1] parameter 
} 

class BusinessOperation extends NamedElement, FormalParameterList {
	container Service[1] partOf opposite operations
	refers Service[] uses
	OperationResultTypes[1] resultType
	String resultMimeType
}

enum OperationResultTypes {
	None
	File = 1
}

