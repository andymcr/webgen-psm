[comment encoding = UTF-8 /]
[module service(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::criteria::m2t::criteria/]
[import uk::ac::man::cs::mdsd::jsf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::symfony::files/]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]

[template public generateService(service : Service)]
[file(service.serviceFilename(), false)]
<?php
namespace [service.servicesNamespace()/];

class [service.serviceClassName()/]
{
    private $doctrine;

    public function __construct($doctrine)
    {
        $this->doctrine = $doctrine;
    }

[for (selection : Selection | service.selections)]
    public function [selection.name/]()
    {
        $repository = $this->doctrine->getRepository('[service.appBundleName()/]:[service.modelName/]');
		$queryBuilder = $repository->createQueryBuilder('[service.selectName()/]');
        $query = $queryBuilder
	[if (not selection.filter.oclIsUndefined())]
            ->where([selection.filter.generateCriteria()/])
	[/if]
	[if (selection.ordering->size() > 0)]
//            ->orderBy(, [if (selection.ordering->first().oclIsTypeOf(Asc))]'ASC'[else]'DESC'[/if])
		[if (selection.ordering->size() > 1)]
			[for (order : Order | selection.ordering->subOrderedSet(2, selection.ordering->size()))]
//            ->addOrderBy(, [if (order.oclIsTypeOf(Asc))]'ASC'[else]'DESC'[/if])
			[/for]
		[/if]
	[/if]
	[if (selection.limit > 0)]
            ->setMaxResults([selection.limit/])
	[/if]
            ->getQuery();

        return $query->getResult();
    }

[/for]
}
[/file]
[/template]


[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(ModelReference)) post(trim())]
[let path : ModelReference = criteria.oclAsType(ModelReference)]
$this->[path.unit.instanceName()/]->[path.unit.service.keyName()/]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(FeatureReference)) post(trim())]
[let path : FeatureReference = criteria.oclAsType(FeatureReference)]
[let isDate : Boolean
	= if not path.field.oclIsTypeOf(ServiceEntityElement) then
			false
		else
			path.field.oclAsType(ServiceEntityElement).feature.oclIsTypeOf(SingletonDate)
		endif
]
[if (isDate)]
new Database_Expression('UNIX_TIMESTAMP([path.field.columnName()/])')
[else]
	[if (path.field.oclIsKindOf(IncludedAssociation))]
'[path.field.includedBy.selectName()/].[path.field.columnName()/]'
	[else]
'[path.field.includedBy.selectName()/].[path.field.modelPropertyName()/]'
	[/if]
[/if]
[/let]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(CurrentUserReference)) post(trim())]
[let path : CurrentUserReference = criteria.oclAsType(CurrentUserReference)]
Auth::instance()->get_actual_user()->id
[/let]
[/template]


[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = criteria.oclAsType(PredicateBooleanOperator)]
$queryBuilder->expr()->[predicate.generateOperator()/]([if (predicate.expressions->any(e | e.oclIsKindOf(Predicate))->notEmpty())]
[for (expression : Expression | predicate.expressions) separator (',')]

    [expression.generateCriteria()/][/for]

)
[else]
[for (expression : Expression | predicate.expressions) separator (', ')]
[expression.generateCriteria()/]
[/for]
[/if]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = criteria.oclAsType(PredicateEqualityOperator)]
$queryBuilder->expr()->[predicate.generateOperator()/]([if (predicate.left.oclIsKindOf(Predicate) or predicate.right.oclIsKindOf(Predicate))]

    [predicate.left.generateCriteria()/],
    [predicate.right.generateCriteria()/]
)
[else]
[predicate.left.generateCriteria()/], [predicate.right.generateCriteria()/])
[/if]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = criteria.oclAsType(PredicateComparisonOperator)]
// $queryBuilder->expr()->[predicate.generateOperator()/]([predicate.left.generateCriteria()/], [predicate.right.generateCriteria()/])
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateIsOperator)) post(trim())]
[let predicate : PredicateIsOperator = criteria.oclAsType(PredicateIsOperator)]
[predicate.left.generateCriteria()/], 'IS[if (predicate.negated)] NOT[/if]', [predicate.right.generateCriteria()/]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = criteria.oclAsType(PredicateLikeOperator)]
$queryBuilder->expr()->[predicate.generateOperator()/]([predicate.left.generateCriteria()/], [predicate.right.generateCriteria()/])
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = criteria.oclAsType(PredicateIsEmpty)]
$this->where([predicate.feature.generateCriteria()/], [if (predicate.negated)]'>'[else]'='[/if], '0');
[/let]
[/template]

[query public generateOperator(predicate : PredicateBooleanOperator) : String
	= if predicate.operator = BooleanOperator::And then
			'andX'
		else if predicate.operator = BooleanOperator::Or then
			'orX'
		else
			'?'
		endif endif
/]

[query public generateOperator(predicate : PredicateEqualityOperator) : String
	= if not predicate.negated then
			'eq'
		else
			'neq'
		endif
/]

[query public generateOperator(predicate : PredicateComparisonOperator) : String
	= if predicate.operator = ComparisionOperator::GreaterThan then
			if not predicate.negated then
				'gt'
			else
				'lte'
			endif
		else if predicate.operator = ComparisionOperator::LessThan then
			if not predicate.negated then
				'lt'
			else
				'gte'
			endif
		else
			'?'
		endif endif
/]

[query public generateOperator(predicate : PredicateLikeOperator) : String
	= if not predicate.negated then
			'like'
		else
			'notLike'
		endif
/]

