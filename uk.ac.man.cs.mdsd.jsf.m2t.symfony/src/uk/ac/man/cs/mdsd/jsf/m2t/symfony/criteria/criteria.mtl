[comment encoding = UTF-8 /]
[module criteria(
	'http://www.cs.man.ac.uk/mdsd/2013/Criteria',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::symfony::names/]


[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(NullLiteral)) post(trim())]
NULL
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(IntegerLiteral)) post(trim())]
[let literal : IntegerLiteral = criteria.oclAsType(IntegerLiteral)]
[literal.value/]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(StringLiteral)) post(trim())]
[let literal : StringLiteral = criteria.oclAsType(StringLiteral)]
'[literal.value/]'
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(CurrentTime)) post(trim())]
Time()
[/template]


[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(Function)) post(trim())]
[let function : Function = criteria.oclAsType(Function)]
[function.name/]('Y-m-d H:i:s')
[/let]
[/template]


[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(ModelReference)) post(trim())]
[let path : ModelReference = criteria.oclAsType(ModelReference)]
$this->[path.unit.instanceName()/]->[path.unit.service.keyName()/]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(FeatureReference)) post(trim())]
[let path : FeatureReference = criteria.oclAsType(FeatureReference)]
[let isDate : Boolean
	= if not path.field.oclIsTypeOf(ServiceEntityElement) then
			false
		else
			path.field.oclAsType(ServiceEntityElement).feature.oclIsTypeOf(SingletonDate)
		endif
]
[if (isDate)]
new Database_Expression('UNIX_TIMESTAMP([path.field.columnName()/])')
[else]
	[if (path.field.oclIsKindOf(IncludedAssociation))]
'[path.field.columnName()/]'
	[else]
'[path.field.modelPropertyName()/]'
	[/if]
[/if]
[/let]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(CurrentUserReference)) post(trim())]
[let path : CurrentUserReference = criteria.oclAsType(CurrentUserReference)]
Auth::instance()->get_actual_user()->id
[/let]
[/template]


[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateBooleanOperator)) post(trim())]
[let predicate : PredicateBooleanOperator = criteria.oclAsType(PredicateBooleanOperator)]
[for (expression : Expression | predicate.expressions)]
[expression.generateCriteria()/]
[/for]
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateEqualityOperator)) post(trim())]
[let predicate : PredicateEqualityOperator = criteria.oclAsType(PredicateEqualityOperator)]
$this->where([predicate.left.generateCriteria()/], [if (predicate.negated)]'!='[else]'='[/if], [predicate.right.generateCriteria()/]);
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateComparisonOperator)) post(trim())]
[let predicate : PredicateComparisonOperator = criteria.oclAsType(PredicateComparisonOperator)]
$this->where([predicate.left.generateCriteria()/], '[predicate.operator.generateOperator()/]', [predicate.right.generateCriteria()/]);
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateIsOperator)) post(trim())]
[let predicate : PredicateIsOperator = criteria.oclAsType(PredicateIsOperator)]
$this->where([predicate.left.generateCriteria()/], 'IS[if (predicate.negated)] NOT[/if]', [predicate.right.generateCriteria()/]);
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateLikeOperator)) post(trim())]
[let predicate : PredicateLikeOperator = criteria.oclAsType(PredicateLikeOperator)]
$this->where([predicate.left.generateCriteria()/], 'LIKE', [predicate.right.generateCriteria()/]);
[/let]
[/template]

[template public generateCriteria(criteria : Expression)
	? (criteria.oclIsTypeOf(PredicateIsEmpty)) post(trim())]
[let predicate : PredicateIsEmpty = criteria.oclAsType(PredicateIsEmpty)]
$this->where([predicate.feature.generateCriteria()/], [if (predicate.negated)]'>'[else]'='[/if], '0');
[/let]
[/template]

[query public generateOperator(operator : BooleanOperator) : String
	= if operator = BooleanOperator::And then
			'AND'
		else if operator = BooleanOperator::Or then
			'OR'
		else
			'?'
		endif endif
/]

[query public generateOperator(operator : ComparisionOperator) : String
	= if operator = ComparisionOperator::GreaterThan then
			'>'
		else if operator = ComparisionOperator::LessThan then
			'<'
		else
			'?'
		endif endif
/]


[template public generateOrderPath(path : Path)
	? (path.oclIsTypeOf(ModelReference)) post(trim())]
[let modelReference : ModelReference = path.oclAsType(ModelReference)]
$this->[modelReference.unit.instanceName()/]
[/let]
[/template]

[template public generateOrderPath(path : Expression)
	? (path.oclIsTypeOf(FeatureReference)) post(trim())]
[let featureReference : FeatureReference = path.oclAsType(FeatureReference)]
[featureReference.field.columnName()/]
[/let]
[/template]

