[comment encoding = UTF-8 /]
[module names(
	'http://www.eclipse.org/emf/2002/Ecore',
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf',
	'http://www.cs.man.ac.uk/mdsd/2010/ObjectRelationalMapping')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]


[query public appBundleName(eObject : EObject) : String
	= 'AppBundle'
/]


[query public serviceClassName(service : Service) : String
	= service.name.concat('Service')
/]

[query public selectName(service : Service) : String
	= service.name.toLowerCase()
/]


[query public baseControllerClassName(eObject : EObject) : String
	= 'Controller'
/]

[query public controllerName(page : Page) : String
	= page.name
/]

[query public controllerClassName(page : Page) : String
	= page.controllerName().concat('Controller')
/]

[query public instanceName(page : Page) : String
	= page.name.toLowerFirst()
/]


[comment query public instanceName(genMenu : GenMenu) : String
	= genMenu.name().toLowerFirst()
/]

[comment query public actionName(genUnit : GenContentUnit) : String
	= genUnit.instanceName()
/]

[query public controllerName(unit : DynamicUnit) : String
	= unit.pageDisplayedOn().controllerName()
/]

[query public instanceName(unit : ContentUnit) : String
	= unit.name.toLowerFirst()
/]

[comment query public modelName(genUnit : GenContentUnit) : String
	= let baseName : String
		= if genUnit.oclIsTypeOf(GenStaticUnit) then
				if genUnit.oclAsType(GenStaticUnit).genService.oclIsUndefined() then
					'None'
				else
					genUnit.oclAsType(GenStaticUnit).genService.modelName()
				endif
			else
				genUnit.oclAsType(GenDynamicUnit).genService.modelName()
			endif
		in if genUnit.pageDisplayedOn().genPartOf.ormTechnology = OrmTechnologies::GasORM then
				'Model\\'.concat(baseName)
			else
				baseName
			endif
/]

[comment query public asTargetUri(genUnit : GenDynamicUnit) : String
	= genUnit.genDisplayedOn.oclAsType(GenPage).controllerName().concat('/')
		.concat(genUnit.actionName()).concat('/')
/]

[comment query public pageIndexName(genUnit : GenContentUnit) : String
	= genUnit.instanceName().concat('_page')
/]

[query public routeParameterName(unit : ContentUnit) : String
	= unit.instanceName()
/]

[comment query public templateInstanceName(genUnit : GenContentUnit) : String
	= genUnit.instanceName().concat('_template')
/]

[query public uniqueName(unit : ContentUnit) : String
	= let key : String
			= if unit.displayedOn.oclIsTypeOf(Page) then
				unit.displayedOn.oclAsType(Page).instanceName()
			else
				unit.displayedOn.oclAsType(UnitAssociation).displayedOn.uniqueName()
			endif
		in key.concat('_').concat(unit.instanceName())
/]


[comment query public optionsName(genField : GenUnitField) : String
	= genField.uniqueName().concat('_options')
/]

[comment query public uniqueName(genField : GenUnitField) : String
	= genField.genDisplayedOn.instanceName().concat('_').concat(genField.modelPropertyName())
/]


[comment query public instanceName(genFeature : GenUnitFeature) : String
	= genFeature.name().toLowerFirst()
/]

[comment query public modelName(genFeature : GenUnitAssociation) : String
	= genFeature.genServiceFeature.modelName()
/]


[comment query public actionName(genCommand : GenCommand) : String
	= genCommand.instanceName()
/]

[comment query public instanceName(genCommand : GenCommand) : String
	= genCommand.name.toLowerFirst()
/]


[query public actionName(action : InlineAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).instanceName()
				.concat(action.name.toUpperFirst())
		else
			let association : UnitAssociation
					= action.usedBy.oclAsType(UnitAssociation)
				in association.displayedOn.instanceName()
				.concat(association.name.toUpperFirst())
				.concat(action.name.toUpperFirst())
		endif
/]

[comment query public destinationUriX(genAction : GenInlineAction) : String
	= if genAction.oclIsTypeOf(GenDeleteAction) then
			genAction.oclAsType(GenDeleteAction).destinationUriX()
		else
			genAction.oclAsType(GenSelectAction).destinationUriX()
		endif
/]

[comment query public destinationUriX(genAction : GenDeleteAction) : String
	= genAction.genUsedBy.oclAsType(GenDynamicUnit).pageDisplayedOn().controllerName()
		.concat('/').concat(genAction.actionName()).concat('/')
/]

[comment query public destinationUriX(genSelectAction : GenSelectAction) : String
	= let genTarget : GenDynamicUnit = genSelectAction.genTarget.oclAsType(GenDynamicUnit)
		in let methodName : String
			= if genTarget.oclIsKindOf(GenIndexUnit) then
					genTarget.actionName().concat(genSelectAction.name)
				else
					genTarget.actionName()
				endif
			in genTarget.genDisplayedOn.oclAsType(GenPage).controllerName().concat('/')
				.concat(methodName).concat('/')
/]

[query public instanceName(action : InlineAction) : String
	= action.name.toLowerFirst()
/]

[query public modelName(action : DeleteAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).service.modelName
		else
			action.usedBy.oclAsType(UnitAssociation).serviceFeature.oppositeService.modelName
		endif
/]

[query public modelName(action : FeatureSupportAction) : String
	= if action.usedBy.oclIsKindOf(DynamicUnit) then
			action.usedBy.oclAsType(DynamicUnit).service.modelName
		else
			action.usedBy.oclAsType(UnitAssociation).serviceFeature.oppositeService.modelName
		endif
/]

[comment query public modelName(genAction : GenSelectAction) : String
	= let genUnit : GenDynamicUnit
		= if genAction.genUsedBy.oclIsKindOf(GenDynamicUnit) then
				genAction.genUsedBy.oclAsType(GenDynamicUnit)
			else
				genAction.genUsedBy.oclAsType(GenUnitAssociation).genDisplayedOn
			endif
		in genUnit.genService.modelName()
/]

[query public routeParameterName(action : InlineAction) : String
	= action.actionName()
/]


[query public countName(selection : Selection) : String
	= selection.instanceName().concat('_count')
/]

[query public instanceName(selection : Selection) : String
	= selection.name.toLowerFirst()
/]


[comment query public instanceName(genEntity : GenEntity) : String
	= genEntity.name.toLowerFirst()
/]


[query public modelClassName(enumerationType : EnumerationType) : String
	= enumerationType.name
/]

[comment query public modelName(enumerationType : EnumerationType) : String
	= enumerationType.name
/]

[comment query public name(enumerationLiteral : EnumerationLiteral) : String
	= enumerationLiteral.name.toUpper()
/]

