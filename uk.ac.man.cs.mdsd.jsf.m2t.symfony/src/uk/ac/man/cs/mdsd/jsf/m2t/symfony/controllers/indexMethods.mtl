[comment encoding = UTF-8 /]
[module indexMethods(
	'http://www.cs.man.ac.uk/mdsd/2010/Jsf')]
[import uk::ac::man::cs::mdsd::web::m2t::core::common::featureProperties/]
[import uk::ac::man::cs::mdsd::jsf::m2t::symfony::names/]
[import uk::ac::man::cs::mdsd::jsf::m2t::symfony::controllers::commonMethods/]


[template public generateUnitVariables(unit : ContentUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[/let]
[/template]

[template public generateUnitDisplay(unit : ContentUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[if (not indexUnit.selection.oclIsUndefined())]
$[unit.instanceName()/] = $this->get('[indexUnit.service.name/]')
    ->[indexUnit.selection.instanceName()/](/* [if (indexUnit.defaultPaginationSize) > 0]
TRUE, max($this->request->query('[unit.routeParameterName()/]'), 1), [indexUnit.defaultPaginationSize/][/if] */);
[else]
$[unit.instanceName()/] = $this->getDoctrine()
        ->getRepository('[indexUnit.appBundleName()/]:[indexUnit.service.modelName/]')
        ->findAll();

$this->[unit.instanceName()/] = ORM::factory('[indexUnit.service.modelName/]')->[if (indexUnit.defaultPaginationSize) > 0]
paginated(max($this->request->query('[unit.routeParameterName()/]'), 1), [indexUnit.defaultPaginationSize/])[else]
find_all()[/if];
[/if]
/* [if (indexUnit.defaultPaginationSize) > 0]
$[unit.instanceName()/] = ORM::factory('[indexUnit.service.modelName/]')->[if (not indexUnit.selection.oclIsUndefined())]
[indexUnit.selection.countName()/]()[else]
count_all()[/if];
$[unit.instanceName()/]_pagination = Pagination::factory(array(
	'group' => '[unit.uniqueName()/]',
	'total_items' => $[unit.instanceName()/]
));
[/if]*/
[/let]
[/template]

[template public generateUnitTemplateParameters(unit : ContentUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
'[indexUnit.instanceName()/]' => $[unit.instanceName()/],
[/let]
[/template]

[template public generateUnitMethods(unit : DynamicUnit)
	? (unit.oclIsKindOf(IndexUnit)) post(trim())]
[let indexUnit : IndexUnit = unit.oclAsType(IndexUnit)]
[for (action : InlineAction | unit.uriActions())]
[action.generateActionMethod('$this->'.concat(unit.instanceName()).concat('_error'))/]

[/for]
[if (unit.pageDisplayedOn().partOf.ajaxTechnology = AjaxTechnologies::jQuery
		and (indexUnit.defaultPaginationSize) > 0)]
public function page()
{
}
[/if]
[/let]
[/template]