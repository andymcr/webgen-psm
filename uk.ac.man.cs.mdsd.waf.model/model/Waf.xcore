@Ecore(
	nsURI="http://www.cs.man.ac.uk/mdsd/2015/WebApplicationFramework",
	nsPrefix="waf"
)
@GenModel(
	editDirectory="/uk.ac.man.cs.mdsd.waf.edit/src",
	editPluginID="uk.ac.man.cs.mdsd.waf.edit",
	childCreationExtenders="true",
	complianceLevel="6.0", editorDirectory="/uk.ac.man.cs.mdsd.waf.editor/src")
package uk.ac.man.cs.mdsd.waf

import uk.ac.man.cs.mdsd.criteria.Expression
import uk.ac.man.cs.mdsd.criteria.Order
import uk.ac.man.cs.mdsd.criteria.Path
import uk.ac.man.cs.mdsd.criteria.Predicate
import uk.ac.man.cs.mdsd.orm.Association
import uk.ac.man.cs.mdsd.orm.Attribute
import uk.ac.man.cs.mdsd.orm.DataType
import uk.ac.man.cs.mdsd.orm.DateDetails
import uk.ac.man.cs.mdsd.orm.EntityOrView
import uk.ac.man.cs.mdsd.orm.Feature
import uk.ac.man.cs.mdsd.orm.Label
import uk.ac.man.cs.mdsd.orm.NamedDisplayElement
import uk.ac.man.cs.mdsd.orm.NamedElement
import uk.ac.man.cs.mdsd.orm.OrmModel
import uk.ac.man.cs.mdsd.orm.SingletonLocation
import uk.ac.man.cs.mdsd.rest.API


enum FrameworkTechnologies {
	JSF
	CakePHP = 1
	CodeIgniter = 2
	Kohana = 3
	Laravel = 4
	Symfony = 5
}

enum AjaxTechnologies {
	None
	jQuery = 1
	AngularJS = 2
}

class WafModel {
	refers OrmModel[1] persistence
	contains Service[] services opposite partOf
	contains Page[] pages opposite partOf
	contains Menu[] menus
	String[1] siteName
	String[1] siteTitle
	boolean developmentVersion
	String baseURL
	boolean rewriteURLs
	String webmasterEmail
	String copyrightText
	String metaDescription
	FrameworkTechnologies frameworkTechnology
	AjaxTechnologies ajaxTechnology
	contains Authentication authentication opposite authorises
	String captchaSiteKey
	String captchaSecretKey
	String textEditorURL
	String topNavigationId
	refers Menu sideMenu
	String siteTemplate
	boolean staticUnitsEditable
	refers API restApi
}


abstract class Authentication {
	refers WafModel[1] authorises opposite authentication
	refers EntityOrView[1] user
	refers Attribute[1] userKey
	String[1] loginLabel = ""
	String logoutLabel = ""
}

enum AuthenticationKeyTypes {
	Email = 1
	Username = 2
}

class LocalAuthenticationSystem extends Authentication {
	refers EntityOrView authentication
	AuthenticationKeyTypes[1] authenticationKey
	refers EntityOrView loginAttempt
	refers EntityOrView autoLogin
	boolean useCaptcha
	boolean allowSelfRegistration
	boolean useEmailActivation = "true"
	boolean sendWelcomeEmail = "true"
	refers RegistrationUnit registrationUnit opposite authenticationSystem
	refers LoginUnit loginUnit opposite authenticationSystem
	refers ForgottenPasswordUnit forgottenPasswordUnit opposite authenticationSystem
}

class CasAuthentication extends Authentication {
}


abstract class DisplayElement {
	String[1] displayLabel
}


class Service extends NamedElement {
	refers WafModel[1] partOf opposite services
	refers EntityOrView[1] serves
	contains Selection[] selections opposite partOf
	contains BusinessOperation[] operations opposite partOf
}

class Selection extends NamedElement {
	container Service partOf opposite selections
	boolean distinct
	contains SelectionParameter[] parameters
	contains SelectField[] fields
	refers Association[] joins
	contains Predicate filter
	contains Order[] ordering
	int limit = "0"
}

abstract class SelectField {
}

class SelectEntityOrView extends SelectField {
	refers EntityOrView entityOrView
}

class SelectAttribute extends SelectField {
	refers Attribute attribute
}

class SelectionParameter extends NamedElement {
	String defaultValue
}

class BusinessOperation extends NamedElement {
	container Service[1] partOf opposite operations
	OperationResultTypes[1] resultType
	String resultMimeType
}

enum OperationResultTypes {
	None
	File = 1
}


abstract class Menu extends NamedDisplayElement {
	contains MenuEntry[] entries opposite partOf
	boolean omitCaption
	String captionClass
	String styleClass
	String layoutClass
}

class StaticMenu extends Menu {
}

class DynamicMenu extends Menu {
	refers EntityOrView[1] entityOrView
	refers Selection[1] selection
	refers Label title
}

abstract class MenuEntry {
	container Menu[1] partOf opposite entries
}

class ActionMenuEntry extends MenuEntry, NamedDisplayElement {
	refers DynamicUnit[1] action
	contains Query query
}

class EditStaticTextMenuEntry extends MenuEntry, NamedDisplayElement {
}

enum PageTopMenuOptions {
	NeverInclude
	AlwaysInclude = 1
	IncludeWhenAuthenticated = 2
}

class Page extends NamedDisplayElement, UnitContainer {
	container WafModel partOf opposite pages
	refers Page parentPage opposite childPages
	refers Page[] childPages opposite parentPage
	boolean authenticated
	String uriElement = ""
	PageTopMenuOptions topMenuOption
	int topMenuRank = "65535"
	String navigationLabel
	refers Menu sideMenu
	String styleClass
}

class Filter extends NamedElement {
	contains FilterParameter[] parameters
	refers Selection selection
}

class FilterParameter extends NamedElement {
	refers SelectionParameter formal
	refers DataType dataType
	String defaultValue = ''
}

class Query extends NamedElement {
	refers Filter[1] filter
	contains QueryParameter[] parameters
}

class QueryParameter extends NamedElement {
	refers FilterParameter[1] formal
	String value
}

interface Selectable {
}

interface UnitContainer {
	contains ContentUnit[] units opposite displayedOn
}

abstract class ContentUnit extends NamedDisplayElement {
	container UnitContainer[1] displayedOn opposite units
	String purposeSummary
	String uriElement = ""
	String alternative
	boolean omitCaption
	String captionClass
	String styleClass
	String contentClass
}

class StaticUnit extends ContentUnit {
	refers Service service
	String[1] content
}

abstract class DynamicUnit extends ContentUnit {
	refers EntityOrView[1..*] entities
	contains UnitField[] displayFields opposite displayedOn
	contains UnitSupportAction[] supportActions
	boolean noRouteParameters = "false"
	String header
	String footer
	String headerClass
	String controlClass
	String footerClass
	String errorClass
}

class UnitSupportAction extends NamedDisplayElement {
	boolean disable
	String confirmMessage
}

interface UnitField extends DisplayElement {
	container DynamicUnit[1] displayedOn opposite displayFields
	int maximumDisplaySize = "-1"
	String dateFormat
}

abstract class UnitFeature extends UnitField, InlineActionContainer {
	contains Expression forcedValue
	boolean onlyDisplayWhenNotEmpty = "false"
	boolean autofocus
	String footer
	String headerClass
	String inputClass
	String displayClass
	String footerClass
}

class UnitAttribute extends UnitFeature {
	refers Attribute[1] attribute
	derived String[1] name get {
		if (attribute != null)
			attribute.name
	}
	contains Expression defaultValue
	boolean obfuscateFormFields
	String placeholder
	String validationPattern
}

enum CollectionDisplayOptions {
	LineDirection
	PageDirection = 1
}

class UnitAssociation extends UnitFeature, UnitContainer {
	refers Association[1] association
	derived String[1] name get {
		if (association != null)
			association.name
	}
	contains ChildFeature childFeature
	refers Selection selection
	refers Label valueDisplay
	CollectionDisplayOptions displayOption
	// for selecting inputs
	refers Label[] filters
}

abstract class ChildFeature {
}

class ChildAttribute extends ChildFeature {
	derived String name get {
		if (attribute != null)
			attribute.name
	}
	refers Attribute[1] attribute
}

class ChildAssociation extends ChildFeature {
	derived String name get {
		if (association != null)
			association.name
	}
	refers Association[1] association
	contains ChildFeature childFeature
}

abstract class InterfaceField extends NamedElement, UnitField {
	boolean required
	contains Expression defaultValue
	refers UnitField mustMatch
	String interfaceType
	String placeholder
	String validationPattern
	String inputClass
}

class DataTypeField extends InterfaceField {
	refers DataType[1] dataType
	boolean caseInsensitive
	boolean obfuscateFormFields
	boolean encrypt
}

class DateField extends InterfaceField {
	DateDetails[1] details
	String format
}

class CaptchaField extends InterfaceField {
}

abstract class EditUnit extends DynamicUnit {
	refers Page confirmDestination
	String[1] confirmLabel
	refers Page cancelDestination
	String cancelLabel
	boolean customiseValues
}

class CreateUnit extends EditUnit {
}

class CreateUpdateUnit extends EditUnit, Selectable {
	String createUriElement = ""
	String clearLabel
}

class MapUnit extends EditUnit, Selectable {
	boolean readOnly
	int defaultZoomLevel
	refers SingletonLocation[1] location
	refers Attribute placeName
}

class UpdateUnit extends EditUnit, Selectable {
}

abstract class DataUnit extends DynamicUnit {
	refers Selection defaultSelection
	refers Label title
}

class DetailsUnit extends DataUnit, Selectable {
	boolean onlyDisplayWhenNotEmpty
	boolean omitFieldLabels
}

abstract class IndexUnit extends DataUnit, InlineActionContainer {
	boolean omitColumnLabels
	contains Filter[] filters
	refers Filter pagination
	int defaultPaginationSize
	String nextPageLabel = ">"
	String previousPageLabel = "<"
	boolean useFirstLastPageLinks
	String firstPageLabel = "<<"
	String lastPageLabel = ">>"
	refers SearchUnit targettingSearches opposite resultsDestination
	String rowClasses
}

class IndexGridUnit extends IndexUnit {
}

class IndexPageDirectionUnit extends IndexUnit {	
}

class IndexLineDirectionUnit extends IndexUnit {
}

abstract class ControlUnit extends DynamicUnit {
	String[1] submitLabel
	refers Page cancelDestination
	String cancelLabel
}

class SearchUnit extends ControlUnit {
	refers IndexUnit[1] resultsDestination opposite targettingSearches
}

class ActionUnit extends ControlUnit {
}

interface AuthenticationUnit {
}

class RegistrationUnit extends EditUnit, AuthenticationUnit {
	refers LocalAuthenticationSystem authenticationSystem opposite registrationUnit
}

class LoginUnit extends ControlUnit, AuthenticationUnit {
	refers LocalAuthenticationSystem authenticationSystem opposite loginUnit
	refers UnitField[1] loginIdField
	refers UnitField[1] passwordField
	refers UnitField rememberMeField
	String[1] logoutUriElement
}

class ForgottenPasswordUnit extends ControlUnit, AuthenticationUnit {
	refers LocalAuthenticationSystem authenticationSystem opposite forgottenPasswordUnit
	refers UnitField[1] loginIdField
}


interface InlineActionContainer {
	contains InlineAction[] actions opposite usedBy
}

abstract class InlineAction extends NamedDisplayElement {
	container InlineActionContainer[1] usedBy opposite actions
	boolean disable
	String header
	String footer
	String headerClass
	String footerClass
}

class SelectAction extends InlineAction {
	refers Selectable[1] target
}

class DeleteAction extends InlineAction {
	refers Page destination
	String[1] confirmMessage
	String[1] uriElement
}

class FeatureSupportAction extends InlineAction {
	refers BusinessOperation[1] operation
	String confirmMessage
	String[1] uriElement
	String fileExtension
}


class ModelReference extends Path {
	refers DynamicUnit[1] unit
}

class FeatureReference extends Path {
	refers Feature[1] feature
}

class ParameterReference extends Path {
	refers SelectionParameter[1] parameter
}

class CurrentUserReference extends Path {
}